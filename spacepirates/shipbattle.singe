--[[

PROGRAM NAME:	SPACE PIRATES (SINGE EDITION)
AUTHOR:			RDG2010
CONVERTED FOR SINGE 2: POIU2020
This file is part of SPACE PIRATES (SINGE EDITION)

    SPACE PIRATES (SINGE EDITION) is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation.

    SPACE PIRATES (SINGE EDITION) is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

    Read COPYING.TXT for more info.


]]--

BRESX = 1
BRESY = 2
LINE_SPEED = 5

startPos = nil; startPos = {}; startPos = {0,0}
endPos   = nil; endPos = {}; endPos   = {0,0}
patharray = nil; patharray = {}; pcount = 1; ptotal = 0
bresFrame = 0; bresIndex = 1; bCannonFired = false

function drawline(spos, epos)

-- Bresenham's line drawing algorithm. 

	-- Start and End line coordinates

	local x1 = spos[BRESX]; local x2 = epos[BRESX]
	local y1 = spos[BRESY]; local y2 = epos[BRESY]
	
	-- Worker variables

	local x; local y; local dx; local dy; local sx; local sy; local z; local e; local i;
	local Parity = false;
	
	-- init array 
	
	patharray = nil; patharray = {}; pcount = 1; ptotal = 0

	  x = x1 -- start point
	  y = y1 
	  dx = math.abs(x2 - x1) -- deltax
	  dy = math.abs(y2 - y1) -- deltay
	  sx = lsign(x2 - x1) -- direction for x
	  sy = lsign(y2 - y1) -- direction for y

	  if (dy > dx) then -- swap values if x is decreasing
	  
		z  = dx
		dx = dy
		dy = z
		Parity = true
		
	  else 
		Parity = false
	  end
	  
	  e = 2*dy - dx  -- calculate line drawing error
	  i = 1
	  
	  while (i<dx) do
	  
		patharray[pcount]={}; patharray[pcount]={x,y}; pcount = pcount + 1
		while (e >= 0) do
		
		  if Parity then x = x + sx else y = y + sy end
		  e = e - 2*dx
		end
		
		if Parity then y = y + sy else x = x + sx end
		e = e + 2*dy
		i = i + 1
		
	  end
	  patharray[pcount]={}; patharray[pcount]={x,y}
	  
	  ptotal = pcount
	  pcount = 1

end

function lsign(thisN)

	if thisN < 0 then 
		return -1 
	elseif thisN == 0 then
		return 0
	else
		return 1
	end

end

function shipHit(thisFrame, thisMove, thisPos)

	local k = 0
	local f1 = 0
	local f2 = 0
	local x1 = 0
	local x2 = 0
	local y1 = 0
	local y2 = 0	
	local bResult = false
	local bFound = false
	local loopStart = move[thisMove][hitboxStart]
	local loopEnd = move[thisMove][hitboxEnd]
	
	bResult = false
	
	for k=loopStart,loopEnd do
		
		if (hitmap[k][hitmapFrame] == thisFrame) then
			
			f1 = hitmap[k][hitmapIndex]
			f2 = f1 + (hitmap[k][hitmapCount]-1)
			bFound = true		
			
			break
		end	

	end
	
	if bFound then
		
		for k=f1,f2 do
			
			x1 = hitbox[k][bbx1]
			y1 = hitbox[k][bby1]
			x2 = hitbox[k][bbx2]
			y2 = hitbox[k][bby2]
			
			if (thisPos[BRESX] >= x1 and thisPos[BRESX] <= x2) and (thisPos[BRESY] >= y1 and thisPos[BRESY] <= y2) then	-- Player hit!
				
				if k == f1 then
				
					if not (f1 == f2) then  -- headshot
					
						iScore = iScore + (SCORE_BADGUY * 0.25)
						
					end
				
				end
				
				if bDebug then debugPrint ("CANNON HIT!") end
				bResult = true
				break
			
			end			
			
		end
		
	end

	return bResult

end

function doCannonPractice()

	if lvlState == lvlSetup then
	
		if bDebug then debugPrint("Entering doCannonPractice()") end
		
		setupLevel(levelFirePractice)
		bLevelComplete = false
		levelFrameStart = thisOffset + 2740
		levelFrameEnd = thisOffset + 3515
		currentMove = 1		
		
		setupClip(offsetMenus + 5034, offsetMenus + 5183)
		lvlState = lvlPlayClip2
		
	elseif lvlState == lvlRunning then
	
		if (currentMove > totalMoves) then
	
			if (currentFrame == levelFrameEnd) then
		
				bLevelComplete = true
				lvlState = lvlEnd
				
			end
			
		elseif (currentFrame > move[currentMove][moveFrameEnd]) then -- End of move
	
			discSkipToFrame(move[currentMove][rndMoveEnd])			
			currentMove = currentMove + 1			
	
		elseif (currentFrame >= move[currentMove][moveFrameStart] and currentFrame < move[currentMove][moveFrameEnd]) then
	
			if p1BUTTON3 then
			
				p1BUTTON3 = false; bCannonFired = true
				startPos = nil; startPos = {}; startPos = {60,150}				
				endPos   = nil; endPos = {}; endPos   = {cursorx, cursory} 
				
				drawline(startPos, endPos)
				
				soundPlay(sndCredit)
				bresFrame = currentFrame
				
				lvlState = lvlPlayClip1
			
			end
			
		end
		
	elseif lvlState == lvlPlayClip1 then	
	
		if (bresFrame ~= currentFrame) then
	
			bresFrame = currentFrame
			bresIndex = bresIndex + 1
			if bresIndex > 10 then bresIndex = 1 end
	
			pcount = pcount + LINE_SPEED
			if pcount > ptotal then pcount = ptotal end
			
		end
		
		if pcount < ptotal then
	
	
			spriteDraw(endPos[BRESX]-7, endPos[BRESY]-7, sprSpot)		
			spriteDraw(patharray[pcount][BRESX]-6, patharray[pcount][BRESY]-6, sprShot[bresIndex])				
		
		else
	
			if (shipHit((currentFrame - thisOffset), currentMove, endPos) == true) then  -- Player Hit!
			
				iScore = iScore + SCORE_BADGUY				
				discSkipToFrame(move[currentMove][rndMoveEnd])
				if currentMove < totalMoves then soundPlay(sndGoodShot) end
				currentMove = currentMove + 1								
			
			end
			lvlState = lvlRunning
			bCannonFired = false
		
		end			
		
	elseif (lvlState == lvlPlayClip2) then
	
		if (currentFrame == iFrameEnd) then
		
			setupClip(24439, 24652)
			lvlState = lvlPlayClip3
		
		end
		
	elseif (lvlState == lvlPlayClip3) then
	
		if (currentFrame == iFrameEnd or (currentFrame > (iFrameStart + 30) and p1BUTTON3)) then		
			
			p1BUTTON3 = false
			discSkipToFrame(levelFrameStart)		
			lvlState = lvlRunning			
		
		end
	
	elseif lvlState == lvlEnd then
	
		
		lvlState = lvlSetup
		currentLevel = levelMenu
		bSection01Reached = false
		bSection02Reached = false
		bSection03Reached = false
		bSection04Reached = false
		bSection05Reached = false
		bLevelComplete = true
		stage[levelFirePractice] = true
		
		if bDebug then debugPrint("Leaving doCannonPractice()") end
	
	end
	
end

function doShipBattle()

	if lvlState == lvlSetup then
	
		if bDebug then debugPrint("Entering doShipBattle()") end
		
		setupLevel(levelShipBattle)
		bLevelComplete = false
		levelFrameStart = thisOffset + 4220
		levelFrameEnd = thisOffset + 4647
		bCannonFired = false
		lvlState = lvlRunning	
		
		if bSection01Reached and (not bSection02Reached) then
		
			currentMove = 2
			discSkipToFrame(move[currentMove][rndMoveStart])		
		
		
		elseif bSection02Reached and (not bSection03Reached) then
		
			currentMove = 3
			discSkipToFrame(move[currentMove][rndMoveStart])		
		
			
		elseif totalMoves >= 4 and bSection03Reached and (not bSection04Reached) then
		
			currentMove = 4
			discSkipToFrame(move[currentMove][rndMoveStart])		
		
			
		elseif totalMoves == 5 and bSection04Reached and (not bSection05Reached) then
		
			currentMove = 5
			discSkipToFrame(move[currentMove][rndMoveStart])

		else
		
			currentMove = 1
			discSkipToFrame(move[currentMove][rndMoveStart])			
		
		end
		
	elseif lvlState == lvlRunning then
	
		if (currentMove > totalMoves) then
	
			-- nothing is done in this branch.
			
		elseif (currentFrame > move[currentMove][moveFrameEnd]) then -- End of move
		
			getDeathFrames(TALLON_NEXTTIMERANGER)
			discSkipToFrame(move[currentMove][deathFrameStart])
			lvlState = lvlPlayDeath
	
		elseif (currentFrame >= move[currentMove][moveFrameStart] and currentFrame < move[currentMove][moveFrameEnd]) then
		
			if p1BUTTON3 then
		
				p1BUTTON3 = false; bCannonFired = true				
				
				startPos = nil; startPos = {}; startPos = {60,150} 		
				endPos   = nil; endPos = {}; endPos   = {cursorx, cursory}
				
				drawline(startPos, endPos)
				
				soundPlay(sndCredit)				
				bresFrame = currentFrame
				
				lvlState = lvlPlayClip1
			
			end
			
		end
		
	elseif lvlState == lvlPlayClip1 then
	
	
		if (bresFrame ~= currentFrame) then
		
			bresFrame = currentFrame
			bresIndex = bresIndex + 1
			if bresIndex > 10 then bresIndex = 1 end
	
			pcount = pcount + LINE_SPEED
			if pcount > ptotal then pcount = ptotal end
			
		end
	
		if (currentFrame > move[currentMove][moveFrameEnd]) then -- End of move
		
			getDeathFrames(TALLON_NEXTTIMERANGER)
			discSkipToFrame(move[currentMove][deathFrameStart])
			lvlState = lvlPlayDeath
	
		elseif pcount < ptotal then
		
			spriteDraw(endPos[BRESX]-7, endPos[BRESY]-7, sprSpot)		
			spriteDraw(patharray[pcount][BRESX]-6, patharray[pcount][BRESY]-6, sprShot[bresIndex])				
		
		else
		
			if (shipHit((currentFrame - thisOffset), currentMove, endPos) == true) then  -- Player Hit!
		
				iScore = iScore + SCORE_BADGUY	

				if totalMoves == 3 then			
				
					if currentMove == 1 then
				
						setupClip(25207, 25386)
						bSection01Reached = true
						
					elseif currentMove == 2 then
					
						setupClip(25452, 25630)
						bSection02Reached = true
						
					elseif currentMove == 3 then
				
						setupClip(25659, 25838)
						bSection03Reached = true
						
					end
					
				elseif totalMoves == 4 then			
				
					if currentMove == 1 then
				
						setupClip(25207, 25269)
						bSection01Reached = true
						
					elseif currentMove == 2 then
					
						setupClip(25452, 25630)
						bSection02Reached = true
						
					elseif currentMove == 3 then
				
						setupClip(25659, 25838)
						bSection03Reached = true
						
					elseif currentMove == 4 then
				
						setupClip(25659, 25838)
						bSection04Reached = true
						
					end
					
				elseif totalMoves == 5 then			
				
					if currentMove == 1 then
				
						setupClip(25207, 25269)
						bSection01Reached = true
						
					elseif currentMove == 2 then
					
						setupClip(25452, 25514)
						bSection02Reached = true
						
					elseif currentMove == 3 then
				
						setupClip(25659, 25719)
						bSection03Reached = true
						
					elseif currentMove == 4 then
				
						setupClip(25207, 25386)
						bSection04Reached = true
						
					elseif currentMove == 5 then
					
						setupClip(25452, 25630)
						bSection05Reached = true						
					
					end
					
				end
					
					
				lvlState = lvlPlayClip3
			
			else
			
				lvlState = lvlRunning
			
			end
			bCannonFired = false
			
		
		end		
		
	elseif (lvlState == lvlPlayClip3) then
	
		if (currentFrame == iFrameEnd or (currentFrame > (iFrameStart + 30) and p1BUTTON3)) then		
		
			currentMove = currentMove + 1
			p1BUTTON3 = false
			
			if currentMove <= totalMoves then
				discSkipToFrame(move[currentMove][rndMoveStart])
				lvlState = lvlRunning			
			else
			
				setupClip(25840, 26652)
				lvlState = lvlPlayClip4
			
			end
			
		
		end
		
	elseif (lvlState == lvlPlayClip4) then
	
		if (currentFrame == iFrameEnd or (currentFrame > (iFrameStart + 30) and p1BUTTON3)) then
		
			p1BUTTON3 = false	
			bLevelComplete = true
			lvlState = lvlEnd
			
		end
		
	elseif (lvlState == lvlPlayDeath) then

		if (currentFrame == move[currentMove][deathFrameEnd]) then			
	
			discSkipToFrame(undertkrFrmStart)
			lvlState = lvlPlayNag
		
		end	
	
	elseif (lvlState == lvlPlayNag) then

		if (currentFrame == undertkrFrmEnd or p1BUTTON3) then

			p1BUTTON3 = false
			lvlState = lvlEnd
		
		end	
	
	elseif lvlState == lvlEnd then

		lvlState = lvlSetup
		if (iLives == 0) then --Game Over 
			
			tempLevel = currentLevel		
			currentLevel = levelContinue
			
		elseif (iLives > 0 and dip_Undertaker == false and not bLevelComplete) then
			
			tempLevel = currentLevel
			currentLevel = levelLivesLeft			
			
		else
			
			if bLevelComplete then
				
				currentLevel = levelTallon
				bSection01Reached = false
				bSection02Reached = false
				bSection03Reached = false
				bSection04Reached = false
				bSection05Reached = false
				
			end
			
		end	
	
		if bDebug then debugPrint("Leaving doShipBattle()") end
	
	end


end

function whereisthecannon()

	if bDebug then debugPrint("Entering whereisthecannon()") end

	local q = 0
	local w	= 0
	
	-- Choose a random stage to place the cannon.
	-- Do not repeat from previous game.
	
	repeat
	
		q = math.random(4)
		
		if q == 1 then w = STAGE_SCRAPYARD end
		if q == 2 then w = STAGE_FELLINA end
		if q == 3 then w = STAGE_REAPER end
		if q == 4 then w = STAGE_MOUNTAIN end		
		
	until (w ~= iLevelWithCannon)
	
	if bDebug then debugPrint("Leaving whereisthecannon()") end
	
	iLevelWithCannon = w

end
