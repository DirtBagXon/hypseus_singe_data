--[[

PROGRAM NAME:	FIRE & ICE
VERSION:		2.0
AUTHOR:			KARIS (2019)

This file is part of FIRE AND ICE

    FIRE AND ICE is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation.

    FIRE AND ICE is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

    Thanks to RDG (original author of the program), Ralph Bakshi (director of the movie).
    Dedicated to Frank Frazetta (the God).


]]--

function addPoints(thisMuch)

	iScore = iScore + thisMuch
	iScoreTemp = iScoreTemp + thisMuch
	if dip_Rom == 0 then ExtraLife() end
	
	if (iScore > 99999999) then iScore = 99999999 end	

end

function BeatGameWithOneLife()

	local k = 0
	local j = 0
	local q = 0
	
	if dip_Debug then debugPrint("Entering BeatGameWithOneLife()") end
	
	for q=level01,finalstage do
	
		j = j + stage[q][DEATHCOUNT]
		
	end
	
	if dip_Debug then debugPrint("Leaving BeatGameWithOneLife()") end
	
	return (j == 0)

end

function BeatGameWithOneCredit()

	local j = 0
	
	j = j + iContinues
			
	return (j == 0)

end

function ExtraLife()
	
	if dip_ExtraLife == 0 then

	elseif dip_ExtraLife == 1 then

		if dip_LivesPerCredit == 5 then

			if iScoreTemp >= 70000 then

				soundPlay(sndvictory)
				
				bShowLives = true 
				
				iLives = iLives + 1
				if iLives > 9 then ilives = 9 end
				iScoreTemp = iScoreTemp - 70000

			end		

		elseif dip_LivesPerCredit == 3 then

			if iScoreTemp >= 50000 then

				soundPlay(sndvictory)
				iLives = iLives + 1
				iScoreTemp = iScoreTemp - 50000

			end	

		end

	elseif dip_ExtraLife == 2 then

		if dip_LivesPerCredit == 5 then

			if iScoreTemp >= 80000 then

				soundPlay(sndvictory)
				iLives = iLives + 1
				iScoreTemp = iScoreTemp - 80000

			end		

		elseif dip_LivesPerCredit == 3 then

			if iScoreTemp >= 60000 then

				soundPlay(sndvictory)
				iLives = iLives + 1
				iScoreTemp = iScoreTemp - 60000

			end	

		end

	elseif dip_ExtraLife == 3 then

		if dip_LivesPerCredit == 5 then

			if iScoreTemp >= 100000 then

				soundPlay(sndvictory)
				iLives = iLives + 1
				iScoreTemp = iScoreTemp - 100000

			end		

		elseif dip_LivesPerCredit == 3 then

			if iScoreTemp >= 70000 then

				soundPlay(sndvictory)
				iLives = iLives + 1
				iScoreTemp = iScoreTemp - 70000

			end	

		end

	end

end

function doContinue()

	if (lvlState == lvlSetup) then
	
		if dip_Debug then debugPrint("Entering doContinue()") end		
		
		if iCredits > 0 or dip_CoinsPerCredit == DOPT_FREEPLAY then

			discSkipToFrame(235)
			discPause()
			timerON(15)

		else	

			discSkipToFrame(225)		
			discPause()
			timerON(15)
			
		end

		bShowLives = false
		bShowLvl = false
		bShowScene = false
		bShowScore = false
		bShowCredits = true
		bShowAction = false
		
		lvlState = lvlRunning		
	
	elseif (lvlState == lvlRunning) then
	
		if timerDue() then
			
			lvlState = lvlEnd
		
		elseif (p1START1) then
			
			p1START1 = false
			
			if (iCredits > 0 or dip_CoinsPerCredit == DOPT_FREEPLAY) then

				bSkipIntroClip = true
				if iSegPointer > 0 then iSegPointer = iSegPointer - 1 end
				startGame()								
				if dip_Debug then debugPrint("Leaving doContinue(). Continuing game.") end
			
			end
		
		end
		
	elseif (lvlState == lvlEnd) then
	
		lvlState = lvlSetup
		bSkipIntroClip = true
				
		if newScore(iScore) then -- Has player achieved a high score?							
			
			currentLevel = levelHighScore
			bGOAlt = true	
			
		else							
			
			currentLevel = levelGameOver		
		
		end		
		
		if dip_Debug then debugPrint("Leaving doContinue().") end
		
	end

end

function doFillerFrame()

	if dip_Debug then debugPrint("Entering doFillerFrame()") end
	
	local b1 = true
	local k = 0
	
	for k=1,2 do
		b1 = b1 and filler[k]
	end
	
	if b1 then
	
		for k=1,2 do
		
			if k ~= iLastFiller then filler[k] = false end
		
		end

	end
	b1 = false
	repeat
		
		singeRandomize()
		k = math.random(2)
		if filler[k] == false then
		
			iLastFiller = k
			filler[k] = true
			b1 = true
		
		end
		
	until b1	
	
	if     iLastFiller  == 1 then setupClip(offsetIntro02, offsetIntro02end)
	elseif iLastFiller  == 2 then setupClip(offsetIntro03, offsetIntro03end)

	end
		
	if dip_Debug then debugPrint("Leaving doFillerFrame()") end

end

function doFinish()
		
	NextLevel(iCurPos)

end

function doGameOver()

	if (lvlState == lvlSetup) then

		if dip_Debug then debugPrint("Entering doGameOver()") end
		bShowLives = false
		bShowLvl = false
		bShowScene = false
		bShowScore = true
		bShowCredits = false
		bShowAction = false	
		SCOREMOVE = 500
		iNbItems = 0
		bObj01 = false
		bObj02 = false
		bObj03 = false
		bObj04 = false
		bObj05 = false
		bObj06 = false
		bObj07 = false
		bObj08 = false
		bObj09 = false
		bObj10 = false
		bObj11 = false
		bRetry = false

		
		discSkipToFrame(offsetGameOver)
		discPause()
		timerON(5)
		

		
		lvlState = lvlRunning
	
	elseif (lvlState == lvlRunning) then
	
		if timerDue() then
			
			bShowScore = false
			lvlState = lvlEnd		

		end	
	
	elseif (lvlState == lvlEnd) then
	
		lvlState = lvlSetup
		currentLevel = levelIntro	
		if dip_Debug then debugPrint("Leaving doGameOver()") end
	
	end

end

function doIntro()
	
	if (lvlState == lvlSetup) then
		
		if dip_Debug then debugPrint("Entering doIntro()") end	
		
		setupClip(offsetIntro01, offsetIntro01end)  -- ATTRACT	
		initLCD()
		lvlState = branch01		
		
		bShowCredits = true
		bShowLCD = true
		bShowLives = false
		bCheckForCredits = true

	elseif (lvlState == branch01) then

		if (currentFrame == iFrameEnd or p1BUTTON1) then
			
			p1BUTTON1 = false

			discSkipToFrame(frameCommands)	
			bShowLCD = false
			bShowCredits = false
			timerON(15)
			discPause()			
			lvlState = branch02			
	
		end
			
	elseif (lvlState == branch02) then
		
		if timerDue() then

						
			local k = 0
			fontSelect(fontGame)	
			setFontColor(YELLOW)
			discSkipToFrame(offsetOKHScore)
			timerON(5)
			discPause()
							
			lvlState = branch03
	
		
		end	
		
	elseif (lvlState == branch03) then
		
		if timerDue() then

			lvlState = lvlSetup

		else
				
			drawHS()		
		
		end	
		
	elseif (lvlState == branch04) then
		
		if currentFrame == iFrameEnd then lvlState = lvlSetup end
		
	elseif (lvlState == branch05) then
		
		if timerDue() then
		
			gameflow = flow_GameInit
			
		elseif (p1START1) then
		
			p1START1 = false
			
			if ((iCredits > 0 or dip_CoinsPerCredit == DOPT_FREEPLAY) and dip_Movie == false) then 			
				
				startGame()
				bShowCredits = false

			elseif dip_Movie == true then

				lvlState = lvlSetup 
				currentLevel = levelMovie
				bShowCredits = false
			
			end
	
		end
	
	elseif (lvlState == lvlEnd) then
		
		-- no end. loop indefinitely until player does something.			
	
	end
	
	if (dip_CoinsPerCredit == DOPT_FREEPLAY) or (bShowCredits == true and iCredits > 0) then
	
		if (p1START1 and dip_Movie == false) then
		
			p1START1 = false
			bShowCredits = false				
			startGame()	

		elseif (p1START1 and dip_Movie == true) then

			p1START1 = false
			lvlState = lvlSetup 
			bShowCredits = false				
			currentLevel = levelMovie
			
		end
				
	end

end

function doLevel()
	
	local thisLevel = iCurPos

	if (lvlState == lvlSetup) then		
		
		if dip_Debug then debugPrint("Entering doLevel(). Playing stage " .. thisLevel) end	
		
		bPlayPrompt = true				
		bShowLives = false
		bShowLvl = false
		bShowScene = false
		bShowScore = false
		bShowAction = false
		bAct = false
		resetArrows()

		if bSave == false then currentMove = 1 end				
		
		setupLevel(thisLevel)
		
			
		if not stage[thisLevel][LEVELSTARTED] then
			
				stage[thisLevel][LEVELSTARTED] = true

			if bSave == true and currentMove ~= 1 then 

				currentFrame = move[currentMove-1][inputFrmEnd]+1
				discSkipToFrame(currentFrame)
				bSave = false
				lvlState = lvlRunning
							
			elseif bSkipIntroClip == false and (dip_StartLevel ~= thisLevel or dip_StartSegment == 1) then

				bShowLvl = true
				bShowSkip = true
				getIntroClip(thisLevel)
				lvlState = branch01	

			else
								
				discSkipToFrame(segmentStart)			
				lvlState = lvlRunning

			end
			
		else		
			
			if currentFrame +1 ~= segmentStart then

				discSkipToFrame(segmentStart)					
			
			end
			
			lvlState = lvlRunning
		
		end			
		
	elseif (lvlState == branch01) then
			
		if (currentFrame == iFrameEnd)  then		
			
			if currentFrame ~= iFrameEnd then

					discSkipToFrame(segmentStart)					
			
			end
						
			lvlState = lvlRunning
		
		end
	
	elseif (lvlState == branch02) then
			
		
	
	elseif (lvlState == branch03) then
			
		if currentFrame == move[currentMove][moveFrmStart] then lvlState = lvlRunning end
	
	elseif (lvlState == branch04) then
			
		if currentFrame >= segmentEnd then lvlState = lvlEnd end
		
	elseif (lvlState == branch05) then	
			
		if currentFrame == iFrameEnd then
		
			local j = 0
			for j=1,stage[thisLevel][SEGMENTCOUNT] do	
	
				segment[thisLevel][j][SEGMENTCOMPLETE] = true
			
			end		
			lvlState = lvlEnd
			
		end			
		
	elseif (lvlState == branch06) then
		
		if timerDue() then

			bGOAlt = true
		
			if newScore(iScore) then -- Has player achieved a high score?			
			
				lvlState = lvlSetup  
				currentLevel = levelHighScore	
			
			else			
			
				lvlState = lvlSetup
				currentLevel = levelGameOver		
			
			end
			
		end
		
	elseif (lvlState == branch07) then
				
		if currentFrame == iFrameEnd then lvlState = lvlEnd end
		
	elseif (lvlState == branch08) then
		
		if timerDue() then 
				
			bExtendedPlay = true
			iSegPointer = 0
			startGame()
			
		end

	elseif (lvlState == branch09) then
		
		resetArrows()
		bShowLives = false
		bShowScore = false
		discSkipToFrame(iPauseFrame)
		currentMove = currentMove + 1
		lvlState = lvlRunning
											
	elseif (lvlState == lvlPlayRest) then
		
		thisMove = scanInput()
		if (thisMove ~= NOMOVE) then soundPlay(sndwrong) end
		
		if (currentFrame == move[currentMove][moveFrmEnd]) then
		
			currentMove = currentMove + 1
			if dip_Debug then debugPrint("Current Move is now: " .. currentMove) end
			
			if (currentMove <= totalMoves) then			
				
				-- If next move's start frame is right next to
				-- current move's end frame
				-- then don't skip to frame, let it flow...
				
				if ((currentFrame + 1) ~= move[currentMove][moveFrmStart]) then					
					
					discSkipToFrame(move[currentMove][moveFrmStart])					
				end
				
				bShowAction = false
				bPlayPrompt = true
				bAct = false
				resetArrows()	
				lvlState = lvlRunning				
				
			else
				
				-- segment beat! do some logic. move on to next segment.
				segment[thisLevel][iSegPointer][SEGMENTCOMPLETE] = true	
				
				if (thisLevel == finalstage and stageBeat(finalstage)) or thisLevel == 18 then
					
						
					if dip_StartLevel == 1 and dip_StartSegment ==1 then

						addPoints(SCORESCENE - (stage[thisLevel][DEATHCOUNT] * DEATHPENALTY))
						addPoints(SCOREGAME)
						if stage[thisLevel][DEATHCOUNT] == 0 and dip_StartSegment ==1 then 
					
							addPoints(SCORESECRET)

						end
						
					else

						addPoints(SCORESCENE - (stage[thisLevel][DEATHCOUNT] * DEATHPENALTY))
						addPoints(SCORELEVEL)

						if stage[thisLevel][DEATHCOUNT] == 0 and dip_StartSegment ==1 then 
					
							addPoints(SCORESECRET)

						end

					end
					
					if thisLevel == 18 then

						discPause()
						timerON(0.1)
						lvlState = branch06	

					else
						
						soundPlay(sndvictory)
						discSkipToFrame(frameVictory)
						discPause()
						timerON(3)
						lvlState = branch06	
					
					end

				else

					if stage[thisLevel][DEATHCOUNT] < 5 then 
					
						addPoints(SCORESCENE - (stage[thisLevel][DEATHCOUNT] * DEATHPENALTY))

					end
				

					lvlState = branch04					
					
				end
					
			end
			
		end
	
	elseif (lvlState == lvlRunning) then

		if dip_Difficulty == 0 and (move[currentMove][correctMove] >= 6 and move[currentMove][correctMove] <= 12) then 

			if move[currentMove][correctMove] == 8 then move[currentMove][inputFrmStart] = move[currentMove][inputFrmStart]+10 end
			move[currentMove][correctMove] = 5

		elseif dip_Kidmode then

			if move[currentMove][correctMove] == 8 then move[currentMove][inputFrmStart] = move[currentMove][inputFrmStart]+10 end
			move[currentMove][correctMove] = 5

		end
			
		if (currentFrame > move[currentMove][inputFrmEnd]) then
			
			iPauseFrame = move[currentMove][inputFrmEnd] --currentFrame			
			bShowAction = false
			setupDeathClip(thisMove)
							
		elseif (currentFrame >= move[currentMove][inputFrmStart] and currentFrame <= move[currentMove][inputFrmEnd]) then
			
			thisMove = scanInput()
			bShowLives = false
			bShowScene = false
			bShowLvl = false
					
			if (bShowAction == false) then 
				bShowAction = true
			end

			if (thisMove ~= NOMOVE) then

				if (thisMove == move[currentMove][correctMove]) then									
			
					bShowAction = false
					
					if (move[currentMove][correctMove] ~= SKIP) then 

						soundPlay(sndright)
						addPoints(SCOREMOVE + dip_Difficulty * BUFFMOVE) 

					end				
					
					lvlState = lvlPlayRest
									
				elseif (thisMove ~= MOVEPENDING) then		
				
					iPauseFrame = move[currentMove][inputFrmEnd] --currentFrame			
					bShowAction = false		
					setupDeathClip(thisMove)	
		
				end
				
			end	
		
		else scanInput() -- Prevents joystick from getting 'stuck' in one position.
		
		end
		
	elseif (lvlState == lvlPlayDeath) then
					
		if (currentFrame == iFrameEnd) then
					
			if bDeath == true then iLives = iLives - 1 end
												
			stage[thisLevel][DEATHCOUNT] = stage[thisLevel][DEATHCOUNT] + 1
		
			if iLives > 0 then
				
				if bDeath == true then 
					
					bShowLives = true
					bShowScore = true
					setupClip(offsetLevel02,offsetLevel02Clipend) 

				end
				
				if (dip_Rewind==0 and bDeath == true) or (dip_Rom == 1 and bDeath == true) then

					lvlState = lvlEnd

				elseif dip_Rewind == 2 and bDeath == true and currentMove == totalMoves then

					segment[iCurPos][iSegPointer][SEGMENTCOMPLETE] = true
					lvlState = lvlEnd

				else
					
					lvlState = branch09
				
				end	

			else
				
				lvlState = lvlEnd
			
			end
					
		end
		
	elseif (lvlState == lvlEnd) then
			
		lvlState = lvlSetup
		
		if (iLives == 0) then -- game over			
			
			if dip_AllowContinue  then
				
				iTempLevel = currentLevel	

				currentLevel = levelContinue			
				iContinues = iContinues + 1
				
			else
				
				if newScore(iScore) then -- Has player achieved a high score?							
					
					currentLevel = levelHighScore	
				
				else							
					
					currentLevel = levelGameOver		
				
				end				
				
			end			
			
		else		
			
			lvlState = lvlSetup
			
			if stageBeat(thisLevel) then
				


				if thisLevel == level01 and bRetry == true and (bObj1 == false or bObj02 == false or bObj03 == false) then
						

						
				else

					stage[thisLevel][BEATSTATUS] = true
					levelMap[thisLevel] = true
					bAllowSave = true
					iSegPointer = 0
					addPoints(SCORELEVEL)
					iLiveSave = iLives
					iScoreSave = iScore
				
				end	


				if stage[thisLevel][DEATHCOUNT] == 0 and dip_StartSegment ==1 then 
					
					addPoints(SCORESECRET)

				end

				bSkipIntroClip = true
				discPause()
				lvlState = lvlSetup
				currentLevel = levelFinish
								
			else
				
				if not segment[thisLevel][iSegPointer][SEGMENTCOMPLETE] then				
															
					if iSegPointer > 0 then iSegPointer = iSegPointer - 1 end

				else

					iLiveSave = iLives
					iScoreSave = iScore
					bAllowSave = true
															
				end		

				if dip_Rom == 1 and bDeath == true and iCurPos ~= level01 then 

					iSegPointer = 0 
					segment[iCurPos][1][SEGMENTCOMPLETE] = false
					segment[iCurPos][2][SEGMENTCOMPLETE] = false
					segment[iCurPos][3][SEGMENTCOMPLETE] = false

					if iCurPos == level08 or iCurPos == level09 then segment[iCurPos][4][SEGMENTCOMPLETE] = false end

				end

				if iSegPointer == 0 then

					local k = 0
					singeRandomize()

					if iCurPos == level02 or iCurPos == level03 then

						k = math.random(2)

						if k == 1 then

							iCurPos = level02
		
						else
			
							iCurPos = level03

						end

					elseif iCurPos == level04 or iCurPos == level05 then

						k = math.random(2)

						if k == 1 then

							iCurPos = level04
		
						else
			
							iCurPos = level05

						end

					elseif iCurPos == level06 or iCurPos == level07 then

						k = math.random(2)

						if k == 1 then

							iCurPos = level06
		
						else
			
							iCurPos = level07

						end

					elseif iCurPos == level08 or iCurPos == level09 then

						k = math.random(2)

						if k == 1 then

							iCurPos = level08
		
						else
			
							iCurPos = level09

						end

					elseif iCurPos == level10 or iCurPos == level11 then

						k = math.random(2)

						if k == 1 then

							iCurPos = level10
		
						else
			
							iCurPos = level11

						end

					end

				end	
			
			end
			
			bShowLives = false
			bShowScore = false
			bShowLives = false
			bShowLvl = false
			bShowScene = false
			bShowAction = false
			
		end
	
		if dip_Debug then debugPrint("Leaving doLevel()") end
	
	end
	
end

function resetArrows()     -- Reset arrows position in  between moves

	posxUDARROWS = (OVLW/2)-(ARUW/2)
	posyLRARROWS = (OVLH/2)-(ARLH/2)
	posyUARROW = startyUARROW
	posyDARROW = startyDARROW
	posxLARROW = startxLARROW
	posxRARROW = startxRARROW
	
end

function drawAction()     -- Draw all type of actions
	
	
	if currentMove <= totalMoves then

		local thisMove = move[currentMove][correctMove]
		
		if dip_ShowAction == false then
		
			spriteDraw(posxBUTTONS,posyBUTTONS,sprArrow[NOMOVES])
		
		elseif thisMove == UP then
			
			goTimer(1)
	
			if heartbeat then

				if posyUARROW > endyUARROW then posyUARROW = posyUARROW-LINEH end
				spriteDraw(posxUDARROWS,posyUARROW,sprArrow[UP])
				

			end
			
		elseif thisMove == DOWN then

			goTimer(1)
	
			if heartbeat then	

				if posyDARROW < endyDARROW then posyDARROW = posyDARROW+LINEH end
				spriteDraw(posxUDARROWS,posyDARROW,sprArrow[DOWN])
						
			end
		
		elseif thisMove == LEFT then

			goTimer(1)
	
			if heartbeat then	
				
				if posxLARROW > endxLARROW then posxLARROW = posxLARROW-LINEW end
				spriteDraw(posxLARROW,posyLRARROWS,sprArrow[LEFT])
						
			end
				
		elseif thisMove == RIGHT then

			goTimer(1)
	
			if heartbeat then	

				if posxRARROW < endxRARROW then posxRARROW = posxRARROW+LINEW end
				spriteDraw(posxRARROW,posyLRARROWS,sprArrow[RIGHT])
						
			end
				
		elseif thisMove == BUTTON1 then
		
			spriteDraw(posxBUTTONS,posyBUTTONS,sprArrow[BUTTON1])
		
		elseif thisMove == SKIP then

			blinkTimer(0.4)
			if heartbeat then spriteDraw((OVLW/2)-SKIPW/2,OVLH-LINEH-TEXTH,sprite[SKIPINTRO])  end
	
		end
		
	end

end

function drawCredits()     -- Draw the credits

	blinkTimer(0.3)
	
	if heartbeat then	
		
		if (dip_CoinsPerCredit == DOPT_FREEPLAY) then					
			
			spriteDraw((OVLW/2)-SKIPW/2,ycoinpos,sprite[FREEPLAY])
		
		else
		
			if (iCredits > 0) then			
				
				spriteDraw((OVLW/2)-SKIPW/2,ycoinpos,sprite[CREDIT])
				drawSpriteNumber((OVLW/2)-SKIPW/2+CRDW+NUMW,ycoinpos,iCredits)
				
			else		
				
				spriteDraw((OVLW/2)-SKIPW/2,ycoinpos,sprite[INSERTCOIN])
				
			end
			
		end

	end

end

function drawDisk1()      -- Draw disk slot 1

	if altState == branch01 then

	timerON(1)
	altState = branch02

	elseif altState == branch02 then

		if timerDue() then

			bShowDisk1 = false 

		else

			spriteDraw((OVLW)-DISKW-LINEW, LINEH, sprite[D1])

		end

	end

end

function drawDisk2()      -- Draw disk slot 2

	if altState == branch01 then

	timerON(1)
	altState = branch02

	elseif altState == branch02 then

		if timerDue() then

			bShowDisk2 = false 

		else

			spriteDraw((OVLW)-DISKW-LINEW, LINEH, sprite[D2])

		end

	end

end

function drawDisk3()      -- Draw disk slot 3

	if altState == branch01 then

	timerON(1)
	altState = branch02

	elseif altState == branch02 then

		if timerDue() then

			bShowDisk3 = false 

		else

			spriteDraw((OVLW)-DISKW-LINEW, LINEH, sprite[D3])

		end

	end

end

function drawDiskA()      -- Draw disk autosave

	if altState == branch01 then

	timerON(1)
	altState = branch02

	elseif altState == branch02 then

		if timerDue() then

			bShowDiskA = false 

		else

			spriteDraw((OVLW)-DISKW-LINEW, ydskpos, sprite[DA])

		end

	end

end

function drawLCD()
	

end

function drawLives()

	if (iLives > 0) then

		if iLives==1 then

			spriteDraw(OVLW-LINEW-LIVW,ylivpos,sprite[LIVES])

		elseif iLives==2 then

			spriteDraw(OVLW-LINEW-(LIVW*2),ylivpos,sprite[LIVES])
			spriteDraw(OVLW-LINEW-LIVW,ylivpos,sprite[LIVES])

		elseif iLives==3 then

			spriteDraw(OVLW-LINEW-(LIVW*3),ylivpos,sprite[LIVES])
			spriteDraw(OVLW-LINEW-(LIVW*2),ylivpos,sprite[LIVES])
			spriteDraw(OVLW-LINEW-LIVW,ylivpos,sprite[LIVES])

		elseif iLives==4 then
			
			spriteDraw(OVLW-LINEW-(LIVW*4),ylivpos,sprite[LIVES])
			spriteDraw(OVLW-LINEW-(LIVW*3),ylivpos,sprite[LIVES])
			spriteDraw(OVLW-LINEW-(LIVW*2),ylivpos,sprite[LIVES])
			spriteDraw(OVLW-LINEW-LIVW,ylivpos,sprite[LIVES])

		elseif iLives==5 then	

			spriteDraw(OVLW-LINEW-(LIVW*5),ylivpos,sprite[LIVES])
			spriteDraw(OVLW-LINEW-(LIVW*4),ylivpos,sprite[LIVES])
			spriteDraw(OVLW-LINEW-(LIVW*3),ylivpos,sprite[LIVES])
			spriteDraw(OVLW-LINEW-(LIVW*2),ylivpos,sprite[LIVES])
			spriteDraw(OVLW-LINEW-LIVW,ylivpos,sprite[LIVES])
		
		end
		
	end

end

function drawLvl()

	if ShowLevel then

		if iCurPos == 18 then

			spriteDraw(LINEW,ylvlpos,sprite[SECRET])

		else	
			
			spriteDraw(LINEW,ylvlpos,sprite[LEVEL])
			drawSpriteNumber(LINEW+LVLW+NUMW,ylvlpos,( iCurPos ))
			
		end

	end
		
end

function drawScene()
	
	if ShowLevel then
	
		spriteDraw(LINEW,ylvlpos,sprite[SCENE])
		drawSpriteNumber(LINEW+SCNW+NUMW,ylvlpos,( iSegPointer ))

	end
		
end

function drawScore()

	drawSpriteNumber(LINEW,yscopos,iScore)	

	if ShowTop then

		spriteDraw((OVLW/2)-SKIPW/2,LINEH,sprite[TOP])
		drawSpriteNumber((OVLW/2)-NUMW*3, TEXTH*2, iTop)

	end
		
end

function drawSkip()


	blinkTimer(0.4)
	
	if heartbeat then	
	
		spriteDraw((OVLW/2)-SKIPW/2,OVLH-TEXTH-LINEH,sprite[SKIPINTRO])
						
	end

end

function drawSpriteNumber(thisx, thisy, thisAmt)

	local j = 0
	local k = 0
	local s1 = ""
	
	s1 = tostring(thisAmt)
	
	for k=1,(string.len(s1)) do
		
		j = tonumber(string.sub(s1,k,k)) + 1	
		spriteDraw((thisx + ((k-1) * NUMW)), thisy, sprNUM[j])
	
	end

end

function drawSum()

		
end

function initJob()

	debugPrint("Playing Dragon's Lair II: Timewarp")

	overlaySetResolution(vldpGetWidth(), vldpGetHeight())

	readConfig()
	if dip_Debug then debugPrint ("Entering initJob()") end

	resetChannels()
	gameflow = flow_GameRunning
	currentLevel = levelIntro
	lvlState = lvlSetup
	iCoins = 0
	iScore = 0
	iScoreTemp = 0
	iSegPointer = 0
	bShowCredits = true
	bShowScore = false
	bShowLives = false
	bShowAction = false
	bAct = false
	bShowLvl = false
	bShowScene = false
	bShowSkip = false
	bShowDisk1 = false
	bShowDisk2 = false
	bShowDisk3 = false
	bShowDiskA = false
	mycolor1 = YELLOW
	mycolor2 = WHITE	
	mycolor3 = RED							
	mycolor4 = BLACK						
	
	posyUPTEXT = 8									
	posyDOWNTEXT = 225
											
	--[[
	OVLW = vldpGetWidth()
	OVLH = vldpGetHeight()
	]]--
	
	OVLW = 320
	OVLH = 240

	LINEH = OVLH/80
	LINEW = OVLW/80

	fontGame = fontLoad("singe/dl2e/font.otf", LINEW*2)
	fontLCD = fontLoad("singe/dl2e/font.otf", LINEW*2.5)

	fontSelect(fontGame)  
	setFontColor(RED)
	
	sprNUM = nil; sprNUM = {}
	sprNUM[1]  = spriteLoad("singe/dl2e/num00.png")
	sprNUM[2]  = spriteLoad("singe/dl2e/num01.png")
	sprNUM[3]  = spriteLoad("singe/dl2e/num02.png")
	sprNUM[4]  = spriteLoad("singe/dl2e/num03.png")
	sprNUM[5]  = spriteLoad("singe/dl2e/num04.png")
	sprNUM[6]  = spriteLoad("singe/dl2e/num05.png")
	sprNUM[7]  = spriteLoad("singe/dl2e/num06.png")
	sprNUM[8]  = spriteLoad("singe/dl2e/num07.png")
	sprNUM[9]  = spriteLoad("singe/dl2e/num08.png")
	sprNUM[10] = spriteLoad("singe/dl2e/num09.png")
	
	filler = nil; filler = {false,false,false,false}			
	sprite = nil; sprite = {}									
	sprite[INSERTCOIN] = spriteLoad("singe/dl2e/insertcoin.png")			
	sprite[FREEPLAY] = spriteLoad("singe/dl2e/freeplay.png")
	sprite[CREDIT] = spriteLoad("singe/dl2e/credit.png")
	sprite[LIVES] = spriteLoad("singe/dl2e/live.png")
	sprite[D1] = spriteLoad("singe/dl2e/disk1.png")
	sprite[D2] = spriteLoad("singe/dl2e/disk2.png")
	sprite[D3] = spriteLoad("singe/dl2e/disk3.png")
	sprite[DA] = spriteLoad("singe/dl2e/diskA.png")	


	sprArrow = nil; sprArrow = {}											
	sprArrow[UP] 		= spriteLoad("singe/dl2e/arrowup.png")
	sprArrow[DOWN] 		= spriteLoad("singe/dl2e/arrowdown.png")
	sprArrow[LEFT]	 	= spriteLoad("singe/dl2e/arrowleft.png")
	sprArrow[RIGHT] 	= spriteLoad("singe/dl2e/arrowright.png")										
	sprArrow[BUTTON1] 	= spriteLoad("singe/dl2e/action.png")							
	sprArrow[NOMOVES] 	= spriteLoad("singe/dl2e/nomoves.png")

	LIVW = spriteGetWidth(sprite[LIVES])
	LIVH = spriteGetHeight(sprite[LIVES])
	NUMW = spriteGetWidth(sprNUM[1])
	TEXTH = spriteGetHeight(sprite[FREEPLAY])
	BUTW = spriteGetWidth(sprArrow[BUTTON1])
	BUTH = spriteGetHeight(sprArrow[BUTTON1])
	SKIPW = spriteGetWidth(sprite[FREEPLAY])
	CRDW = spriteGetWidth(sprite[CREDIT])
	ARUW = spriteGetWidth(sprArrow[UP])
	ARUH = spriteGetHeight(sprArrow[UP])
	ARLW = spriteGetWidth(sprArrow[LEFT])
	ARLH = spriteGetHeight(sprArrow[LEFT])
	DISKW = spriteGetWidth(sprite[D1])
	DISKH = spriteGetHeight(sprite[D1])	

	posxBUTTONS = (OVLW/2)-(BUTW/2)								-- Coordinates for the buttons
	posyBUTTONS = (OVLH/2)-(BUTH/2)

	posxUDARROWS = (OVLW/2)-(ARUW/2)
	posyLRARROWS = (OVLH/2)-(ARLH/2)
	startyUARROW = LINEH*32
	startyDARROW = OVLH-ARUH-(LINEH*32)
	endyUARROW = LINEH*12
	endyDARROW = OVLH-ARUH-(LINEH*12)

	startxLARROW = LINEW*36
	startxRARROW = OVLW-ARLW-(LINEW*36)
	endxLARROW = LINEW*16
	endxRARROW = OVLW-ARLW-(LINEW*16)
	
	posyLCD = LINEH	

	ycoinpos = OVLH-TEXTH-LINEH
	ylivpos = OVLH-LIVH-LINEH
	ydskpos = LINEH
	yscopos = LINEH
	ylvlpos = OVLH-LIVH-LINEH

	initLCD()
	
	if dip_Debug then debugPrint ("Leaving initJob()") end
	
end

function initLCD()

	sLCD = nil; sLCD = {}
	setFontColor(RED)
				  
	local k = 0
	for k=1,10 do
	
		sLCD[k] = string.format("%d.%s      %d", k, highscore[k][1], highscore[k][2])
		
	end
		
	iLCDline = 1; iLCDpointer = 1; iLCDx = 0; iLCDwait = 0.075
	altState = lvlSetup 

end

function EndOfStageReached(thisLevel)

	return (iSegPointer == stage[thisLevel][SEGMENTCOUNT])

end

function initVLDP()	
 
	-- VLDP has to run before any sprite drawing takes place.
	
	if (lvlState == lvlSetup) then
	
		if dip_Debug then debugPrint("Entering initVLDP()") end
	
		discSetFPS(MovieFPS)				
		setupClip(offsetTitle, offsetTitleend)
		bPause = true
		lvlState = lvlRunning
	
	elseif (lvlState == lvlRunning) then
	
		if (currentFrame == iFrameEnd) then
		
			discPause()
			lvlState = lvlEnd
		
		end
	
	elseif (lvlState == lvlEnd) then
		bPause = false
		gameflow = flow_GameInit
		lvlState = lvlSetup
		
		if dip_Debug then debugPrint("Leaving initVLDP()") end
	
	end

end

function onInputPressed(intWhat)
	
	if not bPause then
	
		if (intWhat == SWITCH_BUTTON1) then

			p1BUTTON1 = true
									
		elseif (intWhat == SWITCH_BUTTON2) then

			p1BUTTON2 = true

		elseif (intWhat == SWITCH_BUTTON3) then

			p1BUTTON3 = true
		
		elseif (intWhat == SWITCH_UP) then
			
			p1UP = true
			
		elseif (intWhat == SWITCH_DOWN) then
			
			p1DOWN = true
			
		elseif (intWhat == SWITCH_LEFT) then
			
			p1LEFT = true
			
		elseif (intWhat == SWITCH_RIGHT) then
			
			p1RIGHT = true	

		elseif (intWhat == SWITCH_SERVICE) then
			
			p1SERVICE = true
			
		elseif (intWhat == SWITCH_COIN1) then
			
			p1COIN1 = true
			
		elseif (intWhat == SWITCH_COIN2) then
			
			p1COIN2 = true	
			
		elseif (intWhat == SWITCH_START1) then
			
			p1START1 = true			
			
		elseif (intWhat == SWITCH_START2) then
			
			p1START2 = true
			
		end
		
	end

end

function onInputReleased(intWhat)

	if (intWhat == SWITCH_PAUSE) then bPause = not bPause end
	
	if (gameflow == flow_GameRunning and not bPause) then	
	
		if (intWhat == SWITCH_COIN1 or intWhat == SWITCH_COIN2) then 
			
			if (currentLevel ~= levelService and currentLevel ~= levelNormal) then
			
				p1COIN1 = false
				p1COIN2 = false
		
				if not (dip_CoinsPerCredit == DOPT_FREEPLAY) then
					
					if (iCredits < 9) then
					
						iCoins = iCoins + 1			
						
						if (iCoins >= dip_CoinsPerCredit) then
						
							iCoins = iCoins - dip_CoinsPerCredit
							iCredits = iCredits + 1
							soundPlay(sndcredit)
							
						else
						
							soundPlay(sndcoin)					
						
						end
						if currentLevel == levelContinue then bResetContinue = true end
					
					end
					
				end
				
			end
			
		elseif (intWhat == SWITCH_UP) then
		
			p1UP = false
		
		elseif (intWhat == SWITCH_DOWN) then
		
			p1DOWN = false
		
		elseif (intWhat == SWITCH_LEFT) then
		
			p1LEFT = false
		
		elseif (intWhat == SWITCH_RIGHT) then
		
			p1RIGHT = false
			
		elseif (intWhat == SWITCH_BUTTON1) then
		
			p1BUTTON1 = false
						
		elseif (intWhat == SWITCH_BUTTON2) then

			p1BUTTON2 = false

		elseif (intWhat == SWITCH_BUTTON3) then

			p1BUTTON3 = false
			
		elseif (intWhat == SWITCH_SERVICE and gameflow == flow_GameRunning) then
		
			p1SERVICE = false
			lvlState = lvlSetup
			currentLevel = levelService

		elseif (intWhat == SWITCH_TEST) then

			p1TEST = false
			
			if currentLevel == levelIntro or (currentMove < totalMoves and move[currentMove+1][correctMove]~=27) then

				lvlState = lvlSetup
				currentLevel = levelSave
			
			end

		elseif (intWhat == SWITCH_START1) then
			
			p1START1 = false
			
		elseif (intWhat == SWITCH_START2) then
			
			p1START2 = false

		elseif (intWhat == SWITCH_SKILL1) then
			
			p1SKILL1 = false

			if currentLevel == levelNormal and (currentMove < totalMoves and move[currentMove+1][correctMove]~=27) and p1START1 == true then

				loadSave(1)
				p1START1 = false
				bShowDisk1 = true
				altState = branch01

			elseif currentLevel == levelNormal and (currentMove < totalMoves and move[currentMove+1][correctMove]~=27) then

				autoSave(1)
				bShowDisk1 = true
				altState = branch01
			
			end	

			

		elseif (intWhat == SWITCH_SKILL2) then
			
			p1SKILL2 = false

			if currentLevel == levelNormal and (currentMove < totalMoves and move[currentMove+1][correctMove]~=27) and p1START1 == true then

				loadSave(2)
				p1START1 = false
				bShowDisk2 = true
				altState = branch01
				
			elseif currentLevel == levelNormal and (currentMove < totalMoves and move[currentMove+1][correctMove]~=27) then

				autoSave(2)
				bShowDisk2 = true
				altState = branch01
				
			end	

			

		elseif (intWhat == SWITCH_SKILL3) then
			
			p1SKILL3 = false

			if currentLevel == levelNormal and (currentMove < totalMoves and move[currentMove+1][correctMove]~=27) and p1START1 == true then

				loadSave(3)
				p1START1 = false
				bShowDisk3 = true
				altState = branch01

			elseif currentLevel == levelNormal and (currentMove < totalMoves and move[currentMove+1][correctMove]~=27) then

				autoSave(3)
				bShowDisk3 = true
				altState = branch01
			
			end	
			
		end	
	
	end		
	
end

function onMouseMoved(intX, intY, intXrel, intYrel)

	-- leave empty

end

function onOverlayUpdate()

	overlayClear()
	
	currentFrame = discGetFrame()
	
	if (gameflow == flow_VLDPStart) then
	
		initVLDP()
	
	elseif (gameflow == flow_GameInit) then
	
		initJob()				
		
	elseif (gameflow == flow_GameRunning) then	
		
		if (currentLevel == levelIntro) then
		
			doIntro()		
			
		elseif (currentLevel == levelNormal) then
		
			doLevel()			
			
		elseif (currentLevel == levelMenuScreen) then
		
			doLevelSelect()	
			
		elseif (currentLevel == levelContinue) then
		
			doContinue()
			
		elseif (currentLevel == levelGameOver) then
		
			doGameOver()
			
		elseif (currentLevel == levelHighScore) then
		
			doHighScore()

		elseif (currentLevel == levelService) then
		
			doServiceMenu()

		elseif (currentLevel == levelMovie) then
		
			startMovie()

		elseif (currentLevel == levelRetry) then
		
			doRetry()

		elseif (currentLevel == levelFinish) then
		
			doFinish()

		elseif (currentLevel == levelSave) then
		
			doSave()
			
		end
	
		if bShowAction    then drawAction()     end
		if bShowScore 	  then drawScore() 		end
		if bShowLvl		  then drawLvl()  	    end
		if bShowScene	  then drawScene() 	    end
		if bShowLives 	  then drawLives() 		end
		if bShowCredits   then drawCredits() 	end	
		if bShowLCD       then drawLCD() 	    end	
		if bShowSkip      then drawSkip() 	    end	
		if bShowDisk1     then drawDisk1() 	    end	
		if bShowDisk2     then drawDisk2() 	    end	
		if bShowDisk3     then drawDisk3() 	    end	
		if bShowDiskA     then drawDiskA() 	    end	
	
	end
	
	return(OVERLAY_UPDATED)
	
end

function onShutdown()
	
	discStop()	
	if (dip_Debug == true) then debugPrint ("Leaving game!") end
	
end

function stageBeat(thisLevel)

	local k = 0
	local b1 = true

	k = stage[thisLevel][SEGMENTCOUNT]
	
	if dip_Debug then debugPrint("Entering stageBeat()") end
	
	b1 = b1 and segment[thisLevel][k][SEGMENTCOMPLETE]
	
	if dip_Debug then debugPrint("Leaving stageBeat()") end
	
	return b1

end

function scanInput()

	local iResult = NOMOVE

	if     p1UP      then iResult = UP
	elseif p1DOWN    then iResult = DOWN
	elseif p1LEFT    then iResult = LEFT
	elseif p1RIGHT   then iResult = RIGHT
	elseif p1BUTTON1 then iResult = BUTTON1 
	elseif p1BUTTON2 then iResult = BUTTON2
	elseif p1BUTTON3 then iResult = BUTTON3 end
	
	p1UP      = false		
	p1DOWN    = false		
	p1LEFT    = false
	p1RIGHT   = false
	p1BUTTON1 = false
	p1BUTTON2 = false
	p1BUTTON3 = false
	
	return iResult
	
end

-------------------------------------------------------------------------------------------------------
-- If you need more than 10 levels, you will need to edit (add lines) the functions below this point --
-------------------------------------------------------------------------------------------------------

function createLevel01(thisStage) -- Nekron Attacks
	
	stage[level01] = {}; stage[level01] = {false, false, TotalScenesLevel01, 0}
	segment[level01][1] = {}; segment[level01][1] = {SEGMENT01, false, "Tough Wake Up"}
	segment[level01][2] = {}; segment[level01][2] = {SEGMENT02, false, "The Tree part 1"}
	segment[level01][3] = {}; segment[level01][3] = {SEGMENT03, false, "The Tree part 2"}
			
end

function createLevel02(thisStage) -- In the Wild
	
	stage[level02] = {}; stage[level02] = {false, false, TotalScenesLevel02, 0}
	segment[level02][1] = {}; segment[level02][1] = {SEGMENT01, false, "Diplomacy fails"}
	segment[level02][2] = {}; segment[level02][2] = {SEGMENT02, false, "Tygra escapes"}
	segment[level02][3] = {}; segment[level02][3] = {SEGMENT03, false, "In the Wild"}
	
end

function createLevel03(thisStage) -- Ancient City
	
	stage[level03] = {}; stage[level03] = {false, false, TotalScenesLevel03, 0}
	segment[level03][1] = {}; segment[level03][1] = {SEGMENT01, false, "Larn enters the City"}
	segment[level03][2] = {}; segment[level03][2] = {SEGMENT02, false, "Reunion"}
	segment[level03][3] = {}; segment[level03][3] = {SEGMENT03, false, "The Monster"}
		
end

function createLevel04(thisStage) -- In the Mist
	
	stage[level04] = {}; stage[level04] = {false, false, TotalScenesLevel04, 0}
	segment[level04][1] = {}; segment[level04][1] = {SEGMENT01, false, "In the Mist"}
	segment[level04][2] = {}; segment[level04][2] = {SEGMENT02, false, "Darkwolf Attacks"}
	segment[level04][3] = {}; segment[level04][3] = {SEGMENT03, false, "The Rocks"}
	
end

function createLevel05(thisStage) -- Ice Peak

	stage[level05] = {}; stage[level05] = {false, false, TotalScenesLevel05, 0}
	segment[level05][1] = {}; segment[level05][1] = {SEGMENT01, false, "Entering Ice Peak"}
	segment[level05][2] = {}; segment[level05][2] = {SEGMENT02, false, "Nekron's Magic"}
	segment[level05][3] = {}; segment[level05][3] = {SEGMENT03, false, "Swordfight"}
	
end

function createLevel06(thisStage) -- Final Battle

	stage[level06] = {}; stage[level06] = {false, false, TotalScenesLevel06, 0}
	segment[level06][1] = {}; segment[level06][1] = {SEGMENT01, false, "Fly to Icepeak"}
	segment[level06][2] = {}; segment[level06][2] = {SEGMENT02, false, "Rocks and Bows"}
	segment[level06][3] = {}; segment[level06][3] = {SEGMENT03, false, "Darwolf Strikes"}
	
end

function createLevel07(thisStage) -- Not Used. 

	stage[level07] = {}; stage[level07] = {false, false, TotalScenesLevel07, 0}
	segment[level07][1] = {}; segment[level07][1] = {SEGMENT01, false, "Segment Title"}
	segment[level07][2] = {}; segment[level07][2] = {SEGMENT02, false, ""}
	segment[level07][3] = {}; segment[level07][3] = {SEGMENT03, false, ""}
	
end

function createLevel08(thisStage) -- Not Used. 

	stage[level08] = {}; stage[level08] = {false, false, TotalScenesLevel08, 0}
	segment[level08][1] = {}; segment[level08][1] = {SEGMENT01, false, "Segment Title"}
	segment[level08][2] = {}; segment[level08][2] = {SEGMENT02, false, ""}
	segment[level08][3] = {}; segment[level08][3] = {SEGMENT03, false, ""}
	segment[level08][4] = {}; segment[level08][4] = {SEGMENT04, false, ""}
	
end

function createLevel09(thisStage) -- Not Used. 

	stage[level09] = {}; stage[level09] = {false, false, TotalScenesLevel09, 0}
	segment[level09][1] = {}; segment[level09][1] = {SEGMENT01, false, "Segment Title"}
	segment[level09][2] = {}; segment[level09][2] = {SEGMENT02, false, ""}
	segment[level09][3] = {}; segment[level09][3] = {SEGMENT03, false, ""}
	segment[level09][4] = {}; segment[level09][4] = {SEGMENT04, false, ""}
	
end

function createLevel10(thisStage) -- Not Used. 

	stage[level10] = {}; stage[level10] = {false, false, TotalScenesLevel10, 0}
	segment[level10][1] = {}; segment[level10][1] = {SEGMENT01, false, "Segment Title"}
	segment[level10][2] = {}; segment[level10][2] = {SEGMENT02, false, ""}
	segment[level10][3] = {}; segment[level10][3] = {SEGMENT03, false, ""}
	

end

function createLevel11(thisStage) -- Not Used. 

	stage[level11] = {}; stage[level11] = {false, false, TotalScenesLevel11, 0}
	segment[level11][1] = {}; segment[level11][1] = {SEGMENT01, false, "Segment Title"}
	segment[level11][2] = {}; segment[level11][2] = {SEGMENT02, false, ""}
	segment[level11][3] = {}; segment[level11][3] = {SEGMENT03, false, ""}
	
end

function createLevel12(thisStage) -- Not Used. 

	stage[level12] = {}; stage[level12] = {false, false, TotalScenesLevel12, 0}
	segment[level12][1] = {}; segment[level12][1] = {SEGMENT01, false, "Segment Title"}

end

function createLevel13(thisStage) -- Not Used. 

	stage[level13] = {}; stage[level13] = {false, false, TotalScenesLevel13, 0}
	segment[level13][1] = {}; segment[level13][1] = {SEGMENT01, false, "Segment Title"}
	segment[level13][2] = {}; segment[level13][2] = {SEGMENT02, false, ""}

end

function createLevel14(thisStage) -- Not Used. 

	stage[level14] = {}; stage[level14] = {false, false, TotalScenesLevel14, 0}
	segment[level14][1] = {}; segment[level14][1] = {SEGMENT01, false, "Segment Title"}
	segment[level14][2] = {}; segment[level14][2] = {SEGMENT02, false, ""}

end

function createLevelExt(thisStage)

	stage[levelExt] = {}; stage[levelExt] = {false, false, TotalScenesLevelExt, 0}
	segment[levelExt][1] = {}; segment[levelExt][1] = {SEGMENT01, false, "Segment Title"}

end

function getIntroClip(thisValue)

	local a = 0
	local b = 1
		
	if thisValue == level01 then
	
		a = offsetLevel01 
		b = offsetLevel01Clipend
		
	elseif thisValue == level02 then
	
		a = offsetLevel02 
		b = offsetLevel02Clipend
	
	elseif thisValue == level03 then
	
		a = offsetLevel03
		b = offsetLevel03Clipend
	
	elseif thisValue == level04 then
	
		a = offsetLevel04
		b = offsetLevel04Clipend
	
	elseif thisValue == level05 then
	
		a = offsetLevel05
		b = offsetLevel05Clipend

	elseif thisValue == level06 then
	
		a = offsetLevel06
		b = offsetLevel06Clipend

	elseif thisValue == level07 then
	
		a = offsetLevel07
		b = offsetLevel07Clipend

	elseif thisValue == level08 then
	
		a = offsetLevel08
		b = offsetLevel08Clipend

	elseif thisValue == level09 then
	
		a = offsetLevel09
		b = offsetLevel09Clipend

	elseif thisValue == level10 then
	
		a = offsetLevel10
		b = offsetLevel10Clipend

	elseif thisValue == levelExt then
	
		a = offsetLevelExt
		b = offsetLevelExtClipend
			
	end

	setupClip(a,b)

end


function initStages()

	local k = 0	

	stage = nil; stage = {}	
	segment = nil; segment = {}
	for k=level01,levelExt do
		
		segment[k] = {}
	
		if k == level01 then
		
			createLevel01(k)
			
		elseif k == level02 then
		
			createLevel02(k)
			
		elseif k == level03 then
		
			createLevel03(k)
			
		elseif k == level04 then
		
			createLevel04(k)
			
		elseif k == level05 then
		
			createLevel05(k)
			
		elseif k == level06 then
		
			createLevel06(k)

		elseif k == level07 then
		
			createLevel07(k)

		elseif k == level08 then
		
			createLevel08(k)

		elseif k == level09 then
		
			createLevel09(k)

		elseif k == level10 then
		
			createLevel10(k)

		elseif k == level11 then
		
			createLevel11(k)

		elseif k == level12 then
		
			createLevel12(k)

		elseif k == level13 then
		
			createLevel13(k)

		elseif k == level14 then
		
			createLevel14(k)

		elseif k == levelExt then
		
			createLevelExt(k)
			
		end
		


	end

end


function NextLevel(thisLevel)

	local k = 0
	singeRandomize()

	if thisLevel == level01 then

		if dip_Rom == 1 and bRetry == true then

			lvlState = lvlSetup
			currentLevel = levelRetry
			doRetry()

		else
				
			k = math.random(2)

			if k == 1 then

				iCurPos = level02
			
			else
				
				iCurPos = level03

			end

			iSegPointer = 0	
			lvlState = lvlSetup
			currentLevel = levelNormal
		
		end	

	elseif thisLevel == level02 or thisLevel == level03 then

		if dip_Rom == 1 and bRetry == true then

			lvlState = lvlSetup
			currentLevel = levelRetry
			doRetry()

		else
				
			k = math.random(2)

			if k == 1 then

				iCurPos = level04
			
			else
				
				iCurPos = level05

			end

			iSegPointer = 0	
			lvlState = lvlSetup
			currentLevel = levelNormal
		
		end	
	
	elseif thisLevel == level04 or thisLevel == level05 then

		if dip_Rom == 1 and bRetry == true then

			lvlState = lvlSetup
			currentLevel = levelRetry
			doRetry()

		else
				
			k = math.random(2)

			if k == 1 then

				iCurPos = level06
			
			else
				
				iCurPos = level07

			end

			iSegPointer = 0	
			lvlState = lvlSetup
			currentLevel = levelNormal
		
		end		
	
	elseif thisLevel == level06 or thisLevel == level07 then

		if dip_Rom == 1 and bRetry == true then

			lvlState = lvlSetup
			currentLevel = levelRetry
			doRetry()

		else
				
			k = math.random(2)

			if k == 1 then

				iCurPos = level08
			
			else
				
				iCurPos = level09

			end

			iSegPointer = 0	
			lvlState = lvlSetup
			currentLevel = levelNormal
		
		end		

	elseif thisLevel == level08 or thisLevel == level09 then

		if dip_Rom == 1 and bRetry == true then

			lvlState = lvlSetup
			currentLevel = levelRetry
			doRetry()

		else
				
			k = math.random(2)

			if k == 1 then

				iCurPos = level10
			
			else
				
				iCurPos = level11

			end

			iSegPointer = 0	
			lvlState = lvlSetup
			currentLevel = levelNormal
		
		end		

	elseif thisLevel == level10 or thisLevel == level11 then

		if dip_Rom == 0 then

			if bObj01 and bObj02 and bObj03 and bObj04 and bObj05 and bObj06 and bObj07 and bObj08 and bObj09 and bObj10 and bObj11  then

				iCurPos = level12
			
			else
				
				iCurPos = level13

			end

			iSegPointer = 0	
			lvlState = lvlSetup
			currentLevel = levelNormal	

		elseif dip_Rom == 1 then
			
			lvlState = lvlSetup
			currentLevel = levelRetry
			doRetry()
			
		end

	elseif thisLevel == level12 or thisLevel == level13 then

		iCurPos = level14
		iSegPointer = 0
		lvlState = lvlSetup
		currentLevel = levelNormal	

	end

end

function doRetry()
	
	if (lvlState == lvlSetup) then
		
		if dip_Debug then debugPrint("Entering doRetry()") end
		bShowLives = false
		bShowLvl = false
		bShowScene = false
		bShowScore = false
		bShowCredits = false
		bShowAction = false	
		
		if bRetry == true then

			if (iCurPos == level01) and (bObj01 == false or bObj02 == false or bObj03 == false) then

				discSkipToFrame(37772)
				discPause()
				timerON(3)

			elseif (iCurPos == level02 or iCurPos == level03) and (bObj04 == false) then

				discSkipToFrame(37772)
				discPause()
				timerON(3)

			elseif (iCurPos == level04 or iCurPos == level05) and (bObj05 == false) then

				discSkipToFrame(37772)
				discPause()
				timerON(3)

			elseif (iCurPos == level06 or iCurPos == level07) and (bObj06 == false or bObj07 == false) then

				discSkipToFrame(37772)
				discPause()
				timerON(3)

			elseif (iCurPos == level08 or iCurPos == level09) and (bObj08 == false or bObj09 == false) then

				discSkipToFrame(37772)
				discPause()
				timerON(3)

			elseif (iCurPos == level10 or iCurPos == level11) and (bObj10 == false or bObj11 == false) then

				discSkipToFrame(37772)
				discPause()
				timerON(3)

			else	

				timerON(0.1)

			end
			
		else

			discSkipToFrame(37777)
			discPause()
			timerON(5)

		end
				
		lvlState = lvlRunning
	
	elseif (lvlState == lvlRunning) then
	
		if timerDue() then

			singeRandomize()

			if bObj01 == false or bObj02 == false or bObj03 == false then

				bRetry = true
				iCurPos = level01
				segment[iCurPos][1][SEGMENTCOMPLETE] = false
				segment[iCurPos][2][SEGMENTCOMPLETE] = false
				segment[iCurPos][3][SEGMENTCOMPLETE] = false
																			
			elseif bObj04 == false then

				bRetry = true	
				k = math.random(2)

				if k == 1 then

					iCurPos = level02
					segment[iCurPos][1][SEGMENTCOMPLETE] = false
					segment[iCurPos][2][SEGMENTCOMPLETE] = false
					segment[iCurPos][3][SEGMENTCOMPLETE] = false
				
				else
					
					iCurPos = level03
					segment[iCurPos][1][SEGMENTCOMPLETE] = false
					segment[iCurPos][2][SEGMENTCOMPLETE] = false
					segment[iCurPos][3][SEGMENTCOMPLETE] = false

				end
				
			elseif bObj05 == false then

				bRetry = true
				k = math.random(2)

				if k == 1 then

					iCurPos = level04
					segment[iCurPos][1][SEGMENTCOMPLETE] = false
					segment[iCurPos][2][SEGMENTCOMPLETE] = false
					segment[iCurPos][3][SEGMENTCOMPLETE] = false
				
				else
					
					iCurPos = level05
					segment[iCurPos][1][SEGMENTCOMPLETE] = false
					segment[iCurPos][2][SEGMENTCOMPLETE] = false
					segment[iCurPos][3][SEGMENTCOMPLETE] = false

				end

			elseif bObj06 == false or bObj07 == false then

				bRetry = true
				k = math.random(2)

				if k == 1 then

					iCurPos = level06
					segment[iCurPos][1][SEGMENTCOMPLETE] = false
					segment[iCurPos][2][SEGMENTCOMPLETE] = false
					segment[iCurPos][3][SEGMENTCOMPLETE] = false
				
				else
					
					iCurPos = level07
					segment[iCurPos][1][SEGMENTCOMPLETE] = false
					segment[iCurPos][2][SEGMENTCOMPLETE] = false
					segment[iCurPos][3][SEGMENTCOMPLETE] = false

				end

			elseif bObj08 == false or bObj09 == false then

				bRetry = true	
				k = math.random(2)

				if k == 1 then

					iCurPos = level08
					segment[iCurPos][1][SEGMENTCOMPLETE] = false
					segment[iCurPos][2][SEGMENTCOMPLETE] = false
					segment[iCurPos][3][SEGMENTCOMPLETE] = false
					segment[iCurPos][4][SEGMENTCOMPLETE] = false
				
				else
					
					iCurPos = level09
					segment[iCurPos][1][SEGMENTCOMPLETE] = false
					segment[iCurPos][2][SEGMENTCOMPLETE] = false
					segment[iCurPos][3][SEGMENTCOMPLETE] = false
					segment[iCurPos][4][SEGMENTCOMPLETE] = false

				end

			elseif bObj10 == false or bObj11 == false then

				bRetry = true	
				k = math.random(2)

				if k == 1 then

					iCurPos = level10
					segment[iCurPos][1][SEGMENTCOMPLETE] = false
					segment[iCurPos][2][SEGMENTCOMPLETE] = false
					segment[iCurPos][3][SEGMENTCOMPLETE] = false
				
				else
					
					iCurPos = level11
					segment[iCurPos][1][SEGMENTCOMPLETE] = false
					segment[iCurPos][2][SEGMENTCOMPLETE] = false
					segment[iCurPos][3][SEGMENTCOMPLETE] = false

				end

			elseif bObj01 and bObj02 and bObj03 and bObj04 and bObj05 and bObj06 and bObj07 and bObj08 and bObj09 and bObj10 and bObj11  then
				
				bRetry = false				
				iCurPos = level13

			end

			iSegPointer = 0	
			lvlState = lvlEnd		

		end	
	
	elseif (lvlState == lvlEnd) then
		
		discPause()
		lvlState = lvlSetup
		currentLevel = levelNormal	
		if dip_Debug then debugPrint("Leaving doRetry()") end
	
	end
	
end



function setupDeathClip(playerMove)								
 
	local bPlayBuzzer = true
	bDeath = true

	lvlState = lvlPlayDeath	

	if iCurPos == level01 and iSegPointer == 2 and currentMove == 2 and playerMove == UP then

		move[currentMove][moveDeath] = 1

	elseif iCurPos == level01 and iSegPointer == 2 and currentMove == 3 and playerMove == RIGHT then
		
		move[currentMove][moveDeath] = 2

	elseif iCurPos == level01 and iSegPointer == 3 and currentMove == 8 and playerMove == RIGHT then
		
		move[currentMove][moveDeath] = 3

	elseif iCurPos == level02 and iSegPointer == 1 and currentMove == 5 and playerMove == LEFT then
		
		move[currentMove][moveDeath] = 22

	elseif iCurPos == level03 and iSegPointer == 1 and currentMove == 5 and playerMove == RIGHT then
		
		move[currentMove][moveDeath] = 33

	elseif iCurPos == level04 and iSegPointer == 2 and currentMove == 7 and playerMove == RIGHT then
		
		move[currentMove][moveDeath] = 44

	elseif iCurPos == level05 and iSegPointer == 2 and currentMove == 7 and playerMove == LEFT then
		
		move[currentMove][moveDeath] = 59

	elseif iCurPos == level06 and iSegPointer == 2 and currentMove == 1 and playerMove == LEFT then
		
		move[currentMove][moveDeath] = 74

	elseif iCurPos == level06 and iSegPointer == 2 and currentMove == 11 and playerMove == UP then
		
		move[currentMove][moveDeath] = 75

	elseif iCurPos == level07 and iSegPointer == 2 and currentMove == 1 and playerMove == RIGHT then
		
		move[currentMove][moveDeath] = 91

	elseif iCurPos == level07 and iSegPointer == 2 and currentMove == 11 and playerMove == UP then
		
		move[currentMove][moveDeath] = 92

	elseif iCurPos == level08 and iSegPointer == 2 and currentMove == 7 and playerMove == DOWN then
		
		move[currentMove][moveDeath] = 108

	elseif iCurPos == level08 and iSegPointer == 3 and currentMove == 12 and playerMove == LEFT then
		
		move[currentMove][moveDeath] = 109

	elseif iCurPos == level09 and iSegPointer == 2 and currentMove == 7 and playerMove == DOWN then
		
		move[currentMove][moveDeath] = 124

	elseif iCurPos == level09 and iSegPointer == 3 and currentMove == 12 and playerMove == RIGHT then
		
		move[currentMove][moveDeath] = 125

	elseif iCurPos == level10 and iSegPointer == 2 and currentMove == 1 and playerMove == UP then
		
		move[currentMove][moveDeath] = 140

	elseif iCurPos == level10 and iSegPointer == 2 and currentMove == 18 and playerMove == RIGHT then
		
		move[currentMove][moveDeath] = 141

	elseif iCurPos == level11 and iSegPointer == 2 and currentMove == 1 and playerMove == UP then
		
		move[currentMove][moveDeath] = 155

	elseif iCurPos == level11 and iSegPointer == 2 and currentMove == 18 and playerMove == LEFT then
		
		move[currentMove][moveDeath] = 156
		
	end
	
	if move[currentMove][moveDeath] == 1 then

		bDeath = false
		stage[iCurPos][DEATHCOUNT] = stage[iCurPos][DEATHCOUNT] - 1
		setupClip(offsetDeath01, offsetDeath01 + 40)
		move[currentMove][moveDeath] = 8
		
		if dip_Rom == 0 then

			iPauseFrame = 2323
			
		else

			currentMove = currentMove -1
			iPauseFrame = move[currentMove][inputFrmEnd]
						
		end
		
		if bObj01 == false then
			
			soundPlay(sndright)
			addPoints(SCOREITEM + BUFFITEM * iNbItems)
			iNbItems = iNbItems + 1
			SCOREMOVE = SCOREMOVE + BUFFITMOVE
			bObj01 = true

		end
				
	elseif move[currentMove][moveDeath] == 2 then

		bDeath = false
		stage[iCurPos][DEATHCOUNT] = stage[iCurPos][DEATHCOUNT] - 1
		setupClip(offsetDeath02, offsetDeath02 + 40)
		move[currentMove][moveDeath] = 9

		if dip_Rom == 0 then

			iPauseFrame = 2371

		else

			currentMove = currentMove -1
			iPauseFrame = move[currentMove][inputFrmEnd]
			
		end

		if bObj02 == false then

			soundPlay(sndright)
			addPoints(SCOREITEM + BUFFITEM * iNbItems)
			iNbItems = iNbItems + 1
			SCOREMOVE = SCOREMOVE + BUFFITMOVE
			bObj02 = true

		end

				
	elseif move[currentMove][moveDeath] == 3 then

		bDeath = false
		stage[iCurPos][DEATHCOUNT] = stage[iCurPos][DEATHCOUNT] - 1
		setupClip(offsetDeath03, offsetDeath03 + 40)
		move[currentMove][moveDeath] = 17
		
		if dip_Rom == 0 then

			iPauseFrame = 3163

		else

			currentMove = currentMove -1
			iPauseFrame = move[currentMove][inputFrmEnd]
			
		end

		if bObj03 == false then

			soundPlay(sndright)
			addPoints(SCOREITEM + BUFFITEM * iNbItems)
			iNbItems = iNbItems + 1
			SCOREMOVE = SCOREMOVE + BUFFITMOVE
			bObj03 = true

		end
		
	elseif move[currentMove][moveDeath] == 4 then

		setupClip(offsetDeath04, offsetDeath04 + 45)

	elseif move[currentMove][moveDeath] == 5 then

		setupClip(offsetDeath05, offsetDeath05 + 45)
		
	elseif move[currentMove][moveDeath] == 6 then

		setupClip(offsetDeath06, offsetDeath06 + 45)
		
	elseif move[currentMove][moveDeath] == 7 then

		setupClip(offsetDeath07, offsetDeath07 + 45)
		
	elseif move[currentMove][moveDeath] == 8 then

		setupClip(offsetDeath08, offsetDeath08 + 45)
		
	elseif move[currentMove][moveDeath] == 9 then

		setupClip(offsetDeath09, offsetDeath09 + 45)
	
	elseif move[currentMove][moveDeath] == 10 then

		setupClip(offsetDeath10, offsetDeath10 + 45)
	
	elseif move[currentMove][moveDeath] == 11 then

		setupClip(offsetDeath11, offsetDeath11 + 45)
	
	elseif move[currentMove][moveDeath] == 12 then

		setupClip(offsetDeath12, offsetDeath12 + 45)
		
	elseif move[currentMove][moveDeath] == 13 then

		setupClip(offsetDeath13, offsetDeath13 + 45)
		
	elseif move[currentMove][moveDeath] == 14 then

		setupClip(offsetDeath14, offsetDeath14 + 45)
		
	elseif move[currentMove][moveDeath] == 15 then

		setupClip(offsetDeath15, offsetDeath15 + 45)
	
	elseif move[currentMove][moveDeath] == 16 then

		setupClip(offsetDeath16, offsetDeath16 + 45)
		
	elseif move[currentMove][moveDeath] == 17 then

		setupClip(offsetDeath17, offsetDeath17 + 45)
	
	elseif move[currentMove][moveDeath] == 18 then

		setupClip(offsetDeath18, offsetDeath18 + 45)
		
	elseif move[currentMove][moveDeath] == 19 then

		setupClip(offsetDeath19, offsetDeath19 + 45)
	
	elseif move[currentMove][moveDeath] == 20 then

		setupClip(offsetDeath20, offsetDeath20 + 45)
		
	elseif move[currentMove][moveDeath] == 21 then

		setupClip(offsetDeath21, offsetDeath21 + 45)
		
	elseif move[currentMove][moveDeath] == 22 then

		bDeath = false
		stage[iCurPos][DEATHCOUNT] = stage[iCurPos][DEATHCOUNT] - 1
		setupClip(offsetDeath22, offsetDeath22 + 40)
		move[currentMove][moveDeath] = 25
		
		if dip_Rom == 0 then

			iPauseFrame = 4923

		else

			currentMove = currentMove -1
			iPauseFrame = move[currentMove][inputFrmEnd]
			
		end
		
		if bObj04 == false then
			
			soundPlay(sndright)
			addPoints(SCOREITEM + BUFFITEM * iNbItems)
			iNbItems = iNbItems + 1
			SCOREMOVE = SCOREMOVE + BUFFITMOVE
			bObj04 = true

		end

	elseif move[currentMove][moveDeath] == 23 then

		setupClip(offsetDeath23, offsetDeath23 + 45)

	elseif move[currentMove][moveDeath] == 24 then

		setupClip(offsetDeath24, offsetDeath24 + 45)

	elseif move[currentMove][moveDeath] == 25 then

		setupClip(offsetDeath25, offsetDeath25 + 45)

	elseif move[currentMove][moveDeath] == 26 then

		setupClip(offsetDeath26, offsetDeath26 + 45)

	elseif move[currentMove][moveDeath] == 27 then

		setupClip(offsetDeath27, offsetDeath27 + 45)

	elseif move[currentMove][moveDeath] == 28 then

		setupClip(offsetDeath28, offsetDeath28 + 45)

	elseif move[currentMove][moveDeath] == 29 then

		setupClip(offsetDeath29, offsetDeath29 + 45)

	elseif move[currentMove][moveDeath] == 30 then

		setupClip(offsetDeath30, offsetDeath30 + 45)

	elseif move[currentMove][moveDeath] == 31 then

		setupClip(offsetDeath31, offsetDeath31 + 45)

	elseif move[currentMove][moveDeath] == 32 then

		setupClip(offsetDeath32, offsetDeath32 + 45)

	elseif move[currentMove][moveDeath] == 33 then

		bDeath = false
		stage[iCurPos][DEATHCOUNT] = stage[iCurPos][DEATHCOUNT] - 1
		setupClip(offsetDeath33, offsetDeath33 + 40)
		move[currentMove][moveDeath] = 36
		
		if dip_Rom == 0 then

			iPauseFrame = 7166

		else

			currentMove = currentMove -1
			iPauseFrame = move[currentMove][inputFrmEnd]
			
		end
		
		if bObj04 == false then
			
			soundPlay(sndright)
			addPoints(SCOREITEM + BUFFITEM * iNbItems)
			iNbItems = iNbItems + 1
			SCOREMOVE = SCOREMOVE + BUFFITMOVE
			bObj04 = true

		end

	elseif move[currentMove][moveDeath] == 34 then

		setupClip(offsetDeath34, offsetDeath34 + 45)

	elseif move[currentMove][moveDeath] == 35 then

		setupClip(offsetDeath35, offsetDeath35 + 45)

	elseif move[currentMove][moveDeath] == 36 then

		setupClip(offsetDeath36, offsetDeath36 + 45)

	elseif move[currentMove][moveDeath] == 37 then

		setupClip(offsetDeath37, offsetDeath37 + 45)

	elseif move[currentMove][moveDeath] == 38 then

		setupClip(offsetDeath38, offsetDeath38 + 45)

	elseif move[currentMove][moveDeath] == 39 then

		setupClip(offsetDeath39, offsetDeath39 + 45)

	elseif move[currentMove][moveDeath] == 40 then

		setupClip(offsetDeath40, offsetDeath40 + 45)

	elseif move[currentMove][moveDeath] == 41 then

		setupClip(offsetDeath41, offsetDeath41 + 45)

	elseif move[currentMove][moveDeath] == 42 then

		setupClip(offsetDeath42, offsetDeath42 + 45)

	elseif move[currentMove][moveDeath] == 43 then

		setupClip(offsetDeath43, offsetDeath43 + 45)

	elseif move[currentMove][moveDeath] == 44 then

		bDeath = false
		stage[iCurPos][DEATHCOUNT] = stage[iCurPos][DEATHCOUNT] - 1
		setupClip(offsetDeath44, offsetDeath44 + 40)
		move[currentMove][moveDeath] = 52
		
		if dip_Rom == 0 then

			iPauseFrame = 11973

		else

			currentMove = currentMove -1
			iPauseFrame = move[currentMove][inputFrmEnd]
			
		end
		
		if bObj05 == false then
			
			soundPlay(sndright)
			addPoints(SCOREITEM + BUFFITEM * iNbItems)
			iNbItems = iNbItems + 1
			SCOREMOVE = SCOREMOVE + BUFFITMOVE
			bObj05 = true

		end

	elseif move[currentMove][moveDeath] == 45 then

		setupClip(offsetDeath45, offsetDeath45 + 45)

	elseif move[currentMove][moveDeath] == 46 then

		setupClip(offsetDeath46, offsetDeath46 + 45)

	elseif move[currentMove][moveDeath] == 47 then

		setupClip(offsetDeath47, offsetDeath47 + 45)

	elseif move[currentMove][moveDeath] == 48 then

		setupClip(offsetDeath48, offsetDeath48 + 45)

	elseif move[currentMove][moveDeath] == 49 then

		setupClip(offsetDeath49, offsetDeath49 + 45)

	elseif move[currentMove][moveDeath] == 50 then

		setupClip(offsetDeath50, offsetDeath50 + 45)

	elseif move[currentMove][moveDeath] == 51 then

		setupClip(offsetDeath51, offsetDeath51 + 45)

	elseif move[currentMove][moveDeath] == 52 then

		setupClip(offsetDeath52, offsetDeath52 + 45)

	elseif move[currentMove][moveDeath] == 53 then

		setupClip(offsetDeath53, offsetDeath53 + 45)

	elseif move[currentMove][moveDeath] == 54 then

		setupClip(offsetDeath54, offsetDeath54 + 45)

	elseif move[currentMove][moveDeath] == 55 then

		setupClip(offsetDeath55, offsetDeath55 + 45)

	elseif move[currentMove][moveDeath] == 56 then

		setupClip(offsetDeath56, offsetDeath56 + 45)

	elseif move[currentMove][moveDeath] == 57 then

		setupClip(offsetDeath57, offsetDeath57 + 45)

	elseif move[currentMove][moveDeath] == 58 then

		setupClip(offsetDeath58, offsetDeath58 + 45)

	elseif move[currentMove][moveDeath] == 59 then

		bDeath = false
		stage[iCurPos][DEATHCOUNT] = stage[iCurPos][DEATHCOUNT] - 1
		setupClip(offsetDeath59, offsetDeath59 + 40)
		move[currentMove][moveDeath] = 67
		
		if dip_Rom == 0 then

			iPauseFrame = 15170

		else

			currentMove = currentMove -1
			iPauseFrame = move[currentMove][inputFrmEnd]
			
		end
		
		if bObj05 == false then
			
			soundPlay(sndright)
			addPoints(SCOREITEM + BUFFITEM * iNbItems)
			iNbItems = iNbItems + 1
			SCOREMOVE = SCOREMOVE + BUFFITMOVE
			bObj05 = true

		end

	elseif move[currentMove][moveDeath] == 60 then

		setupClip(offsetDeath60, offsetDeath60 + 45)

	elseif move[currentMove][moveDeath] == 61 then

		setupClip(offsetDeath61, offsetDeath61 + 45)

	elseif move[currentMove][moveDeath] == 62 then

		setupClip(offsetDeath62, offsetDeath62 + 45)

	elseif move[currentMove][moveDeath] == 63 then

		setupClip(offsetDeath63, offsetDeath63 + 45)

	elseif move[currentMove][moveDeath] == 64 then

		setupClip(offsetDeath64, offsetDeath64 + 45)

	elseif move[currentMove][moveDeath] == 65 then

		setupClip(offsetDeath65, offsetDeath65 + 45)

	elseif move[currentMove][moveDeath] == 66 then

		setupClip(offsetDeath66, offsetDeath66 + 45)

	elseif move[currentMove][moveDeath] == 67 then

		setupClip(offsetDeath67, offsetDeath67 + 45)

	elseif move[currentMove][moveDeath] == 68 then

		setupClip(offsetDeath68, offsetDeath68 + 45)

	elseif move[currentMove][moveDeath] == 69 then

		setupClip(offsetDeath69, offsetDeath69 + 45)

	elseif move[currentMove][moveDeath] == 70 then

		setupClip(offsetDeath70, offsetDeath70 + 45)

	elseif move[currentMove][moveDeath] == 71 then

		setupClip(offsetDeath71, offsetDeath71 + 45)

	elseif move[currentMove][moveDeath] == 72 then

		setupClip(offsetDeath72, offsetDeath72 + 45)

	elseif move[currentMove][moveDeath] == 73 then

		setupClip(offsetDeath73, offsetDeath73 + 45)

	elseif move[currentMove][moveDeath] == 74 then

		bDeath = false
		stage[iCurPos][DEATHCOUNT] = stage[iCurPos][DEATHCOUNT] - 1
		setupClip(offsetDeath74, offsetDeath74 + 40)
		move[currentMove][moveDeath] = 82
		
		if dip_Rom == 0 then

			iPauseFrame = 18096

		else

			currentMove = currentMove -1
			iPauseFrame = move[currentMove][inputFrmEnd]
			
		end
		
		if bObj06 == false then
			
			soundPlay(sndright)
			addPoints(SCOREITEM + BUFFITEM * iNbItems)
			iNbItems = iNbItems + 1
			SCOREMOVE = SCOREMOVE + BUFFITMOVE
			bObj06 = true

		end

	elseif move[currentMove][moveDeath] == 75 then

		bDeath = false
		stage[iCurPos][DEATHCOUNT] = stage[iCurPos][DEATHCOUNT] - 1
		setupClip(offsetDeath75, offsetDeath75 + 40)
		move[currentMove][moveDeath] = 82
		
		if dip_Rom == 0 then

			iPauseFrame = 18512

		else

			currentMove = currentMove -1
			iPauseFrame = move[currentMove][inputFrmEnd]
			
		end
		
		if bObj07 == false then
			
			soundPlay(sndright)
			addPoints(SCOREITEM + BUFFITEM * iNbItems)
			iNbItems = iNbItems + 1
			SCOREMOVE = SCOREMOVE + BUFFITMOVE
			bObj07 = true

		end

	elseif move[currentMove][moveDeath] == 76 then

		setupClip(offsetDeath76, offsetDeath76 + 45)

	elseif move[currentMove][moveDeath] == 77 then

		setupClip(offsetDeath77, offsetDeath77 + 45)

	elseif move[currentMove][moveDeath] == 78 then

		setupClip(offsetDeath78, offsetDeath78 + 45)

	elseif move[currentMove][moveDeath] == 79 then

		setupClip(offsetDeath79, offsetDeath79 + 45)

	elseif move[currentMove][moveDeath] == 80 then

		setupClip(offsetDeath80, offsetDeath80 + 45)

	elseif move[currentMove][moveDeath] == 81 then

		setupClip(offsetDeath81, offsetDeath81 + 45)

	elseif move[currentMove][moveDeath] == 82 then

		setupClip(offsetDeath82, offsetDeath82 + 45)

	elseif move[currentMove][moveDeath] == 83 then

		setupClip(offsetDeath83, offsetDeath83 + 45)

	elseif move[currentMove][moveDeath] == 84 then

		setupClip(offsetDeath84, offsetDeath84 + 45)

	elseif move[currentMove][moveDeath] == 85 then

		setupClip(offsetDeath85, offsetDeath85 + 45)

	elseif move[currentMove][moveDeath] == 86 then

		setupClip(offsetDeath86, offsetDeath86 + 45)

	elseif move[currentMove][moveDeath] == 87 then

		setupClip(offsetDeath87, offsetDeath87 + 45)

	elseif move[currentMove][moveDeath] == 88 then

		setupClip(offsetDeath88, offsetDeath88 + 45)

	elseif move[currentMove][moveDeath] == 89 then

		setupClip(offsetDeath89, offsetDeath89 + 45)

	elseif move[currentMove][moveDeath] == 90 then

		setupClip(offsetDeath90, offsetDeath90 + 45)

	elseif move[currentMove][moveDeath] == 91 then

		bDeath = false
		stage[iCurPos][DEATHCOUNT] = stage[iCurPos][DEATHCOUNT] - 1
		setupClip(offsetDeath91, offsetDeath91 + 40)
		move[currentMove][moveDeath] = 99
		
		if dip_Rom == 0 then

			iPauseFrame = 18096

		else

			currentMove = currentMove -1
			iPauseFrame = move[currentMove][inputFrmEnd]
			
		end
		
		if bObj06 == false then
			
			soundPlay(sndright)
			addPoints(SCOREITEM + BUFFITEM * iNbItems)
			iNbItems = iNbItems + 1
			SCOREMOVE = SCOREMOVE + BUFFITMOVE
			bObj06 = true

		end

	elseif move[currentMove][moveDeath] == 92 then

		bDeath = false
		stage[iCurPos][DEATHCOUNT] = stage[iCurPos][DEATHCOUNT] - 1
		setupClip(offsetDeath92, offsetDeath92 + 40)
		move[currentMove][moveDeath] = 99
		
		if dip_Rom == 0 then

			iPauseFrame = 18096

		else

			currentMove = currentMove -1
			iPauseFrame = move[currentMove][inputFrmEnd]
			
		end
		
		if bObj07 == false then
			
			soundPlay(sndright)
			addPoints(SCOREITEM + BUFFITEM * iNbItems)
			iNbItems = iNbItems + 1
			SCOREMOVE = SCOREMOVE + BUFFITMOVE
			bObj07 = true

		end

	elseif move[currentMove][moveDeath] == 93 then

		setupClip(offsetDeath93, offsetDeath93 + 45)

	elseif move[currentMove][moveDeath] == 94 then

		setupClip(offsetDeath94, offsetDeath94 + 45)

	elseif move[currentMove][moveDeath] == 95 then

		setupClip(offsetDeath95, offsetDeath95 + 45)

	elseif move[currentMove][moveDeath] == 96 then

		setupClip(offsetDeath96, offsetDeath96 + 45)

	elseif move[currentMove][moveDeath] == 97 then

		setupClip(offsetDeath97, offsetDeath97 + 45)

	elseif move[currentMove][moveDeath] == 98 then

		setupClip(offsetDeath98, offsetDeath98 + 45)

	elseif move[currentMove][moveDeath] == 99 then

		setupClip(offsetDeath99, offsetDeath99 + 45)

	elseif move[currentMove][moveDeath] == 100 then

		setupClip(offsetDeath100, offsetDeath100 + 45)

	elseif move[currentMove][moveDeath] == 101 then

		setupClip(offsetDeath101, offsetDeath101 + 45)

	elseif move[currentMove][moveDeath] == 102 then

		setupClip(offsetDeath102, offsetDeath102 + 45)

	elseif move[currentMove][moveDeath] == 103 then

		setupClip(offsetDeath103, offsetDeath103 + 45)

	elseif move[currentMove][moveDeath] == 104 then

		setupClip(offsetDeath104, offsetDeath104 + 45)

	elseif move[currentMove][moveDeath] == 105 then

		setupClip(offsetDeath105, offsetDeath105 + 45)

	elseif move[currentMove][moveDeath] == 106 then

		setupClip(offsetDeath106, offsetDeath106 + 45)

	elseif move[currentMove][moveDeath] == 107 then

		setupClip(offsetDeath107, offsetDeath107 + 45)

	elseif move[currentMove][moveDeath] == 108 then

		bDeath = false
		stage[iCurPos][DEATHCOUNT] = stage[iCurPos][DEATHCOUNT] - 1
		setupClip(offsetDeath108, offsetDeath108 + 40)
		move[currentMove][moveDeath] = 114
		
		if dip_Rom == 0 then

			iPauseFrame = 24947

		else

			currentMove = currentMove -1
			iPauseFrame = move[currentMove][inputFrmEnd]
			
		end
		
		if bObj08 == false then
			
			soundPlay(sndright)
			addPoints(SCOREITEM + BUFFITEM * iNbItems)
			iNbItems = iNbItems + 1
			SCOREMOVE = SCOREMOVE + BUFFITMOVE
			bObj08 = true

		end

	elseif move[currentMove][moveDeath] == 109 then

		bDeath = false
		stage[iCurPos][DEATHCOUNT] = stage[iCurPos][DEATHCOUNT] - 1
		setupClip(offsetDeath109, offsetDeath109 + 40)
		move[currentMove][moveDeath] = 121
		
		if dip_Rom == 0 then

			iPauseFrame = 25615

		else

			currentMove = currentMove -1
			iPauseFrame = move[currentMove][inputFrmEnd]
			
		end
		
		if bObj09 == false then
			
			soundPlay(sndright)
			addPoints(SCOREITEM + BUFFITEM * iNbItems)
			iNbItems = iNbItems + 1
			SCOREMOVE = SCOREMOVE + BUFFITMOVE
			bObj09 = true

		end

	elseif move[currentMove][moveDeath] == 110 then

		setupClip(offsetDeath110, offsetDeath110 + 45)

	elseif move[currentMove][moveDeath] == 111 then

		setupClip(offsetDeath111, offsetDeath111 + 45)
	
	elseif move[currentMove][moveDeath] == 112 then

		setupClip(offsetDeath112, offsetDeath112 + 45)
		
	elseif move[currentMove][moveDeath] == 113 then

		setupClip(offsetDeath113, offsetDeath113 + 45)
		
	elseif move[currentMove][moveDeath] == 114 then

		setupClip(offsetDeath114, offsetDeath114 + 45)
		
	elseif move[currentMove][moveDeath] == 115 then

		setupClip(offsetDeath115, offsetDeath115 + 45)
	
	elseif move[currentMove][moveDeath] == 116 then

		setupClip(offsetDeath116, offsetDeath116 + 45)
		
	elseif move[currentMove][moveDeath] == 117 then

		setupClip(offsetDeath117, offsetDeath117 + 45)
	
	elseif move[currentMove][moveDeath] == 118 then

		setupClip(offsetDeath118, offsetDeath118 + 45)
		
	elseif move[currentMove][moveDeath] == 119 then

		setupClip(offsetDeath119, offsetDeath119 + 45)

	elseif move[currentMove][moveDeath] == 120 then

		setupClip(offsetDeath120, offsetDeath120 + 45)
		
	elseif move[currentMove][moveDeath] == 121 then

		setupClip(offsetDeath121, offsetDeath121 + 45)
		
	elseif move[currentMove][moveDeath] == 122 then

		setupClip(offsetDeath122, offsetDeath122 + 45)

	elseif move[currentMove][moveDeath] == 123 then

		setupClip(offsetDeath123, offsetDeath123 + 45)

	elseif move[currentMove][moveDeath] == 124 then

		bDeath = false
		stage[iCurPos][DEATHCOUNT] = stage[iCurPos][DEATHCOUNT] - 1
		setupClip(offsetDeath124, offsetDeath124 + 40)
		move[currentMove][moveDeath] = 130
		
		if dip_Rom == 0 then

			iPauseFrame = 28347

		else

			currentMove = currentMove -1
			iPauseFrame = move[currentMove][inputFrmEnd]
			
		end
		
		if bObj08 == false then
			
			soundPlay(sndright)
			addPoints(SCOREITEM + BUFFITEM * iNbItems)
			iNbItems = iNbItems + 1
			SCOREMOVE = SCOREMOVE + BUFFITMOVE
			bObj08 = true

		end

	elseif move[currentMove][moveDeath] == 125 then

		bDeath = false
		stage[iCurPos][DEATHCOUNT] = stage[iCurPos][DEATHCOUNT] - 1
		setupClip(offsetDeath125, offsetDeath125 + 40)
		move[currentMove][moveDeath] = 137
		
		if dip_Rom == 0 then

			iPauseFrame = 29015

		else

			currentMove = currentMove -1
			iPauseFrame = move[currentMove][inputFrmEnd]
			
		end
		
		if bObj09 == false then
			
			soundPlay(sndright)
			addPoints(SCOREITEM + BUFFITEM * iNbItems)
			iNbItems = iNbItems + 1
			SCOREMOVE = SCOREMOVE + BUFFITMOVE
			bObj09 = true

		end

	elseif move[currentMove][moveDeath] == 126 then

		setupClip(offsetDeath126, offsetDeath126 + 45)

	elseif move[currentMove][moveDeath] == 127 then

		setupClip(offsetDeath127, offsetDeath127 + 45)

	elseif move[currentMove][moveDeath] == 128 then

		setupClip(offsetDeath128, offsetDeath128 + 45)

	elseif move[currentMove][moveDeath] == 129 then

		setupClip(offsetDeath129, offsetDeath129 + 45)

	elseif move[currentMove][moveDeath] == 130 then

		setupClip(offsetDeath130, offsetDeath130 + 45)

	elseif move[currentMove][moveDeath] == 131 then

		setupClip(offsetDeath131, offsetDeath131 + 45)

	elseif move[currentMove][moveDeath] == 132 then

		setupClip(offsetDeath132, offsetDeath132 + 45)

	elseif move[currentMove][moveDeath] == 133 then

		setupClip(offsetDeath133, offsetDeath133 + 45)

	elseif move[currentMove][moveDeath] == 134 then

		setupClip(offsetDeath134, offsetDeath134 + 45)

	elseif move[currentMove][moveDeath] == 135 then

		setupClip(offsetDeath135, offsetDeath135 + 45)

	elseif move[currentMove][moveDeath] == 136 then

		setupClip(offsetDeath136, offsetDeath136 + 45)

	elseif move[currentMove][moveDeath] == 137 then

		setupClip(offsetDeath137, offsetDeath137 + 45)

	elseif move[currentMove][moveDeath] == 138 then

		setupClip(offsetDeath138, offsetDeath138 + 45)

	elseif move[currentMove][moveDeath] == 139 then

		setupClip(offsetDeath139, offsetDeath139 + 45)

	elseif move[currentMove][moveDeath] == 140 then

		bDeath = false
		stage[iCurPos][DEATHCOUNT] = stage[iCurPos][DEATHCOUNT] - 1
		setupClip(offsetDeath140, offsetDeath140 + 40)
		move[currentMove][moveDeath] = 144
		
		if dip_Rom == 0 then

			iPauseFrame = 31539

		else

			currentMove = currentMove -1
			iPauseFrame = move[currentMove][inputFrmEnd]
			
		end
		
		if bObj10 == false then
			
			soundPlay(sndright)
			addPoints(SCOREITEM + BUFFITEM * iNbItems)
			iNbItems = iNbItems + 1
			SCOREMOVE = SCOREMOVE + BUFFITMOVE
			bObj10 = true

		end

	elseif move[currentMove][moveDeath] == 141 then

		bDeath = false
		stage[iCurPos][DEATHCOUNT] = stage[iCurPos][DEATHCOUNT] - 1
		setupClip(offsetDeath141, offsetDeath141 + 40)
		move[currentMove][moveDeath] = 151
		
		if dip_Rom == 0 then

			iPauseFrame = 32251

		else

			currentMove = currentMove -1
			iPauseFrame = move[currentMove][inputFrmEnd]
			
		end
		
		if bObj11 == false then
			
			soundPlay(sndright)
			addPoints(SCOREITEM + BUFFITEM * iNbItems)
			iNbItems = iNbItems + 1
			SCOREMOVE = SCOREMOVE + BUFFITMOVE
			bObj11 = true

		end

	elseif move[currentMove][moveDeath] == 142 then

		setupClip(offsetDeath142, offsetDeath142 + 45)

	elseif move[currentMove][moveDeath] == 143 then

		setupClip(offsetDeath143, offsetDeath143 + 45)

	elseif move[currentMove][moveDeath] == 144 then

		setupClip(offsetDeath144, offsetDeath144 + 45)

	elseif move[currentMove][moveDeath] == 145 then

		setupClip(offsetDeath145, offsetDeath145 + 45)

	elseif move[currentMove][moveDeath] == 146 then

		setupClip(offsetDeath146, offsetDeath146 + 45)

	elseif move[currentMove][moveDeath] == 147 then

		setupClip(offsetDeath147, offsetDeath147 + 45)

	elseif move[currentMove][moveDeath] == 148 then

		setupClip(offsetDeath148, offsetDeath148 + 45)

	elseif move[currentMove][moveDeath] == 149 then

		setupClip(offsetDeath149, offsetDeath149 + 45)

	elseif move[currentMove][moveDeath] == 150 then

		setupClip(offsetDeath150, offsetDeath150 + 45)

	elseif move[currentMove][moveDeath] == 151 then

		setupClip(offsetDeath151, offsetDeath151 + 45)

	elseif move[currentMove][moveDeath] == 152 then

		setupClip(offsetDeath152, offsetDeath152 + 45)

	elseif move[currentMove][moveDeath] == 153 then

		setupClip(offsetDeath153, offsetDeath153 + 45)

	elseif move[currentMove][moveDeath] == 154 then

		setupClip(offsetDeath154, offsetDeath154 + 45)

	elseif move[currentMove][moveDeath] == 155 then

		bDeath = false
		stage[iCurPos][DEATHCOUNT] = stage[iCurPos][DEATHCOUNT] - 1
		setupClip(offsetDeath155, offsetDeath155 + 40)
		move[currentMove][moveDeath] = 159
		
		if dip_Rom == 0 then

			iPauseFrame = 34999

		else

			currentMove = currentMove -1
			iPauseFrame = move[currentMove][inputFrmEnd]
			
		end
		
		if bObj10 == false then
			
			soundPlay(sndright)
			addPoints(SCOREITEM + BUFFITEM * iNbItems)
			iNbItems = iNbItems + 1
			SCOREMOVE = SCOREMOVE + BUFFITMOVE
			bObj10 = true

		end

	elseif move[currentMove][moveDeath] == 156 then

		bDeath = false
		stage[iCurPos][DEATHCOUNT] = stage[iCurPos][DEATHCOUNT] - 1
		setupClip(offsetDeath156, offsetDeath156 + 40)
		move[currentMove][moveDeath] = 166
		
		if dip_Rom == 0 then

			iPauseFrame = 35711

		else

			currentMove = currentMove -1
			iPauseFrame = move[currentMove][inputFrmEnd]
			
		end
		
		if bObj11 == false then
			
			soundPlay(sndright)
			addPoints(SCOREITEM + BUFFITEM * iNbItems)
			iNbItems = iNbItems + 1
			SCOREMOVE = SCOREMOVE + BUFFITMOVE
			bObj11 = true

		end

	elseif move[currentMove][moveDeath] == 157 then

		setupClip(offsetDeath157, offsetDeath157 + 45)

	elseif move[currentMove][moveDeath] == 158 then

		setupClip(offsetDeath158, offsetDeath158 + 45)

	elseif move[currentMove][moveDeath] == 159 then

		setupClip(offsetDeath159, offsetDeath159 + 45)

	elseif move[currentMove][moveDeath] == 160 then

		setupClip(offsetDeath160, offsetDeath160 + 45)

	elseif move[currentMove][moveDeath] == 161 then

		setupClip(offsetDeath161, offsetDeath161 + 45)

	elseif move[currentMove][moveDeath] == 162 then

		setupClip(offsetDeath162, offsetDeath162 + 45)

	elseif move[currentMove][moveDeath] == 163 then

		setupClip(offsetDeath163, offsetDeath163 + 45)

	elseif move[currentMove][moveDeath] == 164 then

		setupClip(offsetDeath164, offsetDeath164 + 45)

	elseif move[currentMove][moveDeath] == 165 then

		setupClip(offsetDeath165, offsetDeath165 + 45)

	elseif move[currentMove][moveDeath] == 166 then

		setupClip(offsetDeath166, offsetDeath166 + 45)

	elseif move[currentMove][moveDeath] == 167 then

		setupClip(offsetDeath167, offsetDeath167 + 45)

	elseif move[currentMove][moveDeath] == 168 then

		setupClip(offsetDeath168, offsetDeath168 + 45)

	elseif move[currentMove][moveDeath] == 169 then

		setupClip(offsetDeath169, offsetDeath169 + 45)

	elseif move[currentMove][moveDeath] == 170 then

		setupClip(offsetDeath170, offsetDeath170 + 45)

	elseif move[currentMove][moveDeath] == 171 then

		setupClip(offsetDeath171, offsetDeath171 + 45)

	elseif move[currentMove][moveDeath] == 172 then

		setupClip(offsetDeath172, offsetDeath172 + 45)

	elseif move[currentMove][moveDeath] == 173 then

		setupClip(offsetDeath173, offsetDeath173 + 45)

	elseif move[currentMove][moveDeath] == 174 then

		setupClip(offsetDeath174, offsetDeath174 + 45)

	elseif move[currentMove][moveDeath] == 175 then

		setupClip(offsetDeath175, offsetDeath175 + 45)

	elseif move[currentMove][moveDeath] == 176 then

		setupClip(offsetDeath176, offsetDeath176 + 45)

	elseif move[currentMove][moveDeath] == 177 then

		setupClip(offsetDeath177, offsetDeath177 + 45)

	elseif move[currentMove][moveDeath] == 178 then

		setupClip(offsetDeath178, offsetDeath178 + 45)

	elseif move[currentMove][moveDeath] == 179 then

		setupClip(offsetDeath179, offsetDeath179 + 45)

	elseif move[currentMove][moveDeath] == 180 then

		setupClip(offsetDeath180, offsetDeath180 + 45)

	elseif move[currentMove][moveDeath] == 181 then

		setupClip(offsetDeath181, offsetDeath181 + 45)

	elseif move[currentMove][moveDeath] == 182 then

		setupClip(offsetDeath182, offsetDeath182 + 45)

	elseif move[currentMove][moveDeath] == 183 then

		setupClip(offsetDeath183, offsetDeath183 + 45)

	elseif move[currentMove][moveDeath] == 184 then

		setupClip(offsetDeath184, offsetDeath184 + 45)

	elseif move[currentMove][moveDeath] == 185 then

		setupClip(offsetDeath185, offsetDeath185 + 45)

	elseif move[currentMove][moveDeath] == 186 then

		setupClip(offsetDeath186, offsetDeath186 + 45)

	elseif move[currentMove][moveDeath] == 187 then

		setupClip(offsetDeath187, offsetDeath187 + 45)

	end	
	
	if dip_Rewind == 1 and bDeath == true then

		if currentMove == 1 then

			iPauseFrame = segmentStart
			currentMove= 0

		else
				
			iPauseFrame = move[currentMove-1][inputFrmEnd] + 1
			currentMove=currentMove-1

		end	
	
	end

end 	


function SetupFramesLevel(thisLevel)

	local k = 0																 
	local q = 0
	
	for k=1,totalMoves do

		if thisLevel == level01 then

			move[k][5] = move[k][1] + offsetLevel01
			move[k][1] = move[k][1] + offsetLevel01 
			move[k][2] = move[k][2] + offsetLevel01

		elseif thisLevel == level02 then

			move[k][5] = move[k][1] + offsetLevel02
			move[k][1] = move[k][1] + offsetLevel02 
			move[k][2] = move[k][2] + offsetLevel02
		
		elseif thisLevel == level03 then

			move[k][5] = move[k][1] + offsetLevel03
			move[k][1] = move[k][1] + offsetLevel03 
			move[k][2] = move[k][2] + offsetLevel03

		elseif thisLevel == level04 then

			move[k][5] = move[k][1] + offsetLevel04
			move[k][1] = move[k][1] + offsetLevel04 
			move[k][2] = move[k][2] + offsetLevel04

		elseif thisLevel == level05 then

			move[k][5] = move[k][1] + offsetLevel05
			move[k][1] = move[k][1] + offsetLevel05 
			move[k][2] = move[k][2] + offsetLevel05

		elseif thisLevel == level06 then

			move[k][5] = move[k][1] + offsetLevel06
			move[k][1] = move[k][1] + offsetLevel06
			move[k][2] = move[k][2] + offsetLevel06

		elseif thisLevel == level07 then

			move[k][5] = move[k][1] + offsetLevel07
			move[k][1] = move[k][1] + offsetLevel07 
			move[k][2] = move[k][2] + offsetLevel07

		elseif thisLevel == level08 then

			move[k][5] = move[k][1] + offsetLevel08
			move[k][1] = move[k][1] + offsetLevel08
			move[k][2] = move[k][2] + offsetLevel08

		elseif thisLevel == level09 then

			move[k][5] = move[k][1] + offsetLevel09
			move[k][1] = move[k][1] + offsetLevel09 
			move[k][2] = move[k][2] + offsetLevel09

		elseif thisLevel == level10 then

			move[k][5] = move[k][1] + offsetLevel10
			move[k][1] = move[k][1] + offsetLevel10 
			move[k][2] = move[k][2] + offsetLevel10

		elseif thisLevel == level11 then

			move[k][5] = move[k][1] + offsetLevel11
			move[k][1] = move[k][1] + offsetLevel11 
			move[k][2] = move[k][2] + offsetLevel11

		elseif thisLevel == level12 then

			move[k][5] = move[k][1] + offsetLevel12
			move[k][1] = move[k][1] + offsetLevel12
			move[k][2] = move[k][2] + offsetLevel12

		elseif thisLevel == level13 then

			move[k][5] = move[k][1] + offsetLevel13
			move[k][1] = move[k][1] + offsetLevel13 
			move[k][2] = move[k][2] + offsetLevel13

		elseif thisLevel == level14 then

			move[k][5] = move[k][1] + offsetLevel14
			move[k][1] = move[k][1] + offsetLevel14 
			move[k][2] = move[k][2] + offsetLevel14

		elseif thisLevel == levelExt then

			move[k][5] = move[k][1] + offsetLevelExt
			move[k][1] = move[k][1] + offsetLevelExt 
			move[k][2] = move[k][2] + offsetLevelExt

		end

	end

	for q=1,totalMoves do

		if q < totalMoves then

			move[q][6] = move[q+1][5] - 1
		
		else
			
			move[q][6] = segmentEnd
								
		end

	end
	
end


function setupLevel(thisLevel)

	if dip_Debug then debugPrint("Entering setupLevel() thisLevel = " .. thisLevel) end
	
	local thisSegment = 0
	local bSegFound = false

	iSegPointer	= iSegPointer + 1

	if dip_Debug then debugPrint( "iSegPointer: " .. iSegPointer .. " - stage segment total: " .. stage[thisLevel][SEGMENTCOUNT] ) end	
	if iSegPointer > stage[thisLevel][SEGMENTCOUNT] then iSegPointer = iSegPointer - 1 end	
	

	for thisSegment=iSegPointer,stage[thisLevel][SEGMENTCOUNT] do			
		
		if segment[thisLevel][thisSegment][SEGMENTCOMPLETE] == false then
		
			segID = segment[thisLevel][thisSegment][SEGMENTID]
			iSegPointer = thisSegment
			bSegFound = true
	
			if dip_Debug then debugPrint("Setting up segment #" .. segID .. " - '" .. segment[thisLevel][thisSegment][SEGMENTNAME] .. "'") end
			
			if     (thisLevel == level01)  then setupLevel01(segID)		
			elseif (thisLevel == level02)  then setupLevel02(segID)						
			elseif (thisLevel == level03)  then setupLevel03(segID)			
			elseif (thisLevel == level04)  then setupLevel04(segID)
			elseif (thisLevel == level05)  then setupLevel05(segID)
			elseif (thisLevel == level06)  then setupLevel06(segID)
			elseif (thisLevel == level07)  then setupLevel07(segID)			
			elseif (thisLevel == level08)  then setupLevel08(segID)
			elseif (thisLevel == level09)  then setupLevel09(segID)
			elseif (thisLevel == level10)  then setupLevel10(segID)
			elseif (thisLevel == level11)  then setupLevel11(segID)			
			elseif (thisLevel == level12)  then setupLevel12(segID)
			elseif (thisLevel == level13)  then setupLevel13(segID)
			elseif (thisLevel == level14)  then setupLevel14(segID)
			elseif (thisLevel == levelExt)  then setupLevelExt(segID) end 
			SetupFramesLevel(thisLevel)	
						
			break
			
		end
	
	end
	
	if not bSegFound then
		
		iSegPointer = 1
	
		for thisSegment=1,stage[thisLevel][SEGMENTCOUNT] do			
			
			if segment[thisLevel][thisSegment][SEGMENTCOMPLETE] == false then
			
				segID = segment[thisLevel][thisSegment][SEGMENTID]
				iSegPointer = thisSegment
				bSegFound = true
		
				if dip_Debug then debugPrint("Setting up segment #" .. segID .. " - '" .. segment[thisLevel][thisSegment][SEGMENTNAME] .. "'") end
				
				if (thisLevel == level01)      then setupLevel01(segID)
				elseif (thisLevel == level02)  then setupLevel02(segID)
				elseif (thisLevel == level03)  then setupLevel03(segID)
				elseif (thisLevel == level04)  then setupLevel04(segID)
				elseif (thisLevel == level05)  then setupLevel05(segID)
				elseif (thisLevel == level06)  then setupLevel06(segID)
				elseif (thisLevel == level07)  then setupLevel07(segID)			
				elseif (thisLevel == level08)  then setupLevel08(segID)
				elseif (thisLevel == level09)  then setupLevel09(segID)
				elseif (thisLevel == level10)  then setupLevel10(segID)
				elseif (thisLevel == level11)  then setupLevel11(segID)			
				elseif (thisLevel == level12)  then setupLevel12(segID)
				elseif (thisLevel == level13)  then setupLevel13(segID)
				elseif (thisLevel == level14)  then setupLevel14(segID)
				elseif (thisLevel == levelExt)  then setupLevelExt(segID) end 
				SetupFramesLevel(thisLevel)	

				break
				
			end
		
		end	
		
	end

	if bAllowSave == true then 

		autoSave(4) 
		bShowDiskA = true
		altState = branch01		
		bAllowSave = false

	end
	
	if dip_Debug then debugPrint("Leaving setupLevel()") end

end

function startGame()

	if dip_Debug then debugPrint ("Entering startGame()") end
	
	initStages()

	if bExtendedPlay then 

		currentLevel = levelNormal
		iCurPos = levelExt
		levelMap = nil; levelMap = {true, false, false, false, false, false, false, false, true}
	
	else
		
		if iCredits > 0 then iCredits = iCredits - 1 end
		iScore = 0
		iScoreTemp = 0	
		
		if (currentLevel == levelContinue) then	
	        
			currentLevel = iTempLevel
			
			if dip_Rewind == 1 then

				currentMove = currentMove+1
				bSave = true

			elseif dip_Rewind == 2 then
						
				if currentMove == totalMoves then

					currentMove = currentMove-1
					bSave = true
																							
				else

					currentMove = currentMove+1
					bSave = true
				
				end	

			elseif dip_Rewind == 3 then
			
				iSegPointer = 0

			end
			
		else		
			
			iContinues = 0
			iSegPointer = 0

			if dip_StartLevel == 1 then

				iCurPos = level01					
			
			elseif dip_StartLevel == 2 then
			
				iCurPos = level02	

			elseif dip_StartLevel == 3 then
			
				iCurPos = level03

			elseif dip_StartLevel == 4 then
			
				iCurPos = level04

			elseif dip_StartLevel == 5 then
			
				iCurPos = level05

			elseif dip_StartLevel == 6 then
			
				iCurPos = level06

			elseif dip_StartLevel == 7 then
			
				iCurPos = level07

			elseif dip_StartLevel == 8 then
			
				iCurPos = level08

			elseif dip_StartLevel == 9 then
			
				iCurPos = level09

			elseif dip_StartLevel == 10 then
			
				iCurPos = level10

			elseif dip_StartLevel == 11 then
			
				iCurPos = level11

			elseif dip_StartLevel == 12 then
			
				iCurPos = level12

			elseif dip_StartLevel == 13 then
			
				iCurPos = level13

			elseif dip_StartLevel == 14 then
			
				iCurPos = level14

			end

			if dip_StartSegment == 1 then

				iSegPointer = 0					
			
			elseif dip_StartSegment == 2 then
			
				iSegPointer = 1	

			elseif dip_StartSegment == 3 then
			
				iSegPointer = 2

			elseif dip_StartSegment == 4 then
			
				iSegPointer = 3

			elseif dip_StartSegment == 5 then
			
				iSegPointer = 4

			elseif dip_StartSegment == 6 then
			
				iSegPointer = 5	

			elseif dip_StartSegment == 7 then
			
				iSegPointer = 6	

			elseif dip_StartSegment == 8 then
			
				iSegPointer = 7

			elseif dip_StartSegment == 9 then
			
				iSegPointer = 8

			elseif dip_StartSegment == 10 then
			
				iSegPointer = 9	

			end

			levelMap = nil; levelMap = {true, false, false, false, false, false, false, false, true}					
			currentLevel = levelNormal			
		
		end		
		
	end
	
	lvlState = lvlSetup
	
	
	bShowLives = false
	bShowAction = true
	bShowScore = false

	
	iLives = dip_LivesPerCredit	
	bShowAction = false
	bShowCredits = false
	bShowLCD = false
	bResetContinue = false	
	bExtendedPlay = false	
	SCOREMOVE = 500
	iNbItems = 0
	bObj01 = false
	bObj02 = false
	bObj03 = false
	bObj04 = false
	bObj05 = false
	bObj06 = false
	bObj07 = false
	bObj08 = false
	bObj09 = false
	bObj10 = false
	bObj11 = false
	bRetry = false
	
	if dip_Debug then debugPrint ("Leaving startGame()") end

end

function startSave()

	bSave = true
	
	if dip_Debug then debugPrint ("Entering startSave()") end
	
	initStages()
		
	iContinues = 0
	iSegPointer = 0

	if dip_StartLevel == 1 then

		iCurPos = level01					
		
	elseif dip_StartLevel == 2 then
			
		iCurPos = level02	

	elseif dip_StartLevel == 3 then
			
		iCurPos = level03

	elseif dip_StartLevel == 4 then
			
		iCurPos = level04

	elseif dip_StartLevel == 5 then
			
		iCurPos = level05

	elseif dip_StartLevel == 6 then
			
		iCurPos = level06

	elseif dip_StartLevel == 7 then
			
		iCurPos = level07

	elseif dip_StartLevel == 8 then
			
		iCurPos = level08

	elseif dip_StartLevel == 9 then
			
		iCurPos = level09

	elseif dip_StartLevel == 10 then
			
		iCurPos = level10

	elseif dip_StartLevel == 11 then

		iCurPos = level11					
			
	elseif dip_StartLevel == 12 then
			
		iCurPos = level12	

	elseif dip_StartLevel == 13 then
			
		iCurPos = level13

	elseif dip_StartLevel == 14 then
			
		iCurPos = level14

	elseif dip_StartLevel == 15 then
			
		iCurPos = level15

	elseif dip_StartLevel == 16 then
			
		iCurPos = level16

	end

	if dip_StartSegment == 1 then

		iSegPointer = 0					
			
	elseif dip_StartSegment == 2 then
			
		iSegPointer = 1	

	elseif dip_StartSegment == 3 then
			
		iSegPointer = 2

	elseif dip_StartSegment == 4 then
			
		iSegPointer = 3

	elseif dip_StartSegment == 5 then
			
		iSegPointer = 4

	elseif dip_StartSegment == 6 then
			
		iSegPointer = 5	

	elseif dip_StartSegment == 7 then
			
		iSegPointer = 6	

	elseif dip_StartSegment == 8 then
			
		iSegPointer = 7

	elseif dip_StartSegment == 9 then
			
		iSegPointer = 8

	elseif dip_StartSegment == 10 then
			
		iSegPointer = 9	

	elseif dip_StartSegment == 11 then
			
		iSegPointer = 10

	elseif dip_StartSegment == 12 then
			
		iSegPointer = 11

	elseif dip_StartSegment == 13 then
			
		iSegPointer = 12

	elseif dip_StartSegment == 14 then
			
		iSegPointer = 13

	elseif dip_StartSegment == 15 then
			
		iSegPointer = 14

	end

	iScoreTemp = iScore
	
	currentLevel = levelNormal		
	
	lvlState = lvlSetup

	bShowLives = true
	bShowAction = true
	bShowScore = true
	bShowGet = false
	
	bShowSkip = false 	
	bShowAction = false
	bTestMash = false
	iMash = 0
	bShowCredits = false
	bShowLCD = false
	bResetContinue = false	
	bExtendedPlay = false	
		
	if dip_Debug then debugPrint ("Leaving startSave()") end

end

function startMovie()
	
	if dip_Debug then debugPrint ("Entering startMovie()") end
	
	if (lvlState == lvlSetup) then

		iScore = 0	
		iScoreTemp = 0
		iContinues = 0
		iSegPointer = 0
	
		setupClip(offsetLevel01 + 57, offsetLevel01 + 1862)					
		
		bShowLives = false
		bShowAction = false
		bShowScore = false
		bShowLvl = false
		bShowCredits = false
		bShowLCD = false

		lvlState = lvlRunning
	
	elseif (lvlState == lvlRunning) then
	
		if (currentFrame == iFrameEnd) then
			
			p1RIGHT = true
			lvlState = lvlRunning
			
		elseif p1START1 then

			p1START1 = false
			--lvlState = lvlEnd		
			lvlState = lvlSetup
			currentLevel = levelIntro

		elseif p1RIGHT then

			p1RIGHT = false

			iMovie = iMovie + 1

			if iMovie == 2 then

				setupClip(offsetLevel02 + 57, offsetLevel02 + 1791)

			elseif iMovie == 3 then

				setupClip(offsetLevel04 + 57, offsetLevel04 + 1956)

			elseif iMovie == 4 then

				setupClip(offsetLevel06 + 57, offsetLevel06 + 1950)

			elseif iMovie == 5 then

				setupClip(offsetLevel08 + 57, offsetLevel08 + 2086)	

			elseif iMovie == 6 then

				setupClip(offsetLevel10 + 57, offsetLevel10 + 2174)

			elseif iMovie == 7 then

				setupClip(offsetLevel13 + 57, offsetLevel13 + 1326)

			elseif iMovie == 8 then

				setupClip(offsetLevel14 + 57, offsetLevel14 + 1890)

			elseif iMovie == 9 or iMovie == 1 then

				iMovie = 1
				setupClip(offsetLevel01 + 57, offsetLevel01 + 1862)		

			end

		elseif p1LEFT then

			p1LEFT = false

			iMovie = iMovie - 1

			if iMovie == 2 then

				setupClip(offsetLevel02 + 57, offsetLevel02 + 1791)

			elseif iMovie == 3 then

				setupClip(offsetLevel04 + 57, offsetLevel04 + 1956)

			elseif iMovie == 4 then

				setupClip(offsetLevel06 + 57, offsetLevel06 + 1950)

			elseif iMovie == 5 then

				setupClip(offsetLevel08 + 57, offsetLevel08 + 2086)	

			elseif iMovie == 6 then

				setupClip(offsetLevel10 + 57, offsetLevel10 + 2174)

			elseif iMovie == 7 then

				setupClip(offsetLevel13 + 57, offsetLevel13 + 1326)

			elseif iMovie == 8 or iMovie == 0 then

				iMovie = 8
				setupClip(offsetLevel14 + 57, offsetLevel14 + 1890)

			elseif iMovie == 1 then

				setupClip(offsetLevel01 + 57, offsetLevel01 + 1862)	

			end


		end	
	
	elseif (lvlState == lvlEnd) then
	
		lvlState = lvlSetup
		currentLevel = levelIntro
		if dip_Debug then debugPrint ("Leaving startMovie()") end

	end

end
