--[[

PROGRAM NAME:	LUA SINGE
VERSION:		1.1
AUTHOR:			KARIS (2020)

This file is part of LUA SINGE.

	LUA SINGE is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation.

	LUA SINGE is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

	Thanks to Scott Duensing, RDG.

]]--

optSel = 0
slotsave = nil;

function readConfig()

	local s1
	local hsName = ""
	local hsScore = ""
	local k = 0
	local h1 = io.input("singe/pussinboots/game.cfg")	

	if (dip_Debug) then debugPrint ("Entering readConfig()") end

		local s1 = io.read("*line")	

		if (s1 ~= nil) then
		
			dip_Difficulty = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")

		if (s1 ~= nil) then
		
			dip_GameType = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end
	
		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_StartLevel = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_StartSegment = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_Rewind = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then

			dip_CoinsPerCredit = tonumber(string.sub(s1,string.find(s1,"=")+1))			
			
		end
		
		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_LivesPerCredit = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end
				
		s1 = io.read("*line")
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))	
		
		if (s1 ~= nil) then
		
			if (s1 == 1) then
				dip_AllowContinue = true
			else
				dip_AllowContinue = false
			end
		end
		
		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_LimitContinue = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))	
		
		if (s1 ~= nil) then
		
			if (s1 == 1) then
				dip_ShowAction = true
			else
				dip_ShowAction = false
			end
		end		

		s1 = io.read("*line")
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
		if (s1 ~= nil) then
		
			if (s1 == 1) then
				dip_Kidmode = true
			else
				dip_Kidmode = false
			end
		end

		s1 = io.read("*line")
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
		if (s1 ~= nil) then
		
			if (s1 == 1) then
				dip_Movie = true
			else
				dip_Movie = false
			end
		end

		s1 = io.read("*line")
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
		if (s1 ~= nil) then
		
			if (s1 == 1) then
				dip_Debug = true
			else
				dip_Debug = false
			end
		end
				
		s1 = io.read("*line")
		highscore = nil; highscore = {}
		for k=1,10 do
			s1 = io.read("*line")
			
			hsName = string.sub(s1,1,string.find(s1,",")-1)
			hsScore = string.sub(s1,string.find(s1,",")+1, string.len(s1))
			if k==1 then iTop = tonumber(hsScore) end
			
			highscore[k] = {}
			highscore[k] = {hsName, hsScore}
		
		end		
		
		io.close(h1)
		
		if (dip_Debug) then debugPrint ("Leaving readConfig()") end

end

function writeConfig()

	-- This function writes the values of the dip variables
	-- into an external data file.

	local sNewLine = "\n"
	local s1 = ""

	local h1 = io.output("singe/pussinboots/game.cfg")
	
	io.write("dip_Difficulty = " .. dip_Difficulty .. sNewLine)
	io.write("dip_GameType = " .. dip_GameType .. sNewLine)
	io.write("dip_StartLevel = " .. dip_StartLevel .. sNewLine)	
	io.write("dip_StartSegment = " .. dip_StartSegment .. sNewLine)	
	io.write("dip_Rewind = " .. dip_Rewind .. sNewLine)
	io.write("dip_CoinsPerCredit = " .. dip_CoinsPerCredit .. sNewLine)
	io.write("dip_LivesPerCredit = " .. dip_LivesPerCredit .. sNewLine)	

	if (dip_AllowContinue == true) then
		io.write("dip_AllowContinue = 1" .. sNewLine)
	else
		io.write("dip_AllowContinue = 0" .. sNewLine)
	end
	
	io.write("dip_LimitContinue = " .. dip_LimitContinue .. sNewLine)
	
	if (dip_ShowAction == true) then
		io.write("dip_ShowAction = 1" .. sNewLine)
	else
		io.write("dip_ShowAction = 0" .. sNewLine)
	end	
	
	if (dip_Kidmode == true) then
		io.write("dip_Kidmode = 1" .. sNewLine)
	else
		io.write("dip_Kidmode = 0" .. sNewLine)
	end

	if (dip_Movie == true) then
		io.write("dip_Movie = 1" .. sNewLine)
	else
		io.write("dip_Movie = 0" .. sNewLine)
	end

	if (dip_Debug == true) then
		io.write("dip_Debug = 1" .. sNewLine)
	else
		io.write("dip_Debug = 0" .. sNewLine)
	end
	
	io.write(sNewLine)	
	
	for k=1,10 do
		
		s1 = highscore[k][1] .. "," .. highscore[k][2]
		io.write(s1 .. sNewLine)
	
	end
	
	io.write(sNewLine)	
	io.close(h1)

end

function updateOpts(thisIndex)

	if (thisIndex == 1) then
	
		if not dip_Kidmode then

			dip_Difficulty  = dip_Difficulty  + 1
			
			if (dip_Difficulty  > 3) then
		
				dip_Difficulty = 0
		
			end		
		
		end	
		
	elseif (thisIndex == 2) then	
	
		if dip_GameType == 0 then
					
			if bAllowRandom == true then

				dip_GameType = 1

			elseif bAllowTier == true then

				dip_GameType = 2

			elseif bAllowMap == true then

				dip_GameType = 3

			else

				dip_GameType = 0
				dip_StartLevel = 1
				dip_StartSegment = 1
							
			end

		elseif dip_GameType == 1 then
					
			if bAllowTier == true then

				dip_GameType = 2

			elseif bAllowMap == true then

				dip_GameType = 3

			else

				dip_GameType = 0
				dip_StartLevel = 1
				dip_StartSegment = 1
							
			end

		elseif dip_GameType == 2 then
					
			if bAllowMap == true then

				dip_GameType = 3

			else

				dip_GameType = 0
				dip_StartLevel = 1
				dip_StartSegment = 1
							
			end

		elseif dip_GameType == 3 or dip_GameType == 4 then

			dip_GameType = 0
			dip_StartLevel = 1
			dip_StartSegment = 1
	
		end			

	elseif (thisIndex == 3) then	
	
		dip_StartLevel = dip_StartLevel + 1
		dip_GameType = 4
		dip_StartSegment = 1
	
		if (dip_StartLevel > finalstage) then
			
			dip_StartLevel = 1

		elseif (dip_StartLevel == 1) then	

			dip_GameType = 0
			dip_StartSegment = 1

		end

	elseif (thisIndex == 4) then	
	
		dip_StartSegment = dip_StartSegment + 1
		dip_GameType = 4
	
		if dip_StartLevel == 1 then
		
			if (dip_StartSegment > TotalScenesLevel01) then 

				dip_GameType = 0
				dip_StartSegment = 1	

			end

		elseif dip_StartLevel == 2 then

			if (dip_StartSegment > TotalScenesLevel02) then dip_StartSegment = 1	end

		elseif dip_StartLevel == 3 then

			if (dip_StartSegment > TotalScenesLevel03) then dip_StartSegment = 1	end

		elseif dip_StartLevel == 4 then

			if (dip_StartSegment > TotalScenesLevel04) then dip_StartSegment = 1	end

		elseif dip_StartLevel == 5 then

			if (dip_StartSegment > TotalScenesLevel05) then dip_StartSegment = 1	end

		elseif dip_StartLevel == 6 then

			if (dip_StartSegment > TotalScenesLevel06) then dip_StartSegment = 1 end

		elseif dip_StartLevel == 7 then

			if (dip_StartSegment > TotalScenesLevel07) then dip_StartSegment = 1	end

		elseif dip_StartLevel == 8 then

			if (dip_StartSegment > TotalScenesLevel08) then dip_StartSegment = 1	end

		elseif dip_StartLevel == 9 then

			if (dip_StartSegment > TotalScenesLevel09) then dip_StartSegment = 1	end

		elseif dip_StartLevel == 10 then

			if (dip_StartSegment > TotalScenesLevel10) then dip_StartSegment = 1	end
					
		end

	elseif (thisIndex == 5) then	
	
		dip_Rewind = dip_Rewind + 1
			
		if (dip_Rewind > 3) then
		
			dip_Rewind = 0
			
		end			

	elseif (thisIndex == 6) then
	
		dip_CoinsPerCredit = dip_CoinsPerCredit + 1
		
		if (dip_CoinsPerCredit > 3) then
		
			dip_CoinsPerCredit = 0
		
		end

	elseif (thisIndex == 7) then	
	
		dip_LivesPerCredit = dip_LivesPerCredit + 1
			
		if (dip_LivesPerCredit > 5) then
		
			dip_LivesPerCredit = 1
			
		end		
	
	elseif (thisIndex == 8) then
	
		dip_AllowContinue = not dip_AllowContinue 
	
	elseif (thisIndex == 9) then
	
		dip_LimitContinue  = dip_LimitContinue  + 1
		
		if (dip_LimitContinue  > 5) then
		
			dip_LimitContinue = 0
		
		end

	elseif (thisIndex == 10) then
	
		dip_ShowAction = not dip_ShowAction	

	elseif (thisIndex == 11) then
	
		dip_Kidmode = not dip_Kidmode
		
		if dip_Kidmode then

			dip_Difficulty = 0
			dip_Movie = false

		end

	elseif (thisIndex == 12) then
	
		dip_Movie = not dip_Movie
		
		if dip_Movie then

			dip_CoinsPerCredit = 0
			dip_Kidmode = false
			dip_Debug = false

		end
		
	elseif (thisIndex == 13) then		

		lvlState = lvlEnd

	end

end

function updateOptsMin(thisIndex)

	if (thisIndex == 1) then
	
		if (not dip_Kidmode) then 

			dip_Difficulty  = dip_Difficulty  - 1
			
			if (dip_Difficulty  < 0) then
		
				dip_Difficulty = 3
		
			end		
		
		end
		
	elseif (thisIndex == 2) then	
	
		if dip_GameType == 0 then
					
			if bAllowMap == true then

				dip_GameType = 3

			elseif bAllowTier == true then

				dip_GameType = 2

			elseif bAllowRandom == true then

				dip_GameType = 1

			else

				dip_GameType = 0
				dip_StartLevel = 1
				dip_StartSegment = 1
							
			end

		elseif dip_GameType == 3 then
					
			if bAllowTier == true then

				dip_GameType = 2

			elseif bAllowRandom == true then

				dip_GameType = 1

			else

				dip_GameType = 0
				dip_StartLevel = 1
				dip_StartSegment = 1
							
			end

		elseif dip_GameType == 2 then
					
			if bAllowRandom == true then

				dip_GameType = 1

			else

				dip_GameType = 0
				dip_StartLevel = 1
				dip_StartSegment = 1
							
			end

		elseif dip_GameType == 1 or dip_GameType == 4 then

			dip_GameType = 0
			dip_StartLevel = 1
			dip_StartSegment = 1
	
		end	

	elseif (thisIndex == 3) then	
	
		dip_StartLevel = dip_StartLevel - 1
		dip_GameType = 4
		dip_StartSegment = 1
	
		if (dip_StartLevel < 1) then
		
			dip_StartLevel = finalstage

		elseif (dip_StartLevel == 1) then

			dip_GameType = 0
			dip_StartSegment = 1
			
		end

	elseif (thisIndex == 4) then	
	
		dip_StartSegment = dip_StartSegment - 1
		dip_GameType = 4
	
		if dip_StartLevel == 1 then
		
			if (dip_StartSegment < 1) then 

				dip_StartSegment = TotalScenesLevel01	

			elseif (dip_StartSegment == 1) then
			
				dip_GameType = 0	

			end

		elseif dip_StartLevel == 2 then

			if (dip_StartSegment < 1) then dip_StartSegment = TotalScenesLevel02	end

		elseif dip_StartLevel == 3 then

			if (dip_StartSegment < 1) then dip_StartSegment = TotalScenesLevel03	end

		elseif dip_StartLevel == 4 then

			if (dip_StartSegment < 1) then dip_StartSegment = TotalScenesLevel04	end

		elseif dip_StartLevel == 5 then

			if (dip_StartSegment < 1) then dip_StartSegment = TotalScenesLevel05	end

		elseif dip_StartLevel == 6 then

			if (dip_StartSegment < 1) then dip_StartSegment = TotalScenesLevel06 end

		elseif dip_StartLevel == 7 then

			if (dip_StartSegment < 1) then dip_StartSegment = TotalScenesLevel07	end

		elseif dip_StartLevel == 8 then

			if (dip_StartSegment < 1) then dip_StartSegment = TotalScenesLevel08	end

		elseif dip_StartLevel == 9 then

			if (dip_StartSegment < 1) then dip_StartSegment = TotalScenesLevel09	end

		elseif dip_StartLevel == 10 then

			if (dip_StartSegment < 1) then dip_StartSegment = TotalScenesLevel10	end
					
		end

	elseif (thisIndex == 5) then	
	
		dip_Rewind = dip_Rewind - 1
			
		if (dip_Rewind < 0) then
		
			dip_Rewind = 3
			
		end			

	elseif (thisIndex == 6) then
	
		dip_CoinsPerCredit = dip_CoinsPerCredit - 1
		
		if (dip_CoinsPerCredit < 0) then
		
			dip_CoinsPerCredit = 3
		
		end

	elseif (thisIndex == 7) then	
	
		dip_LivesPerCredit = dip_LivesPerCredit - 1
			
		if (dip_LivesPerCredit < 1) then
		
			dip_LivesPerCredit = 5
			
		end		
	
	elseif (thisIndex == 8) then
	
		dip_AllowContinue = not dip_AllowContinue 
	
	elseif (thisIndex == 9) then
	
		dip_LimitContinue  = dip_LimitContinue  - 1
		
		if (dip_LimitContinue  < 0) then
		
			dip_LimitContinue = 5
		
		end

	elseif (thisIndex == 10) then
	
		dip_ShowAction = not dip_ShowAction	

	elseif (thisIndex == 11) then
	
		dip_Kidmode = not dip_Kidmode
		
		if dip_Kidmode then

			dip_Difficulty = 0
			dip_Movie = false

		end

	elseif (thisIndex == 12) then
	
		dip_Movie = not dip_Movie
		
		if dip_Movie then

			dip_CoinsPerCredit = 0
			dip_Kidmode = false
			dip_Debug = false

		end
		
	elseif (thisIndex == 13) then		

		lvlState = lvlEnd
		
	end

end

function printOpts()

	-- This function writes the options on the service menu screen.
	local k = 0
	local ypos = 0
	local fntx = OVLW-OVLW/3
	local smenu = {}; 
	
	smenu[1] = "Difficulty"
	smenu[2] = "Game Order"	
	smenu[3] = "Start at Level"
	smenu[4] = "Start at Scene"
	smenu[5] = "Death Rewind"
	smenu[6] = "Coins per Credit"
	smenu[7] = "Lives per Credit"
	smenu[8] = "Allow Continue?"
	smenu[9] = "Max Continues"
	smenu[10] = "Show Moves?"
	smenu[11] = "Kid Mode (only action)"
	smenu[12] = "Movie Mode (no play)"
	smenu[13] = "EXIT"	

	fontSelect(fontGame)	

	if bShowTitle then

		setFontColor(mycolor1)
		fontSelect(fontLCD)
		fontPrint(getMiddle("OPTIONS MENU"),LINEH*2, "OPTIONS MENU")
		setFontColor(mycolor3)		
		fontSelect(fontGame)
		fontPrint(getMiddle("PROGRAMMED BY KARIS VERSION 1.03"),OVLH-LINEH*2, "PROGRAMMED BY KARIS VERSION 1.03")
	
	end		
	
	for k=1,13 do
		
		ypos = OVLH/6 + k *LINEH*3.5
		if k == optSel then setFontColor(mycolor1) else setFontColor(mycolor2) end		
		
			
		if k == 13 then fontPrint(getMiddle(smenu[13]), OVLH/6 + (k+1) *LINEH*3.5, "EXIT") else fontPrint(OVLW/4, ypos, smenu[k]) end
		

		if (k == 1) then

			if dip_Difficulty == 0 then
				
				fontPrint(fntx, ypos, "EASY")

			elseif dip_Difficulty == 1 then
		
				fontPrint(fntx, ypos, "NORMAL")	

			elseif dip_Difficulty == 2 then
		
				fontPrint(fntx, ypos, "HARD")

			elseif dip_Difficulty == 3 then
		
				fontPrint(fntx, ypos, "EXTREME")
										
			end

		elseif (k == 2) then	

			if dip_GameType == 0 then
				
				fontPrint(fntx, ypos, "NORMAL")

			elseif dip_GameType == 1 then
				
				fontPrint(fntx, ypos, "RANDOM")

			elseif dip_GameType == 2 then
		
				fontPrint(fntx, ypos, "TIERS")	

			elseif dip_GameType == 3 then
		
				fontPrint(fntx, ypos, "MAP")

			elseif dip_GameType == 4 then
		
				fontPrint(fntx, ypos, "MANUAL")
										
			end
			
		elseif (k == 3) then	

			fontPrint(fntx, ypos, dip_StartLevel)	
		
		elseif (k == 4) then	

			fontPrint(fntx, ypos, dip_StartSegment)	

		elseif (k == 5) then		
		
			if dip_Rewind == 0 then
				
				fontPrint(fntx, ypos, "SCENE")
							
			elseif dip_Rewind == 1 then
		
				fontPrint(fntx, ypos, "LAST MOVE")
				
			elseif dip_Rewind == 2 then
		
				fontPrint(fntx, ypos, "NEXT MOVE")

			elseif dip_Rewind == 3 then
		
				fontPrint(fntx, ypos, "LEVEL")
												
			end
		
		elseif (k == 6) then

			if (dip_CoinsPerCredit == DOPT_FREEPLAY) then
				
				fontPrint(fntx,ypos, "FREE PLAY")
				
			else
			
				fontPrint(fntx,ypos, dip_CoinsPerCredit)
			end		
		
		elseif (k == 7) then		

			fontPrint(fntx, ypos, dip_LivesPerCredit)
		
		elseif (k == 8) then		
			
			if dip_AllowContinue then
			
				fontPrint(fntx, ypos, "YES")	
				
			
			else
			
				fontPrint(fntx, ypos, "NO")
				
			
			end
			
		elseif (k == 9) then		
		
			if dip_LimitContinue == 0 then
				
				fontPrint(fntx, ypos, "UNLIMITED")	
			
			else
		
				fontPrint(fntx, ypos, dip_LimitContinue)	
				
			end

		elseif (k == 10) then
		
			if dip_ShowAction then			
			
				fontPrint(fntx, ypos, "YES")	
				
			
			else
			
				fontPrint(fntx, ypos, "NO")	
				
			
			end	

		elseif (k == 11) then		
			
			if dip_Kidmode then
			
				fontPrint(fntx, ypos, "YES")	
				
			
			else
			
				fontPrint(fntx, ypos, "NO")
				
			
			end
				
		elseif (k == 12) then		
			
			if dip_Movie then
			
				fontPrint(fntx, ypos, "YES")	
				
			
			else
			
				fontPrint(fntx, ypos, "NO")
				
			
			end
					
		end

	end

end

function doServiceMenu()

	-- This is the main function for the service menu screen.
	
	local gunx = 42
	local optMax = 13

	if (lvlState == lvlSetup) then
	
		if (dip_Debug) then debugPrint ("Entering doServiceMenu()") end

		discSkipToFrame(frameOptions)
		discPause()		
		timerOFF()		
		optSel = 1
		readConfig()		
		bShowScore = false
		bShowLives = false
		bShowLvl = false
		bShowSkip = false		
		bShowCredits = false
		bShowGet = false
		bShowLCD = false
		bShowAction = false	
		bIgnoreJoy = false
		
		lvlState = lvlRunning
	
	elseif (lvlState == lvlRunning) then
	
		if (p1BUTTON1 or p1RIGHT) then
		
			p1BUTTON1 = false
			p1RIGHT = false
			soundPlay(sndcredit)
			updateOpts(optSel)	

		elseif (p1LEFT) then

			p1LEFT = false
			soundPlay(sndcredit)
			updateOptsMin(optSel)
			
		elseif (p1DOWN or p1UP) then
		
			
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end
				
			else
				
				if p1DOWN then 
					optSel = optSel + 1
					if (optSel > optMax) then optSel = 1 end
				elseif p1UP then 
					optSel = optSel - 1
					if (optSel < 1) then optSel = optMax end
				end
				
				soundPlay(sndcoin)
				if p1UP or p1DOWN or p1LEFT or p1RIGHT or p1BUTTON1 then
					bIgnoreJoy = true
					joyDelayON(0.200)
				end
				
				p1DOWN = false; p1UP = false	
				
			end
			
		end
		printOpts()

	elseif (lvlState == lvlEnd) then
	
		writeConfig()		
		gameflow = flow_GameInit
		if (dip_Debug) then debugPrint ("Leaving doServiceMenu()") end	

	end

end

function doSave()

	local gunx = 42
	local optMax = 4
	
	if (lvlState == lvlSetup) then
	
		if (dip_Debug) then debugPrint ("Entering doSave()") end

		discSkipToFrame(frameSave)
		discPause()		
		timerOFF()		
		optSel = 1
		readSave()		
		bShowScore = false
		bShowLives = false
		bShowLvl = false
		bshowScene = false
		bShowSkip = false		
		bShowCredits = false
		bShowLCD = false
		bShowGet = false
		bShowAction = false	
		bIgnoreJoy = false
		
		lvlState = lvlRunning
	
	elseif (lvlState == lvlRunning) then
	
		if (p1BUTTON1 or p1RIGHT) then
		
			p1BUTTON1 = false
			p1RIGHT = false
			soundPlay(sndcredit)
			updateSave(optSel)	

		elseif (p1LEFT) then

			p1LEFT = false
			soundPlay(sndcredit)
			updateSaveMin(optSel)	
			
		elseif (p1DOWN or p1UP) then
					
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end
				
			else
				
				if p1DOWN then 
					optSel = optSel + 1
					if (optSel > optMax) then optSel = 1 end
				elseif p1UP then 
					optSel = optSel - 1
					if (optSel < 1) then optSel = optMax end
				end
				
				soundPlay(sndcoin)
				if p1UP or p1DOWN or p1LEFT or p1RIGHT or p1BUTTON1 then
					bIgnoreJoy = true
					joyDelayON(0.200)
				end
				
				p1DOWN = false; p1UP = false	
				
			end
			
		end
		printSave()

	elseif (lvlState == lvlEnd) then
	
		gameflow = flow_GameInit
		if (dip_Debug) then debugPrint ("Leaving doSave()") end	

	end

end

function readSave()

	local s1
	local svLevel = ""
	local svScene = ""
	local svMove = ""
	local svLives = ""
	local svDif = ""
	local svScore = ""
	local l1 = ""
	local l2 = ""
	local l3 = ""
	local l4 = ""
	local l5 = ""
	local l6 = ""
	local l7 = ""
	local l8 = ""
	local l9 = ""
	local l10= ""
	local l11 = ""
	local l12 = ""
	local l13 = ""
	local l14 = ""
	local l15 = ""
	local l16 = ""
	local k = 0
	local h1 = io.input("singe/pussinboots/save.cfg")	

	slotsave = nil; slotsave = {}
	path1=""
	path2=""
	path3=""
	path4=""
	
	for k=1,4 do
	
		s1 = io.read("*line")
			
		svLevel = string.sub(s1,1,string.find(s1,",")-1)
		svScene = string.sub(s1,string.find(s1,",")+1, string.find(s1,"!")-1)
		svMove = string.sub(s1,string.find(s1,"!")+1, string.find(s1,"?")-1)
		svLives = string.sub(s1,string.find(s1,"?")+1, string.find(s1,";")-1)
		svDif = string.sub(s1,string.find(s1,";")+1, string.find(s1,":")-1)
		svScore = string.sub(s1,string.find(s1,":")+1, string.find(s1,"A")-1)
		l1 = string.sub(s1,string.find(s1,"A")+1, string.find(s1,"B")-1)
		l2 = string.sub(s1,string.find(s1,"B")+1, string.find(s1,"C")-1)
		l3 = string.sub(s1,string.find(s1,"C")+1, string.find(s1,"D")-1)
		l4 = string.sub(s1,string.find(s1,"D")+1, string.find(s1,"E")-1)
		l5 = string.sub(s1,string.find(s1,"E")+1, string.find(s1,"F")-1)
		l6 = string.sub(s1,string.find(s1,"F")+1, string.find(s1,"G")-1)
		l7 = string.sub(s1,string.find(s1,"G")+1, string.find(s1,"H")-1)
		l8 = string.sub(s1,string.find(s1,"H")+1, string.find(s1,"I")-1)
		l9 = string.sub(s1,string.find(s1,"I")+1, string.find(s1,"J")-1)
		l10 = string.sub(s1,string.find(s1,"J")+1, string.find(s1,"K")-1)
		l11 = string.sub(s1,string.find(s1,"K")+1, string.find(s1,"L")-1)
		l12 = string.sub(s1,string.find(s1,"L")+1, string.find(s1,"M")-1)
		l13 = string.sub(s1,string.find(s1,"M")+1, string.find(s1,"N")-1)
		l14 = string.sub(s1,string.find(s1,"N")+1, string.find(s1,"O")-1)
		l15 = string.sub(s1,string.find(s1,"O")+1, string.find(s1,"P")-1)
		l16 = string.sub(s1,string.find(s1,"P")+1, string.find(s1,"Q")-1)
		
		slotsave[k] = {}
		slotsave[k] = {svLevel, svScene, svMove, svLives, svDif, svScore, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16}

				
	end	

	for k=1,4 do
	
		s1 = io.read("*line")

		if k == 1 then path1=s1
		elseif k == 2 then path2=s1	
		elseif k == 3 then path3=s1	
		elseif k == 4 then path4=s1	end

	end		
		
	io.close(h1)
	if (dip_Debug) then debugPrint ("Leaving readSave()") end

end

function printSave()

	-- This function writes the options on the service menu screen.
	local k = 0
	local ypos = 0
	local fntx = OVLW-OVLW/2+OVLW/3
	local smenu = {}; 
	local s1 = ""
	local tempDif = ""
	
--	smenu[1] = ""
--	smenu[2] = ""
	smenu[3] = "PROCEED"
	smenu[4] = "EXIT"	

		

	if bShowTitle then

		setFontColor(mycolor1)
		fontSelect(fontLCD)
		fontPrint(getMiddle("LOAD/SAVE MENU"), LINEH*2, "LOAD/SAVE MENU")
		
	end		

	
	setFontColor(mycolor3)
	fontSelect(fontLCD)

	for k=1,4 do

		ypos = OVLH/5 + k *LINEH*5

		if 	tonumber(slotsave[k][1]) == 1 and (tonumber(slotsave[k][2]) == 1 or tonumber(slotsave[k][2]) == 0) and tonumber(slotsave[k][3]) == 1 then

			if k < 4 then

				s1 = k .. ". Empty"
			
			else
			
				s1 = "A. Empty"	

			end	
		
		else

			if tonumber(slotsave[k][5]) == 0 then
				
				tempDif = "Easy"

			elseif tonumber(slotsave[k][5]) == 1 then
		
				tempDif = "Normal"	

			elseif tonumber(slotsave[k][5]) == 2 then
		
				tempDif = "Hard"

			elseif tonumber(slotsave[k][5]) == 3 then
		
				tempDif = "Extreme"
							
			end
		


			if k < 4 then

				s1=k .. ". Lvl:" .. slotsave[k][1] .. ", Scn:" .. slotsave[k][2] .. ", Mov:" .. slotsave[k][3] .. ", Liv:" .. slotsave[k][4] .. ", " .. tempDif .. ", " .. slotsave[k][6]
	
			else
			
				s1="A. Lvl:" .. slotsave[k][1] .. ", Scn:" .. slotsave[k][2] .. ", Mov:" .. slotsave[k][3] .. ", Liv:" .. slotsave[k][4] .. ", " .. tempDif .. ", " .. slotsave[k][6]

			end	
			
		end

		fontPrint(OVLW/3.5, ypos, s1)

	end

	setFontColor(mycolor2)
	fontSelect(fontLCD)
	
	for k=1,4 do
		
		
		ypos = OVLH/5 + (k+6) *LINEH*5
		if k == optSel then setFontColor(mycolor1) else setFontColor(mycolor2) end		
		if k == 3 then fontPrint(getMiddle(smenu[3]), OVLH/5 + (k+6) *LINEH*5, "PROCEED") end
		if k == 4 then fontPrint(getMiddle(smenu[4]), OVLH/5 + (k+6) *LINEH*5, "EXIT") end
		
		if (k == 1) then

			if dip_Loadsave == 0 then
				
				fontPrint(getMiddle("LOAD"), ypos, "LOAD")

			elseif dip_Loadsave == 1 then
		
				fontPrint(getMiddle("SAVE"), ypos, "SAVE")	
				
			end
			
		elseif (k == 2) then	

			if dip_Slot == 1 then
				
				fontPrint(getMiddle("SLOT #1"), ypos, "SLOT #1")

			elseif dip_Slot == 2 then
		
				fontPrint(getMiddle("SLOT #2"), ypos, "SLOT #2")	

			elseif dip_Slot == 3 then
		
				fontPrint(getMiddle("SLOT #3"), ypos, "SLOT #3")

			elseif dip_Slot == 4 then
		
				fontPrint(getMiddle("AUTOSAVE"), ypos, "AUTOSAVE")
				
			end	
				
		end

	end

end

function updateSave(thisIndex)

	if (thisIndex == 1) then
	
		dip_Loadsave  = dip_Loadsave  + 1

		if (dip_Loadsave  > 1) then
		
			dip_Loadsave = 0
		
		end		

		if dip_Loadsave == 1 then

			dip_Slot = 1

		end
				

	elseif (thisIndex == 2) then	
	
		dip_Slot = dip_Slot + 1

		if (dip_Slot == 4) then
		
			dip_Loadsave = 0
			
		end
			
		if (dip_Slot > 4) then
		
			dip_Slot = 1
			
		end

	elseif (thisIndex == 3) then
	
		if dip_Loadsave == 0 then

			loadSave(dip_Slot)			

		else
			
			local k = dip_Slot

			slotsave[k][1] = iCurPos
			slotsave[k][2] = iSegPointer

			if bCheckMove then

				slotsave[k][3] = currentMove + 1
			
			else

				slotsave[k][3] = currentMove

			end

			slotsave[k][4] = iLiveSave
			slotsave[k][5] = dip_Difficulty
			slotsave[k][6] = iScore
			
			local i
			for i=1,16 do

				if levelMap[i] == true then

					slotsave[k][i+6] = "true"

				else 

					slotsave[k][i+6] = "false"	
	
				end

			end

			if iScore > iScoreSave then	writeSave(dip_Slot) end

			lvlState = lvlEnd
			
		end	
		
	elseif (thisIndex == 4) then		

		lvlState = lvlEnd
		
	end

end

function updateSaveMin(thisIndex)

	if (thisIndex == 1) then
	
		dip_Loadsave  = dip_Loadsave - 1

		if (dip_Loadsave  < 0) then
		
			dip_Loadsave = 1
		
		end		

		if dip_Loadsave == 1 then

			dip_Slot = 1

		end
				

	elseif (thisIndex == 2) then	
	
		dip_Slot = dip_Slot - 1

		if (dip_Slot == 4) then
		
			dip_Loadsave = 0
			
		end
			
		if (dip_Slot < 1) then
		
			dip_Slot = 4
			
		end

	elseif (thisIndex == 3) then
	
		if dip_Loadsave == 0 then

			loadSave(dip_Slot)			

		else
			
			local k = dip_Slot

			slotsave[k][1] = iCurPos
			slotsave[k][2] = iSegPointer

			if bCheckMove then

				slotsave[k][3] = currentMove + 1
			
			else

				slotsave[k][3] = currentMove

			end

			slotsave[k][4] = iLiveSave
			slotsave[k][5] = dip_Difficulty
			slotsave[k][6] = iScore
			
			local i
			for i=1,16 do

				if levelMap[i] == true then

					slotsave[k][i+6] = "true"

				else 

					slotsave[k][i+6] = "false"	
	
				end

			end

			if iScore > iScoreSave then	writeSave(dip_Slot) end

			lvlState = lvlEnd
			
		end	
		
	elseif (thisIndex == 4) then		

		lvlState = lvlEnd
		
	end

end

function writeSave(thisSlot)

	local k = 0
	local sNewLine = "\n"
	local s1 = ""
	local h1 = io.output("singe/pussinboots/save.cfg")
		
	for k=1,4 do
						
		s1 = slotsave[k][1] .. "," .. slotsave[k][2] .. "!" .. slotsave[k][3] .. "?" .. slotsave[k][4] .. ";" .. slotsave[k][5] .. ":" .. slotsave[k][6] .. "A" .. slotsave[k][7] .. "B" .. slotsave[k][8] .. "C" .. slotsave[k][9] .. "D" .. slotsave[k][10] .. "E" .. slotsave[k][11] .. "F" .. slotsave[k][12] .. "G" .. slotsave[k][13] .. "H" .. slotsave[k][14] .. "I" .. slotsave[k][15] .. "J" .. slotsave[k][16] .. "K" .. slotsave[k][17] .. "L" .. slotsave[k][18] .. "M" .. slotsave[k][19] .. "N" .. slotsave[k][20] .. "O" .. slotsave[k][21] .. "P" .. slotsave[k][22] .. "Q"
		io.write(s1 .. sNewLine)

	end
	
	for k=1,4 do

		if k == thisSlot then

			s1 = LvlOrder[1] .. "A" .. LvlOrder[2] .. "B" .. LvlOrder[3] .. "C" .. LvlOrder[4] .. "D" .. LvlOrder[5] .. "E" .. LvlOrder[6] .. "F" .. LvlOrder[7] .. "G" .. LvlOrder[8] .. "H" .. LvlOrder[9] .. "I" .. LvlOrder[10] .. "J" .. LvlOrder[11] .. "K" .. LvlOrder[12] .. "L" .. LvlOrder[13] .. "M" .. LvlOrder[14] .. "N" .. LvlOrder[15] .. "O" .. LvlOrder[16] .. "P"
			io.write(s1 .. sNewLine)
		
		else
			
			if k == 1 then s1=path1
			elseif k == 2 then s1=path2	
			elseif k == 3 then s1=path3	
			elseif k == 4 then s1=path4	end

			io.write(s1 .. sNewLine)	
		
		end	
			
	end	
	
	io.close(h1)

end

function loadSave(thisSlot)

	local s1
	local i = 0
	local j = 0
	local k = 0
	local h1 = io.input("singe/pussinboots/save.cfg")	

	for k=1,4 do
		s1 = io.read("*line")
	
		if k == thisSlot then
			
			i = k
			dip_StartLevel = tonumber(string.sub(s1,1,string.find(s1,",")-1))
			dip_StartSegment = tonumber(string.sub(s1,string.find(s1,",")+1, string.find(s1,"!")-1))
			currentMove = tonumber(string.sub(s1,string.find(s1,"!")+1, string.find(s1,"?")-1))
			iLives = tonumber(string.sub(s1,string.find(s1,"?")+1, string.find(s1,";")-1))
			dip_Difficulty = tonumber(string.sub(s1,string.find(s1,";")+1, string.find(s1,":")-1))
			iScore = tonumber(string.sub(s1,string.find(s1,":")+1, string.find(s1,"A")-1))
			if string.sub(s1,string.find(s1,"A")+1, string.find(s1,"B")-1) == "true" then levelMap[level01] = true end
			if string.sub(s1,string.find(s1,"B")+1, string.find(s1,"C")-1) == "true" then levelMap[level02] = true end
			if string.sub(s1,string.find(s1,"C")+1, string.find(s1,"D")-1) == "true" then levelMap[level03] = true end
			if string.sub(s1,string.find(s1,"D")+1, string.find(s1,"E")-1) == "true" then levelMap[level04] = true end
			if string.sub(s1,string.find(s1,"E")+1, string.find(s1,"F")-1) == "true" then levelMap[level05] = true end
			if string.sub(s1,string.find(s1,"F")+1, string.find(s1,"G")-1) == "true" then levelMap[level06] = true end
			if string.sub(s1,string.find(s1,"G")+1, string.find(s1,"H")-1) == "true" then levelMap[level07] = true end
			if string.sub(s1,string.find(s1,"H")+1, string.find(s1,"I")-1) == "true" then levelMap[level08] = true end
			if string.sub(s1,string.find(s1,"I")+1, string.find(s1,"J")-1) == "true" then levelMap[level09] = true end
			if string.sub(s1,string.find(s1,"J")+1, string.find(s1,"K")-1) == "true" then levelMap[level10] = true end
			if string.sub(s1,string.find(s1,"K")+1, string.find(s1,"L")-1) == "true" then levelMap[level11] = true end
			if string.sub(s1,string.find(s1,"L")+1, string.find(s1,"M")-1) == "true" then levelMap[level12] = true end
			if string.sub(s1,string.find(s1,"M")+1, string.find(s1,"N")-1) == "true" then levelMap[level13] = true end
			if string.sub(s1,string.find(s1,"N")+1, string.find(s1,"O")-1) == "true" then levelMap[level14] = true end
			if string.sub(s1,string.find(s1,"O")+1, string.find(s1,"P")-1) == "true" then levelMap[level15] = true end
			if string.sub(s1,string.find(s1,"P")+1, string.find(s1,"Q")-1) == "true" then levelMap[level16] = true end
									
		end
		
	end

	for k = 1,4 do

		s1 = io.read("*line")

		if k == i then
			
			LvlOrder[1] = tonumber(string.sub(s1,1,string.find(s1,"A")-1))
			LvlOrder[2] = tonumber(string.sub(s1,string.find(s1,"A")+1, string.find(s1,"B")-1))
			LvlOrder[3] = tonumber(string.sub(s1,string.find(s1,"B")+1, string.find(s1,"C")-1))
			LvlOrder[4] = tonumber(string.sub(s1,string.find(s1,"C")+1, string.find(s1,"D")-1))
			LvlOrder[5] = tonumber(string.sub(s1,string.find(s1,"D")+1, string.find(s1,"E")-1))
			LvlOrder[6] = tonumber(string.sub(s1,string.find(s1,"E")+1, string.find(s1,"F")-1))
			LvlOrder[7] = tonumber(string.sub(s1,string.find(s1,"F")+1, string.find(s1,"G")-1))
			LvlOrder[8] = tonumber(string.sub(s1,string.find(s1,"G")+1, string.find(s1,"H")-1))
			LvlOrder[9] = tonumber(string.sub(s1,string.find(s1,"H")+1, string.find(s1,"I")-1))
			LvlOrder[10] = tonumber(string.sub(s1,string.find(s1,"I")+1, string.find(s1,"J")-1))
			LvlOrder[11] = tonumber(string.sub(s1,string.find(s1,"J")+1, string.find(s1,"K")-1))
			LvlOrder[12] = tonumber(string.sub(s1,string.find(s1,"K")+1, string.find(s1,"L")-1))
			LvlOrder[13] = tonumber(string.sub(s1,string.find(s1,"L")+1, string.find(s1,"M")-1))
			LvlOrder[14] = tonumber(string.sub(s1,string.find(s1,"M")+1, string.find(s1,"N")-1))
			LvlOrder[15] = tonumber(string.sub(s1,string.find(s1,"N")+1, string.find(s1,"O")-1))
			LvlOrder[16] = tonumber(string.sub(s1,string.find(s1,"O")+1, string.find(s1,"P")-1))
			
									
		end

	end	

	if 	dip_StartLevel == 1 and dip_StartSegment == 1 and currentMove ==1 then

		lvlState = lvlEnd

		else

		startSave()

	end


	io.close(h1)
		
	if (dip_Debug) then debugPrint ("Leaving loadSave()") end
	
end

function autoSave(thisSlot)

	local i = 0

	readSave()
	slotsave[thisSlot][1] = iCurPos
	slotsave[thisSlot][2] = iSegPointer

	if bCheckMove then

		slotsave[thisSlot][3] = currentMove+1

	else
			
		slotsave[thisSlot][3] = currentMove

	end	

	
	slotsave[thisSlot][4] = iLiveSave
	slotsave[thisSlot][5] = dip_Difficulty
	slotsave[thisSlot][6] = iScore

	for i=1,16 do

		if levelMap[i] == true then

			slotsave[thisSlot][i+6] = "true"

		else 

			slotsave[thisSlot][i+6] = "false"	

	
		end

	end
	
	writeSave(thisSlot)	
		
end

