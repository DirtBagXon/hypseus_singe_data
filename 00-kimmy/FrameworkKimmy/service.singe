--[[

PROGRAM NAME:	KIMMY SCRIPT ENGINE
VERSION:		4.0
AUTHOR:			KARIS (2020/2024)

This file is part of KIMMY SCRIPT ENGINE.

	KIMMY SCRIPT ENGINE is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation.

	KIMMY SCRIPT ENGINE is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

	Thanks to Matthew P. Ownby, Scott Duensing, RDG, Bladescater, DirtBagXon.

]]--

optSel = 0
slotsave = nil;
local printRes = "No"

function readConfig()

	local s0 = ""
	local s1
	local hsDiff = ""
	local k = 0

	if altCfg == true then

		s0 = MYDIR .."/Cfg/game2.cfg"

	else

		s0 = MYDIR .."/Cfg/game.cfg"

	end	

	local h1 = io.input(s0)
	local s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		dip_Diffshow = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")

	if (s1 ~= nil and s1 ~= "") then
	
		dip_GameType = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")

	if (s1 ~= nil and s1 ~= "") then
	
		dip_PlayStyle = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
	
	if (s1 ~= nil and s1 ~= "") then
	
		dip_StartLevel = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
	
	if (s1 ~= nil and s1 ~= "") then
	
		dip_StartScene = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
	
	if (s1 ~= nil and s1 ~= "") then
	
		dip_Rewind = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
	
	if (s1 ~= nil and s1 ~= "") then

		dip_CoinsPerCredit = tonumber(string.sub(s1,string.find(s1,"=")+1))			
		
	end
	
	s1 = io.read("*line")
	
	if (s1 ~= nil and s1 ~= "") then
	
		dip_LivesPerCredit = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end
			
	s1 = io.read("*line")
	
	if (s1 ~= nil and s1 ~= "") then
	
		dip_LimitContinue = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
	
	if (s1 ~= nil and s1 ~= "") then
	
		dip_ShowAction = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
	
	if (s1 ~= nil and s1 ~= "") then
	
		dip_Extravid = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	if dip_Extravid == 0 then

		ShowResurrect = false 
		ShowSupDeath = false
		ShowLvlClear = false 

	elseif dip_Extravid == 1 then

		ShowResurrect = true
		ShowSupDeath = false 
		ShowLvlClear = false

	elseif dip_Extravid == 2 then

		ShowResurrect = false 
		ShowSupDeath = true
		ShowLvlClear = false 

	elseif dip_Extravid == 3 then

		ShowResurrect = false
		ShowSupDeath = false 
		ShowLvlClear = true

	elseif dip_Extravid == 4 then

		ShowResurrect = true
		ShowSupDeath = true 
		ShowLvlClear = false

	elseif dip_Extravid == 5 then

		ShowResurrect = true
		ShowSupDeath = false 
		ShowLvlClear = true

	elseif dip_Extravid == 6 then

		ShowResurrect = false
		ShowSupDeath = true 
		ShowLvlClear = true

	elseif dip_Extravid == 7 then

		ShowResurrect = true
		ShowSupDeath = true 
		ShowLvlClear = true	

	end

	s1 = io.read("*line")
	s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))
	
	if (s1 ~= nil and s1 ~= "") then
	
		if (s1 == 1) then
			dip_Hints = true
		else
			dip_Hints = false
		end
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		dip_Difficulty = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
	
	if (s1 ~= nil and s1 ~= "") then
	
		dip_MashtoRun = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		dip_Res = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
	s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))
	
	if (s1 ~= nil and s1 ~= "") then
	
		if (s1 == 1) then
			ShowLCD = true
		else
			ShowLCD = false
		end
	end

	s1 = io.read("*line")
	s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))
	
	if (s1 ~= nil and s1 ~= "") then
	
		if (s1 == 1) then
			ShowLevel = true
		else
			ShowLevel = false
		end
	end

	s1 = io.read("*line")
	s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))
	
	if (s1 ~= nil and s1 ~= "") then
	
		if (s1 == 1) then
			ShowTop = true
		else
			ShowTop = false
		end
	end

	if ShowTop then bShowTop = true end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		ScorePos = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		LivPos = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		CoinPos = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		mycolor1 = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		mycolor2 = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		fontSize = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	fontSave = fontSize

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		fontType = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
	s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))
	
	if (s1 ~= nil and s1 ~= "") then
	
		if (s1 == 1) then
			ShowTitle = true
		else
			ShowTitle = false
		end
	end


	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		dip_Model = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		dip_Display = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		dip_LivType = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then

		dip_ScType = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		mycolor3 = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		dip_FontQ = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		dip_HoldtoLoop = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		dip_MashRes = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then

		dip_Tilt = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
		
	if (s1 ~= nil and s1 ~= "") then
		
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))

		if (s1 == 1) then
			dip_Next = true
		else
			dip_Next = false
		end
		
	end

	s1 = io.read("*line")
		
	if (s1 ~= nil and s1 ~= "") then
		
		dip_OVLS = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")

	if (s1 ~= nil and s1 ~= "") then

		dip_Lang = tonumber(string.sub(s1,string.find(s1,"=")+1))

	end

	fontQuality(dip_FontQ)

	io.close(h1)

	svCol1 = mycolor1
	svCol2 = mycolor2
	svCol3 = mycolor3
	svFS = fontSize

	setSkin()

end

function writeConfig()

	-- This function writes the values of the dip variables
	-- into an external data file.

	local sNewLine = "\n"
	local s0 = ""
	local s1 = ""

	if altCfg == true then

		s0 = MYDIR .."/Cfg/game2.cfg"
			
	else

		s0 = MYDIR .."/Cfg/game.cfg"

	end

	local h1 = io.output(s0)
	
	io.write("dip_Diffshow = " .. dip_Diffshow .. sNewLine)
	io.write("dip_GameType = " .. dip_GameType .. sNewLine)
	io.write("dip_PlayStyle = " .. dip_PlayStyle .. sNewLine)
	io.write("dip_StartLevel = " .. dip_StartLevel .. sNewLine)	
	io.write("dip_StartScene = " .. dip_StartScene .. sNewLine)	
	io.write("dip_Rewind = " .. dip_Rewind .. sNewLine)
	io.write("dip_CoinsPerCredit = " .. dip_CoinsPerCredit .. sNewLine)
	io.write("dip_LivesPerCredit = " .. dip_LivesPerCredit .. sNewLine)	
	io.write("dip_LimitContinue = " .. dip_LimitContinue .. sNewLine)
	io.write("dip_ShowAction = " .. dip_ShowAction .. sNewLine)
	io.write("dip_Extravid = " .. dip_Extravid .. sNewLine)
	
	if (dip_Hints == true) then
		io.write("dip_Hints = 1" .. sNewLine)
	else
		io.write("dip_Hints = 0" .. sNewLine)
	end

	if (dip_Diffshow == 4) then	

		dip_Difficulty = 1 

	else

		dip_Difficulty = dip_Diffshow 

	end

	io.write("dip_Difficulty = " .. dip_Difficulty .. sNewLine)

	io.write("dip_MashtoRun = " .. dip_MashtoRun .. sNewLine)

	io.write("dip_Res = " .. dip_Res .. sNewLine)

	if (ShowLCD == true) then
		io.write("ShowLCD = 1" .. sNewLine)
	else
		io.write("ShowLCD = 0" .. sNewLine)
	end

	if (ShowLevel == true) then
		io.write("ShowLevel = 1" .. sNewLine)
	else
		io.write("ShowLevel = 0" .. sNewLine)
	end

	if (ShowTop == true) then
		io.write("ShowTop = 1" .. sNewLine)
	else
		io.write("ShowTop = 0" .. sNewLine)
	end

	io.write("ScorePos = " .. ScorePos .. sNewLine)
	io.write("LivPos = " .. LivPos .. sNewLine)
	io.write("CoinPos = " .. CoinPos .. sNewLine)
	io.write("mycolor1 = " .. mycolor1 .. sNewLine)
	io.write("mycolor2 = " .. mycolor2 .. sNewLine)
	io.write("fontSize = " .. fontSize .. sNewLine)
	io.write("fontType = " .. fontType .. sNewLine)

	if (ShowTitle == true) then
		io.write("ShowTitle = 1" .. sNewLine)
	else
		io.write("ShowTitle = 0" .. sNewLine)
	end

	io.write("dip_Model = " .. dip_Model .. sNewLine)
	io.write("dip_Display = " .. dip_Display .. sNewLine)
	io.write("dip_LivType = " .. dip_LivType .. sNewLine)
	io.write("dip_ScType = " .. dip_ScType .. sNewLine)
	io.write("mycolor3 = " .. mycolor3 .. sNewLine)
	io.write("dip_FontQ = " .. dip_FontQ .. sNewLine)
	io.write("dip_HoldtoLoop = " .. dip_HoldtoLoop .. sNewLine)
	io.write("dip_MashRes = " .. dip_MashRes .. sNewLine)
	io.write("dip_Tilt = " .. dip_Tilt .. sNewLine)

	if (dip_Next == true) then
		io.write("dip_Next = 1" .. sNewLine)
	else
		io.write("dip_Next = 0" .. sNewLine)
	end

	io.write("dip_OVLS = " .. dip_OVLS .. sNewLine)
	io.write("dip_Lang = " .. dip_Lang .. sNewLine)

	io.close(h1)

end

function setDefault()

	local s0 = ""
	local s1
	local hsName = ""
	local hsScore = ""
	local k = 0
	local h1

	s0 = BASEDIR .. "/FrameworkKimmy/Cfg/default.cfg"

	if altCfg == true then

		for file in lfs.dir(MYDIR.."/Cfg/") do

			if file == "default2.cfg" then s0 = MYDIR .."/Cfg/default2.cfg" end

		end

	else

		for file in lfs.dir(MYDIR.."/Cfg/") do

			if file == "default.cfg" then s0 = MYDIR .."/Cfg/default.cfg" end

		end

	end	

	local h1 = io.input(s0)
	local s1 = io.read("*line")	

	if (s1 ~= nil) then
	
		dip_Diffshow = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")

	if (s1 ~= nil) then
	
		dip_GameType = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")

	if (s1 ~= nil) then
	
		dip_PlayStyle = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
	
	if (s1 ~= nil) then
	
		dip_StartLevel = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
	
	if (s1 ~= nil) then
	
		dip_StartScene = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
	
	if (s1 ~= nil) then
	
		dip_Rewind = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
	
	if (s1 ~= nil) then

		dip_CoinsPerCredit = tonumber(string.sub(s1,string.find(s1,"=")+1))			
		
	end
	
	s1 = io.read("*line")
	
	if (s1 ~= nil) then
	
		dip_LivesPerCredit = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end
			
	s1 = io.read("*line")
	
	if (s1 ~= nil) then
	
		dip_LimitContinue = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
	
	if (s1 ~= nil) then
	
		dip_ShowAction = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
	
	if (s1 ~= nil) then
	
		dip_Extravid = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	if dip_Extravid == 0 then

		ShowResurrect = false 
		ShowSupDeath = false
		ShowLvlClear = false 

	elseif dip_Extravid == 1 then

		ShowResurrect = true
		ShowSupDeath = false 
		ShowLvlClear = false

	elseif dip_Extravid == 2 then

		ShowResurrect = false 
		ShowSupDeath = true
		ShowLvlClear = false 

	elseif dip_Extravid == 3 then

		ShowResurrect = false
		ShowSupDeath = false 
		ShowLvlClear = true

	elseif dip_Extravid == 4 then

		ShowResurrect = true
		ShowSupDeath = true 
		ShowLvlClear = false

	elseif dip_Extravid == 5 then

		ShowResurrect = true
		ShowSupDeath = false 
		ShowLvlClear = true

	elseif dip_Extravid == 6 then

		ShowResurrect = false
		ShowSupDeath = true 
		ShowLvlClear = true

	elseif dip_Extravid == 7 then

		ShowResurrect = true
		ShowSupDeath = true 
		ShowLvlClear = true	

	end

	s1 = io.read("*line")
	s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))
	
	if (s1 ~= nil) then
	
		if (s1 == 1) then
			dip_Hints = true
		else
			dip_Hints = false
		end
	end

	s1 = io.read("*line")	

	if (s1 ~= nil) then
	
		dip_Difficulty = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
	
	if (s1 ~= nil) then
	
		dip_MashtoRun = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil) then
	
		dip_Res = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
	s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))
	
	if (s1 ~= nil) then
	
		if (s1 == 1) then
			ShowLCD = true
		else
			ShowLCD = false
		end
	end

	s1 = io.read("*line")
	s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))
	
	if (s1 ~= nil) then
	
		if (s1 == 1) then
			ShowLevel = true
		else
			ShowLevel = false
		end
	end

	s1 = io.read("*line")
	s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))
	
	if (s1 ~= nil) then
	
		if (s1 == 1) then
			ShowTop = true
		else
			ShowTop = false
		end
	end

	if ShowTop then bShowTop = true end

	s1 = io.read("*line")	

	if (s1 ~= nil) then
	
		ScorePos = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil) then
	
		LivPos = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil) then
	
		CoinPos = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil) then
	
		mycolor1 = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil) then
	
		mycolor2 = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil) then
	
		fontSize = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	fontSave = fontSize

	s1 = io.read("*line")	

	if (s1 ~= nil) then
	
		fontType = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
	s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))
	
	if (s1 ~= nil) then
	
		if (s1 == 1) then
			ShowTitle = true
		else
			ShowTitle = false
		end
	end


	s1 = io.read("*line")	

	if (s1 ~= nil) then
	
		dip_Model = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil) then
	
		dip_Display = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil) then
	
		dip_LivType = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil) then

		dip_ScType = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil) then
	
		mycolor3 = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		dip_FontQ = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		dip_HoldtoLoop = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then
	
		dip_MashRes = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then

		dip_Tilt = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")
		
	if (s1 ~= nil and s1 ~= "") then
		
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))

		if (s1 == 1) then
			dip_Next = true
		else
			dip_Next = false
		end
		
	end

	s1 = io.read("*line")	

	if (s1 ~= nil and s1 ~= "") then

		dip_OVLS = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
	end

	s1 = io.read("*line")

	if (s1 ~= nil and s1 ~= "") then

		dip_Lang = tonumber(string.sub(s1,string.find(s1,"=")+1))

	else

		dip_Lang = 0

	end

	svCol1 = mycolor1
	svCol2 = mycolor2
	svCol3 = mycolor3
	svFS = fontSize

	setSkin()
	fontQuality(dip_FontQ)
	sprUnload()
	getRes()

	io.close(h1)

end

function doServiceMenu()

	-- This is the main function for the service menu screen.
	
	local optMax = 15

	SKINDIR = "/DEFAULT"
	LOOPDIR = BASEDIR .. "/FrameworkKimmy/Skin"..SKINDIR..MIDIRES

	if (lvlState == lvlSetup) then

		discSkipToFrame(frameOptions)
		discPause()		
		timerOFF()		
		optSel = 1
		readConfig()	
		bShowLvl = false
		bShowScene = false
		bShowScore = false
		bShowLives = false
		bShowLvl = false
		bShowSkip = false		
		bShowCredits = false
		bShowGet = false
		bShowLCD = false
		bShowAction = false	
		bShowNext = false
		bIgnoreJoy = false
		bShowWarnTilt = false
		bShowTilt = false

		if bInPlayExit then
			
			sType = dip_GameType
			sMode = dip_PlayStyle
			sLevel = iLevel
			sScene = iScene
			sLives = dip_LivesPerCredit
			dip_StartLevel = iLevel
			dip_StartScene = iScene

		end
		
		lvlState = lvlRunning
	
	elseif (lvlState == lvlRunning) then

		if (p1BUTTON1 or p1RIGHT) then
		
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end

			else
				
				p1BUTTON1 = false
				p1RIGHT = false
				soundPlay(sndcredit)
				updateOpts(optSel)	

				bIgnoreJoy = true
				joyDelayON(0.250)

			end	

		elseif (p1LEFT) then

			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end

			else

				p1LEFT = false
				soundPlay(sndcredit)
				updateOptsMin(optSel)

				bIgnoreJoy = true
				joyDelayON(0.250)
				
			end
			
		elseif (p1DOWN or p1UP) then
		
			
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end
				
			else
				
				if p1DOWN then 

					p1DOWN = false

					optSel = optSel + 1

					if (optSel > optMax) then optSel = 1 end
				
				elseif p1UP then 
					
					p1UP = false	
					optSel = optSel - 1
			
					if (optSel < 1) then optSel = optMax end
				
				end
				
				soundPlay(sndcoin)
				
				bIgnoreJoy = true
				joyDelayON(0.250)
							
			end
		
		elseif (p1START1) then

			p1START1 = false
			lvlState = lvlEnd		
		
		end

		printOpts()

	elseif (lvlState == lvlEnd) then
	
		writeConfig()	

		if bInPlayExit then

			bInPlayExit = false
			

			if sLevel == dip_StartLevel and sScene == dip_StartScene and sMode == dip_PlayStyle and sType == dip_GameType and sLives == dip_LivesPerCredit and dip_GameType <2 then
				
				loadSave(4)

			else
				
				setSkin()
				sprUnload()
				getRes()
				startGame()
			
			end
		
		else	

			bInPlayExit = false
			gameflow = flow_GameInit
			setSkin()
			sprUnload()
			scoreBezelReset()
			
		
		end

	end

end

function updateOpts(thisIndex)

	if (thisIndex == 1) then		

		optSelG = 1
		altState = lvlRunning
		currentLevel = levelGraphic

	elseif (thisIndex == 2) then	

		if dip_GameType  == 5 then

			dip_GameType = 6
			dip_Hints = false
			dip_Diffshow = 1

		elseif dip_GameType == 6 then

			if AllowNormal then

				dip_GameType = 0
						
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowLifeBar then

				dip_GameType = 1
				dip_Rewind = 0
				dip_Hints = false

				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end 

			elseif AllowPercent then

				dip_GameType = 2
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowSurvivor then

				dip_GameType = 3
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowDie then

				dip_GameType = 4
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowKid then

				dip_GameType = 5
				dip_Hints = false
				dip_Diffshow = 0

			end
	
		elseif dip_GameType == 0 then
					
			if AllowLifeBar then

				dip_GameType = 1
				dip_Rewind = 0
				dip_Hints = false

				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end 

			elseif AllowPercent then

				dip_GameType = 2
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowSurvivor then

				dip_GameType = 3
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowDie then

				dip_GameType = 4
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowKid then

				dip_GameType = 5
				dip_Hints = false
				dip_Diffshow = 0

			else 

				dip_GameType = 6
				dip_Hints = false
				dip_Diffshow = 1

			end

		elseif dip_GameType == 1 then

			if AllowPercent then

				dip_GameType = 2
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowSurvivor then

				dip_GameType = 3
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowDie then

				dip_GameType = 4
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowKid then

				dip_GameType = 5
				dip_Hints = false
				dip_Diffshow = 0

			else 

				dip_GameType = 6
				dip_Hints = false
				dip_Diffshow = 1

			end
			
		elseif dip_GameType == 2 then

			if AllowSurvivor then

				dip_GameType = 3
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowDie then

				dip_GameType = 4
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowKid then

				dip_GameType = 5
				dip_Hints = false
				dip_Diffshow = 0

			else 

				dip_GameType = 6
				dip_Hints = false
				dip_Diffshow = 1

			end

		elseif dip_GameType == 3 then

			if AllowDie then

				dip_GameType = 4
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowKid then

				dip_GameType = 5
				dip_Hints = false
				dip_Diffshow = 0

			else 

				dip_GameType = 6
				dip_Hints = false
				dip_Diffshow = 1

			end	

		elseif dip_GameType == 4 then

			if AllowKid then

				dip_GameType = 5
				dip_Hints = false
				dip_Diffshow = 0

			else 

				dip_GameType = 6
				dip_Hints = false
				dip_Diffshow = 1

			end	

		elseif dip_GameType == 5 then

			dip_GameType = 6
			dip_Hints = false
			dip_Diffshow = 1
					
		end	

	elseif (thisIndex == 3) then
		
		if dip_GameType <5 then

			dip_Diffshow  = dip_Diffshow  + 1

			if IngameDiffchoice then

				if (dip_Diffshow >4) then	dip_Diffshow = 0 end		
					
			else
						
				if (dip_Diffshow >3) then	dip_Diffshow = 0 end	

			end	

		end

	elseif (thisIndex == 4) then

		if dip_GameType ~= 2 and dip_GameType ~= 3 and dip_GameType ~= 5 and dip_StartLevel ~= 1000 then

			if dip_PlayStyle == 0 then

				dip_StartLevel = 1
				dip_StartScene = 1

				if AllowRandom == true then

					dip_PlayStyle = 1

				elseif AllowTier == true then

					dip_PlayStyle = 2

				elseif AllowMap == true then

					dip_PlayStyle = 3

				else

					dip_PlayStyle = 4

				end	

			elseif dip_PlayStyle == 1 then

				if AllowTier == true then

					dip_PlayStyle = 2

				elseif AllowMap == true then

					dip_PlayStyle = 3

				else

					dip_PlayStyle = 4
					
				end	

			elseif dip_PlayStyle == 2 then

				if AllowMap == true then

					dip_PlayStyle = 3

				else

					dip_PlayStyle = 4
									
				end	

			elseif dip_PlayStyle == 3 then

				dip_PlayStyle = 4

			elseif dip_PlayStyle == 4 then

				dip_PlayStyle = 0
				dip_StartLevel = 1
				dip_StartScene = 1
					
			end

		end
	
	elseif (thisIndex == 5) then	
		
		if dip_GameType ~= 6 and dip_GameType ~= 3 and dip_PlayStyle == 0 and dip_StartLevel ~= 1000 then	
		
			dip_StartLevel = dip_StartLevel + 1
			
			dip_StartScene = 1
		
			if (dip_StartLevel > finalstage) then
				
				dip_StartLevel = 1

			end
		
		end
			
	elseif (thisIndex == 6) then	
		
		if (dip_GameType == 0 or dip_GameType == 1 or dip_GameType == 4 or dip_GameType == 5) and dip_Rewind ~= 2 then

			dip_StartScene = dip_StartScene + 1

			if (dip_StartScene > Level[dip_StartLevel][TOTALSCENES]) then 

					dip_StartScene = 1	

			end

		end

	elseif (thisIndex == 7) then	
		
		if dip_GameType ~= 1 and dip_GameType ~= 2 and dip_GameType ~= 3 and dip_GameType ~= 5 then

			if not ForceRewind then dip_Rewind = dip_Rewind + 1 end

			if (dip_Rewind > 3) then
			
				dip_Rewind = 0
				
			end		

			if dip_Rewind == 2 then dip_StartScene = 1 end	

		end
			
	elseif (thisIndex == 8) then	
	
		if dip_GameType ~= 1 and dip_GameType ~= 2 and dip_GameType ~= 3 and dip_GameType ~= 5 then

			dip_LivesPerCredit = dip_LivesPerCredit + 1
			
				
			if (dip_LivesPerCredit > 5) then
			
				dip_LivesPerCredit = 1
				
			end		

		end
		
	elseif (thisIndex == 9) then

		if dip_GameType ~= 2 and dip_GameType ~= 3 and dip_GameType ~= 5 then
	
			dip_LimitContinue  = dip_LimitContinue  + 1
					
			if (dip_LimitContinue  > 4) then
			
				dip_LimitContinue = 0
			
			end

		end

	elseif (thisIndex == 10) then

		if dip_GameType ~= 5 then
	
			dip_ShowAction = dip_ShowAction + 1	
			
			if (dip_ShowAction > 5) then
			
				dip_ShowAction = 0
				
			end	

		end	

	elseif (thisIndex == 11) then
	
		if dip_GameType ~= 1 and dip_GameType ~= 2 and dip_GameType ~= 3 and dip_GameType ~= 5 and dip_GameType ~= 6 then dip_Hints = not dip_Hints end

	elseif (thisIndex == 12) then
	
		if dip_GameType <= 2 then dip_Next = not dip_Next end

	elseif (thisIndex == 13) then
	
		dip_Tilt = dip_Tilt + 1
				
		if (dip_Tilt > 4) then
		
			dip_Tilt = 0
		
		end
					
	elseif (thisIndex == 14) then	

		if bInPlayExit then

			setSkin()
			sprUnload()
			getRes()
			startGame()

		else 
		
			setDefault()

		end

	elseif (thisIndex == 15) then		

		lvlState = lvlEnd

	end

end

function updateOptsMin(thisIndex)

	if (thisIndex == 1) then		

		optSelP = 1
		altState2 = lvlRunning
		currentLevel = levelPerf

	elseif (thisIndex == 2) then	
	
		if dip_GameType == 0 then
					
			dip_GameType = 6
			dip_Hints = false
			dip_Diffshow = 1

		elseif dip_GameType == 6 then 

			if AllowKid then

				dip_GameType = 5
				dip_Hints = false
				dip_Diffshow = 0

			elseif AllowDie then

				dip_GameType = 4
				dip_Hints = false
			
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowSurvivor then

				dip_GameType = 3
				dip_Hints = false
			
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowPercent then

				dip_GameType = 2
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowLifeBar then

				dip_GameType = 1
				dip_Rewind = 0
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowNormal then

				dip_GameType = 0
						
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end
			
			end	

		elseif dip_GameType == 5 then

			if AllowDie then

				dip_GameType = 4
				dip_Hints = false
			
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowSurvivor then

				dip_GameType = 3
				dip_Hints = false
			
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowPercent then

				dip_GameType = 2
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowLifeBar then

				dip_GameType = 1
				dip_Rewind = 0
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowNormal then

				dip_GameType = 0
						
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			else 

				dip_GameType = 6
				dip_Hints = false
				dip_Diffshow = 1
			
			end	
				

		elseif dip_GameType == 4 then

			if AllowSurvivor then

				dip_GameType = 3
				dip_Hints = false
			
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowPercent then

				dip_GameType = 2
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowLifeBar then

				dip_GameType = 1
				dip_Rewind = 0
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowNormal then

				dip_GameType = 0
						
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			else 

				dip_GameType = 6
				dip_Hints = false
				dip_Diffshow = 1
			
			end	

		elseif dip_GameType == 3 then

			if AllowPercent then

				dip_GameType = 2
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowLifeBar then

				dip_GameType = 1
				dip_Rewind = 0
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowNormal then

				dip_GameType = 0
						
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			else 

				dip_GameType = 6
				dip_Hints = false
				dip_Diffshow = 1
			
			end	
	
		elseif dip_GameType == 2 then
					
			if AllowLifeBar then

				dip_GameType = 1
				dip_Rewind = 0
				dip_Hints = false
				
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			elseif AllowNormal then

				dip_GameType = 0
						
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			else 

				dip_GameType = 6
				dip_Hints = false
				dip_Diffshow = 1
			
			end	
			
		elseif dip_GameType == 1 then
					
			if AllowNormal then

				dip_GameType = 0
						
				if IngameDiffchoice then

					dip_Diffshow = 4

				else
					
					dip_Diffshow = 1
				
				end

			else 

				dip_GameType = 6
				dip_Hints = false
				dip_Diffshow = 1
			
			end	
			
		end

	elseif (thisIndex == 3) then
		
		if dip_GameType <5 then

			dip_Diffshow  = dip_Diffshow - 1

			if IngameDiffchoice then

				if (dip_Diffshow  < 0) then	dip_Diffshow = 4 end		
					
			else
						
				if (dip_Diffshow  < 0) then	dip_Diffshow = 3 end	

			end	

		end

	elseif (thisIndex == 4) then

		if dip_GameType ~= 2 and dip_GameType ~= 3 and dip_GameType ~= 5 and dip_StartLevel ~= 1000 then

			if dip_PlayStyle == 0 then

				dip_PlayStyle = 4

			elseif dip_PlayStyle == 4 then

				if AllowMap == true then

					dip_PlayStyle = 3

				elseif AllowTier == true then

					dip_PlayStyle = 2

				elseif AllowRandom == true then

					dip_PlayStyle = 1

				else

					dip_PlayStyle = 0
					dip_StartLevel = 1
					dip_StartScene = 1

				end	
			
			elseif dip_PlayStyle == 3 then

				if AllowTier == true then

					dip_PlayStyle = 2

				elseif AllowRandom == true then

					dip_PlayStyle = 1

				else

					dip_PlayStyle = 0
					dip_StartLevel = 1
					dip_StartScene = 1

				end	

			elseif dip_PlayStyle == 2 then

				if AllowRandom == true then

					dip_PlayStyle = 1

				else

					dip_PlayStyle = 0
					dip_StartLevel = 1
					dip_StartScene = 1

				end	

			elseif dip_PlayStyle == 1 then

				dip_PlayStyle = 0
				dip_StartLevel = 1
				dip_StartScene = 1

			end
	
		end
	
	elseif (thisIndex == 5) then	
	
		if dip_GameType ~= 6 and dip_GameType ~= 3 and dip_PlayStyle == 0 and dip_StartLevel ~= 1000 then

			dip_StartLevel = dip_StartLevel - 1
			
			dip_StartScene = 1
		
			if (dip_StartLevel < 1) then
			
				dip_StartLevel = finalstage

			elseif (dip_StartLevel == 1) then

				dip_StartScene = 1
				
			end

		end

	elseif (thisIndex == 6) then	
	
		if (dip_GameType == 0 or dip_GameType == 1 or dip_GameType == 4 or dip_GameType == 5) and dip_Rewind ~= 2 then

			dip_StartScene = dip_StartScene - 1

			if (dip_StartScene < 1) then 

				dip_StartScene = Level[dip_StartLevel][TOTALSCENES]

			end
			
		end

	elseif (thisIndex == 7) then	
		
		if dip_GameType ~= 1 and dip_GameType ~= 2 and dip_GameType ~= 3 and dip_GameType ~= 5 then

			if not ForceRewind then dip_Rewind = dip_Rewind - 1 end
						
			if (dip_Rewind < 0) then
			
				dip_Rewind = 3
				
			end	

			if dip_Rewind == 2 then dip_StartScene = 1 end

		end		

	elseif (thisIndex == 8) then	
		
		if dip_GameType ~= 1 and dip_GameType ~= 2 and dip_GameType ~= 3 and dip_GameType ~= 5 then

			dip_LivesPerCredit = dip_LivesPerCredit - 1
					
			if (dip_LivesPerCredit < 1) then
			
				dip_LivesPerCredit = 5
				
			end		

		end
	
	elseif (thisIndex == 9) then

		if dip_GameType ~= 2 and dip_GameType ~= 3 and dip_GameType ~= 5 then
	
			dip_LimitContinue  = dip_LimitContinue  - 1
			
			
			if (dip_LimitContinue < 0) then
			
				dip_LimitContinue = 4
			
			end

		end

	elseif (thisIndex == 10) then

		if dip_GameType ~= 5 then
	
			dip_ShowAction = dip_ShowAction - 1	
			
			if (dip_ShowAction < 0) then
			
				dip_ShowAction = 5
				
			end	

		end	

	elseif (thisIndex == 11) then
	
		if dip_GameType ~= 1 and dip_GameType ~= 2 and dip_GameType ~= 3 and dip_GameType ~= 5 and dip_GameType ~= 6 then dip_Hints = not dip_Hints end

	elseif (thisIndex == 12) then
	
		if dip_GameType <= 2 then dip_Next = not dip_Next end

	elseif (thisIndex == 13) then
	
		dip_Tilt = dip_Tilt - 1
				
		if (dip_Tilt < 0) then
		
			dip_Tilt = 4
		
		end
			
	elseif (thisIndex == 14) then		

		if bInPlayExit then

			setSkin()
			sprUnload()
			getRes()
			startGame()

		else 
		
			setDefault()

		end

	elseif (thisIndex == 15) then		

		lvlState = lvlEnd
		
	end

end

function printOpts()

	-- This function writes the options on the service menu screen.
	local k = 0
	local ypos = OVLH/7
	local fntx = OVLW/1.6
	local smenu = {}; 
	local TitLevel = " "
	local titH = 0
	local titLen = 0
	
	smenu[1] = "Game Options"
	smenu[2] = "Game Type"
	smenu[3] = "Difficulty"	
	smenu[4] = "Play Style"
	smenu[5] = "Start at Level"
	smenu[6] = "Start at Scene"
	smenu[7] = "Death Rewind"
	smenu[8] = "Lives per Credit"
	smenu[9] = "Allow Continue?"
	smenu[10] = "Show Moves"
	smenu[11] = "Show Hints"
	smenu[12] = "Show Next Input"
	smenu[13] = "Tilt Sensitivity"
	
	
	if bInPlayExit then

		smenu[14] = "Restart"
		smenu[15] = "BACK TO GAME"

	else 
		
		smenu[14] = "Default"
		smenu[15] = "EXIT"	

	end

	fontSelect(fontGame)
	spriteDraw(OVLW-KIMW-LINEH,LINEH,sprite[KIMMY])	

	if ShowTitle then

		setFontColor(mycolor2)
		fontSelect(fontTit)
		fontPrint(mt1,LINEH*1.5, "OPTIONS")
			
	end		

	fontSelect(fontGame)
	
	for k=1,15 do
		
		
		if k == optSel then setFontColor(mycolor2) else setFontColor(mycolor1) end		

		if k == 1 then 
			
			fontSelect(fontLCD)
			fontPrint(ml1, OVLH/8, smenu[1]) 
			spriteDraw(ml1 - SELCW - LINEW,OVLH/8+(2*h1-SELCH)/2,sprite[ARROWSELL]) 
			spriteDraw(OVLW/2 + (OVLW/2 - ml1) + LINEW,OVLH/8+(2*h1-SELCH)/2,sprite[ARROWSELR])
			fontSelect(fontGame)
			
		elseif k == 14 then 

			fontPrint(mg2, OVLH/8 + 13.5*LINEH*4.2, smenu[k])

		elseif k == 15 then 

			if bInPlayExit then

				fontPrint(mg9, OVLH/8 + 14.5*LINEH*4.2, smenu[k])

			else

				fontPrint(mg1, OVLH/8 + 14.5*LINEH*4.2, smenu[k])

			end

		else 

			fontPrint(OVLW/4.8, ypos, smenu[k]) 

		end
		
		if (k == 2) then	

			if dip_GameType == 0 then
				
				fontPrint(fntx, ypos, "Normal")

			elseif dip_GameType == 1 then
		
				fontPrint(fntx, ypos, "Life Bar")

			elseif dip_GameType == 2 then
		
				fontPrint(fntx, ypos, "Percent")

			elseif dip_GameType == 3 then
		
				fontPrint(fntx, ypos, "Survivor")

			elseif dip_GameType == 4 then
		
				fontPrint(fntx, ypos, "Die and Retry")

			elseif dip_GameType == 5 then
		
				fontPrint(fntx, ypos, "Kid (Action Only)")
				
			elseif dip_GameType == 6 then
		
				fontPrint(fntx, ypos, "Watch Movie")		
									
			end

		elseif (k == 3) then

			if dip_GameType == 5 then

				fontPrint(fntx, ypos, "N/A")

			else


				if dip_Diffshow == 0 then
					
					fontPrint(fntx, ypos, "Easy")

				elseif dip_Diffshow == 1 then
			
					fontPrint(fntx, ypos, "Normal")	

				elseif dip_Diffshow == 2 then
			
					fontPrint(fntx, ypos, "Hard")

				elseif dip_Diffshow == 3 then
			
					fontPrint(fntx, ypos, "Extreme")

				elseif dip_Diffshow == 4 then
			
					fontPrint(fntx, ypos, "In-Game")
											
				end
			
			end	

		elseif (k == 4) then

			if dip_GameType == 2 or dip_GameType == 3  or dip_GameType == 4 then

				fontPrint(fntx, ypos, "N/A")

			else

				if dip_PlayStyle == 0 then
					
					fontPrint(fntx, ypos, "Normal")

				elseif dip_PlayStyle == 1 then
			
					fontPrint(fntx, ypos, "Random")	

				elseif dip_PlayStyle == 2 then
			
					fontPrint(fntx, ypos, "Tiers")

				elseif dip_PlayStyle == 3 then
			
					fontPrint(fntx, ypos, "Map")

				elseif dip_PlayStyle == 4 then
			
					fontPrint(fntx, ypos, "Select")
											
				end
			
			end	

		elseif (k == 5) then

			if dip_PlayStyle > 0 or dip_GameType == 2 or dip_GameType == 3  or (dip_GameType == 4 and not bUnlockSel) then

				fontPrint(fntx, ypos, "N/A")

			else

				if dip_StartLevel ~= 1000 then 

					TitLevel = 	dip_StartLevel .. ". " .. Level[dip_StartLevel][TITLE]
				
				else
				
					TitLevel = 	Level[dip_StartLevel][TITLE]

				end	

				fontPrint(fntx, ypos, TitLevel)

			end
		
		elseif (k == 6) then

			if dip_PlayStyle > 0 or dip_GameType == 2 or dip_GameType == 3 or (dip_GameType == 4 and not bUnlockSel) then

				fontPrint(fntx, ypos, "N/A")

			else	

				fontPrint(fntx, ypos, dip_StartScene.." / "..Level[dip_StartLevel][TOTALSCENES])	

			end	

		elseif (k == 7) then	

			if dip_GameType == 2 or dip_GameType == 3 or dip_GameType == 4 or dip_GameType == 6 then

				fontPrint(fntx, ypos, "N/A")

			else

				if dip_Rewind == 0 then
				
					fontPrint(fntx, ypos, "Scene")
								
				elseif dip_Rewind == 1 then
			
					fontPrint(fntx, ypos, "Last Move")
					
				elseif dip_Rewind == 2 then
			
					fontPrint(fntx, ypos, "Level")

				elseif dip_Rewind == 3 then
			
					fontPrint(fntx, ypos, "Next Move")
													
				end

			end	
				
		elseif (k == 8) then

			if dip_GameType == 1 or dip_GameType == 2 or dip_GameType == 4 or dip_GameType == 6 then

				fontPrint(fntx, ypos, "N/A")

			elseif dip_GameType == 3 then

				fontPrint(fntx, ypos, "1")

			else

				fontPrint(fntx, ypos, dip_LivesPerCredit)

			end

		elseif (k == 9) then	

			if dip_GameType == 2 or dip_GameType == 4 or dip_GameType == 6 then

				fontPrint(fntx, ypos, "N/A")

			elseif dip_GameType == 3 then

				fontPrint(fntx, ypos, "None")

			else	
			
				if dip_LimitContinue == 0 then
					
					fontPrint(fntx, ypos, "None")

				elseif dip_LimitContinue == 4 then
					
					fontPrint(fntx, ypos, "Unlimited")	
				
				else
			
					fontPrint(fntx, ypos, dip_LimitContinue)	
					
				end

			end

		elseif (k == 10) then
			if dip_GameType == 6 then

				fontPrint(fntx, ypos, "N/A")

			else
		
				if dip_ShowAction == 0 then			
				
					fontPrint(fntx, ypos, "Nothing")	
								
				elseif dip_ShowAction == 1 then
				
					fontPrint(fntx, ypos, "Sound")	

				elseif dip_ShowAction == 2 then
				
					fontPrint(fntx, ypos, "Guess")

				elseif dip_ShowAction == 3 then
				
					fontPrint(fntx, ypos, "Cliff")

				elseif dip_ShowAction == 4 then
				
					fontPrint(fntx, ypos, "Normal")

				elseif dip_ShowAction == 5 then
				
					fontPrint(fntx, ypos, "Normal+Sound")
							
				end	

			end

		elseif (k == 11) then	

			if dip_GameType == 1 or dip_GameType == 2 or dip_GameType == 3 or dip_GameType == 5 or dip_GameType == 6 then

				fontPrint(fntx, ypos, "N/A")

			else	
			
				if dip_Hints then
				
					fontPrint(fntx, ypos, "Yes")	
					
				
				else
				
					fontPrint(fntx, ypos, "No")
					
				end
			
			end	

		elseif (k == 12) then	

			if dip_GameType >= 3 then

				fontPrint(fntx, ypos, "N/A")

			else	
			
				if dip_Next then
				
					fontPrint(fntx, ypos, "Yes")	
								
				else
				
					fontPrint(fntx, ypos, "No")
								
				end
			
			end	


		elseif (k == 13) then	

			if dip_Tilt == 0 then

				fontPrint(fntx, ypos, "No Tilt")

			elseif dip_Tilt == 1 then

				fontPrint(fntx, ypos, "Low")

			elseif dip_Tilt == 2 then

				fontPrint(fntx, ypos, "Medium")	

			elseif dip_Tilt == 3 then

				fontPrint(fntx, ypos, "High")

			elseif dip_Tilt == 4 then

				fontPrint(fntx, ypos, "Extreme")
					
			end
							
		end

		ypos = OVLH/7 + k *LINEH*4.2
		
	end

end

function doServiceMenuG()

	-- This is the main function for the service graphic screen.
	
	local optMaxG = 15

	if (altState == lvlSetup) then

		optSelG = 1
				
		altState = lvlRunning
	
	elseif (altState == lvlRunning) then
	
		if (p1BUTTON1 or p1RIGHT) then
		
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end

			else
				
				p1BUTTON1 = false
				p1RIGHT = false
				soundPlay(sndcredit)
				updateOptsG(optSelG)	

				bIgnoreJoy = true
				joyDelayON(0.250)

			end	

		elseif (p1LEFT) then

			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end

			else

				p1LEFT = false
				soundPlay(sndcredit)
				updateOptsMinG(optSelG)

				bIgnoreJoy = true
				joyDelayON(0.250)
				
			end
			
		elseif (p1DOWN or p1UP) then
		
			
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end
				
			else
				
				if p1DOWN then 

					p1DOWN = false
					optSelG = optSelG + 1
					if (optSelG > optMaxG) then optSelG = 1 end
				
				elseif p1UP then 
					
					p1UP = false	
					optSelG = optSelG - 1
					if (optSelG < 1) then optSelG = optMaxG end
				
				end
				
				soundPlay(sndcoin)
				
				bIgnoreJoy = true
				joyDelayON(0.250)
							
			end
		
		elseif (p1START1) then

			p1START1 = false
			altState = lvlEnd	
					
		end
		printOptsG()

	elseif (altState == lvlEnd) then
	
		writeConfig()	

		if bInPlayExit then

			bInPlayExit = false
			
			if sLevel == dip_StartLevel and sScene == dip_StartScene and sMode == dip_Playstyle and sType == dip_GameType and sLives == dip_LivesPerCredit then

				loadSave(4)

			else

				setSkin()
				sprUnload()
				getRes()
				startGame()

			end
		
		else	

			bInPlayExit = false
			gameflow = flow_GameInit
			setSkin()
			sprUnload()

		end

	end

end

function updateOptsG(thisIndex)

	if (thisIndex == 1) then		

		optSelP = 1
		altState2 = lvlRunning
		currentLevel = levelPerf

	elseif (thisIndex == 2) then

		if dip_GameType ~= 5 then
	
			if dip_Extravid == 0 then

				if (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 1

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) then

					dip_Extravid = 2

				elseif (offsetClearend - offsetClear > 1) then

					dip_Extravid = 3

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 4

				elseif (offsetClearend - offsetClear > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 5

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 6

				elseif (offsetGetReadyEnd - offsetGetReady > 1) and (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 7

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 1 then

				if (offsetSupDeathEnd - offsetSupDeath > 1) then

					dip_Extravid = 2

				elseif (offsetClearend - offsetClear > 1) then

					dip_Extravid = 3

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 4

				elseif (offsetClearend - offsetClear > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 5

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 6

				elseif (offsetGetReadyEnd - offsetGetReady > 1) and (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 7

				else

					dip_Extravid = 0

				end


			elseif dip_Extravid == 2 then

				if (offsetClearend - offsetClear > 1) then

					dip_Extravid = 3

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 4

				elseif (offsetClearend - offsetClear > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 5

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 6

				elseif (offsetGetReadyEnd - offsetGetReady > 1) and (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 7

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 3 then
				
				if (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 4

				elseif (offsetClearend - offsetClear > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 5

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 6

				elseif (offsetGetReadyEnd - offsetGetReady > 1) and (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 7

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 4 then

				if (offsetClearend - offsetClear > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 5

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 6

				elseif (offsetGetReadyEnd - offsetGetReady > 1) and (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 7

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 5 then

				if (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 6

				elseif (offsetGetReadyEnd - offsetGetReady > 1) and (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 7

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 6 then

				if (offsetGetReadyEnd - offsetGetReady > 1) and (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 7

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 7 then

				dip_Extravid = 0

			end

			if dip_Extravid == 0 then

				ShowResurrect = false 
				ShowSupDeath = false
				ShowLvlClear = false 

			elseif dip_Extravid == 1 then

				ShowResurrect = true
				ShowSupDeath = false 
				ShowLvlClear = false

			elseif dip_Extravid == 2 then

				ShowResurrect = false 
				ShowSupDeath = true
				ShowLvlClear = false 

			elseif dip_Extravid == 3 then

				ShowResurrect = false
				ShowSupDeath = false 
				ShowLvlClear = true

			elseif dip_Extravid == 4 then

				ShowResurrect = true
				ShowSupDeath = true 
				ShowLvlClear = false

			elseif dip_Extravid == 5 then

				ShowResurrect = true
				ShowSupDeath = false 
				ShowLvlClear = true

			elseif dip_Extravid == 6 then

				ShowResurrect = false
				ShowSupDeath = true 
				ShowLvlClear = true

			elseif dip_Extravid == 7 then

				ShowResurrect = true
				ShowSupDeath = true 
				ShowLvlClear = true	

			end	

		end

	elseif (thisIndex == 3) then
	
		ShowTitle = not ShowTitle

	elseif (thisIndex == 4) then
	
		ShowLCD = not ShowLCD

	elseif (thisIndex == 5) then
	
		ShowLevel = not ShowLevel

	elseif (thisIndex == 6) then
	
		ShowTop = not ShowTop

	elseif (thisIndex == 7) then
	
		ScorePos = ScorePos + 1

		if ScorePos > 4 then

			ScorePos = 1

		end

	elseif (thisIndex == 8) then

		dip_ScType = dip_ScType + 1

		if dip_ScType >9 then dip_ScType = 0 end

		
		setSkin()
		sprUnload()
		getRes()

	elseif (thisIndex == 9) then
	
		if numFont > 1 then

			fontType = fontType + 1
			if fontType >2 then fontType = 1 end

		end

		getFont()
		theMiddle()

	elseif (thisIndex == 10) then

		if fontType == 1 then

			fontSize = fontSize + 1

			if fontSize > 8 then
					
				fontSize = 0

			end

			fontSave = fontSize
			getFont()
			theMiddle()

		end

	elseif (thisIndex == 11) then
	
		mycolor1 = mycolor1 + 1

		if mycolor1 > 14 then mycolor1 = 1 end

		if mycolor1 == mycolor2 then mycolor1 = mycolor1 + 1 end	

		setFontColor(mycolor1)

	elseif (thisIndex == 12) then
	
		mycolor2 = mycolor2 + 1

		if mycolor2 > 14 then mycolor2 = 1 end

		if mycolor2 == mycolor1 then mycolor2 = mycolor2 + 1 end

		setFontColor(mycolor2)

	elseif (thisIndex == 13) then
	
		mycolor3 = mycolor3 + 1

		if mycolor3 > 14 then mycolor3 = 1 end

		setFontColor(mycolor3)
				
	elseif (thisIndex == 14) then		

		if bInPlayExit then

			setSkin()
			sprUnload()
			getRes()
			startGame()

		else 
		
			setDefault()

		end

	elseif (thisIndex == 15) then		

		altState = lvlEnd

	end

end

function updateOptsMinG(thisIndex)


	if (thisIndex == 1) then		

		optSel = 1
		lvlState = lvlRunning
		currentLevel = levelService

	elseif (thisIndex == 2) then
		
		if dip_GameType ~= 5 then

			if dip_Extravid == 0 then

				if (offsetGetReadyEnd - offsetGetReady > 1) and (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 7

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 6

				elseif (offsetClearend - offsetClear > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 5

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 4

				elseif (offsetClearend - offsetClear > 1) then

					dip_Extravid = 3

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) then

					dip_Extravid = 2

				elseif (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 1

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 1 then

				dip_Extravid = 0
				

			elseif dip_Extravid == 2 then

				if (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 1

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 3 then
				
				if (offsetSupDeathEnd - offsetSupDeath > 1) then

					dip_Extravid = 2

				elseif (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 1

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 4 then

				if (offsetClearend - offsetClear > 1) then

					dip_Extravid = 3

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) then

					dip_Extravid = 2

				elseif (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 1

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 5 then

				if (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 4

				elseif (offsetClearend - offsetClear > 1) then

					dip_Extravid = 3

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) then

					dip_Extravid = 2

				elseif (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 1

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 6 then

				if (offsetClearend - offsetClear > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 5

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 4

				elseif (offsetClearend - offsetClear > 1) then

					dip_Extravid = 3

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) then

					dip_Extravid = 2

				elseif (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 1

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 7 then

				if (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 6

				elseif (offsetClearend - offsetClear > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 5

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 4

				elseif (offsetClearend - offsetClear > 1) then

					dip_Extravid = 3

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) then

					dip_Extravid = 2

				elseif (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 1

				else

					dip_Extravid = 0

				end

			end

			if dip_Extravid == 0 then

				ShowResurrect = false 
				ShowSupDeath = false
				ShowLvlClear = false 

			elseif dip_Extravid == 1 then

				ShowResurrect = true
				ShowSupDeath = false 
				ShowLvlClear = false

			elseif dip_Extravid == 2 then

				ShowResurrect = false 
				ShowSupDeath = true
				ShowLvlClear = false 

			elseif dip_Extravid == 3 then

				ShowResurrect = false
				ShowSupDeath = false 
				ShowLvlClear = true

			elseif dip_Extravid == 4 then

				ShowResurrect = true
				ShowSupDeath = true 
				ShowLvlClear = false

			elseif dip_Extravid == 5 then

				ShowResurrect = true
				ShowSupDeath = false 
				ShowLvlClear = true

			elseif dip_Extravid == 6 then

				ShowResurrect = false
				ShowSupDeath = true 
				ShowLvlClear = true

			elseif dip_Extravid == 7 then

				ShowResurrect = true
				ShowSupDeath = true 
				ShowLvlClear = true	

			end	

		end

	elseif (thisIndex == 3) then
	
		ShowTitle = not ShowTitle

	elseif (thisIndex == 4) then
	
		ShowLCD = not ShowLCD

	elseif (thisIndex == 5) then
	
		ShowLevel = not ShowLevel

	elseif (thisIndex == 6) then
	
		ShowTop = not ShowTop

	elseif (thisIndex == 7) then
	
		ScorePos = ScorePos - 1

		if ScorePos < 1 then

			ScorePos = 4

		end

	elseif (thisIndex == 8) then

		dip_ScType = dip_ScType - 1

		if dip_ScType < 0 then dip_ScType = 9 end
		
		
		setSkin()
		sprUnload()
		getRes()

	elseif (thisIndex == 9) then
	
		if numFont > 1 then

			fontType = fontType - 1
			if fontType == 0 then fontType = 2 end

		end
		
		getFont()
		theMiddle()
		
	elseif (thisIndex == 10) then

		if fontType == 1 then

			fontSize = fontSize - 1

			if fontSize < -8 then
					
				fontSize = 0

			end

			fontSave = fontSize
			getFont()
			theMiddle()

		end

	elseif (thisIndex == 11) then
	
		mycolor1 = mycolor1 - 1

		if mycolor1 == mycolor2 then mycolor1 = mycolor1 - 1 end	

		if mycolor1 < 1 then mycolor1 = 14 end

		setFontColor(mycolor1)

	elseif (thisIndex == 12) then
	
		mycolor2 = mycolor2 - 1

		if mycolor2 == mycolor1 then mycolor2 = mycolor2 -1 end	

		if mycolor2 < 1 then mycolor2 = 14 end

		setFontColor(mycolor2)

	elseif (thisIndex == 13) then
	
		mycolor3 = mycolor3 - 1

		if mycolor3 < 1 then mycolor3 = 14 end

		setFontColor(mycolor3)

	elseif (thisIndex == 14) then		

		if bInPlayExit then

			setSkin()
			sprUnload()
			getRes()
			startGame()

		else 
		
			setDefault()

		end

	elseif (thisIndex == 15) then		

		altState = lvlEnd

	end

end

function printOptsG()

	-- This function writes the options on the service menu screen.
	local k = 0
	local ypos = OVLH/7
	local fntx = OVLW/1.6
	local smenu = {}; 
	local TitLevel = " "
	local titH = 0
	local titLen = 0
	
	smenu[1] = "Graphic Options"
	smenu[2] = "Extra Movies"
	smenu[3] = "Show Titles"
	smenu[4] = "Show LCD"
	smenu[5] = "Show Level"
	smenu[6] = "Show Top Score"
	smenu[7] = "Score/Lives Pos."
	smenu[8] = "Skin"
	smenu[9] = "Font"
	smenu[10] = "Adjust Font Size"
	smenu[11] = "UI Color"
	smenu[12] = "UI Highlight"
	smenu[13] = "Score Color"
	
	if bInPlayExit then

		smenu[14] = "Restart"
		smenu[15] = "BACK TO GAME"

	else 
		
		smenu[14] = "Default"
		smenu[15] = "EXIT"	

	end

	fontSelect(fontGame)
	spriteDraw(OVLW-KIMW-LINEH,LINEH,sprite[KIMMY])		

	if ShowTitle then

		setFontColor(mycolor2)
		fontSelect(fontTit)
		fontPrint(mt1,LINEH*1.5, "OPTIONS")
			
	end		

	fontSelect(fontGame)
	
	for k=1,15 do
				
		if k == optSelG then setFontColor(mycolor2) else setFontColor(mycolor1) end		
				
			
		if k == 1 then 

			fontSelect(fontLCD)
			fontPrint(ml2, OVLH/8, smenu[1]) 
			spriteDraw(ml2 - SELCW - LINEW,OVLH/8+(2*h1-SELCH)/2,sprite[ARROWSELL]) 
			spriteDraw(OVLW/2 + (OVLW/2 - ml2) + LINEW,OVLH/8+(2*h1-SELCH)/2,sprite[ARROWSELR])
			fontSelect(fontGame)

		elseif k == 14 then 

			fontPrint(mg2, OVLH/8 + 13.5*LINEH*4.2,  smenu[14])

		elseif k == 15 then 

			if bInPlayExit then

				fontPrint(mg9, OVLH/8 + 14.5*LINEH*4.2, smenu[k])

			else

				fontPrint(mg1, OVLH/8 + 14.5*LINEH*4.2, smenu[k])

			end

		else 

			fontPrint(OVLW/4.8, ypos, smenu[k])
		
		end
		
		if (k == 2) then

			if dip_GameType == 6 then

				fontPrint(fntx, ypos, "N/A")

			else
		
				if dip_Extravid == 0 then			
				
					fontPrint(fntx, ypos, "None")	
								
				elseif dip_Extravid == 1 then
				
					fontPrint(fntx, ypos, "Ready")	

				elseif dip_Extravid == 2 then
				
					fontPrint(fntx, ypos, "Death")

				elseif dip_Extravid == 3 then
				
					fontPrint(fntx, ypos, "Clear")

				elseif dip_Extravid == 4 then
				
					fontPrint(fntx, ypos, "Ready/Death")

				elseif dip_Extravid == 5 then
				
					fontPrint(fntx, ypos, "Ready/Clear")

				elseif dip_Extravid == 6 then
				
					fontPrint(fntx, ypos, "Clear/Death")

				elseif dip_Extravid == 7 then
				
					fontPrint(fntx, ypos, "All")
							
				end	

			end

		elseif (k == 3) then

			if ShowTitle then
				
				fontPrint(fntx, ypos, "Yes")	
				
			else
			
				fontPrint(fntx, ypos, "No")
				
			
			end

		elseif (k == 4) then

			if ShowLCD then
				
				fontPrint(fntx, ypos, "Yes")	
				
			
			else
			
				fontPrint(fntx, ypos, "No")
				
			
			end

		elseif (k == 5) then

			if ShowLevel then
				
				fontPrint(fntx, ypos, "Yes")	
				
			
			else
			
				fontPrint(fntx, ypos, "No")
					
			end

		elseif (k == 6) then

			if ShowTop then
				
				fontPrint(fntx, ypos, "Yes")	
				
			
			else
			
				fontPrint(fntx, ypos, "No")
				
			
			end

		elseif (k == 7) then

			if ScorePos == 1 then
				
				fontPrint(fntx, ypos, "TOP")
				LivPos = 1

			elseif ScorePos == 2 then
			
				fontPrint(fntx, ypos, "BOTTOM")
				LivPos = 2

			elseif ScorePos == 3 then
			
				fontPrint(fntx, ypos, "TOP/BOTTOM")
				LivPos = 2

			elseif ScorePos == 4 then 
			
				fontPrint(fntx, ypos, "BOTTOM/TOP")
				LivPos = 1
							
			end

		elseif (k == 8) then

			if dip_ScType == 0 then

				fontPrint(fntx, ypos, "Game")

			elseif dip_ScType == 1 then

				fontPrint(fntx, ypos, "Default")
				
			elseif dip_ScType == 2 then

				fontPrint(fntx, ypos, "Wood")

			elseif dip_ScType == 3 then

				fontPrint(fntx, ypos, "Comics")

			elseif dip_ScType == 4 then

				fontPrint(fntx, ypos, "Steam")

			elseif dip_ScType == 5 then

				fontPrint(fntx, ypos, "Gal")

			elseif dip_ScType == 6 then

				fontPrint(fntx, ypos, "Titan")

			elseif dip_ScType == 7 then

				fontPrint(fntx, ypos, "Cliff")

			elseif dip_ScType == 8 then

				fontPrint(fntx, ypos, "Sci Fi")

			elseif dip_ScType == 9 then

				fontPrint(fntx, ypos, "Custom")
					  
			end

		elseif (k == 9) then

			if numFont == 1 then

			 	fontPrint(fntx, ypos, "N/A")

			 else	

				if fontType == 1 then
					
					fontPrint(fntx, ypos, "#1")	
						
				else
				
					fontPrint(fntx, ypos, "#2")
								
				end

			end

		elseif (k == 10) then

			fontPrint(fntx, ypos, fontSize)	
									
		elseif (k == 11) then

			if mycolor1 == 1 then
				
				fontPrint(fntx, ypos, "WHITE")	
							
			elseif mycolor1 == 2 then
			
				fontPrint(fntx, ypos, "RED")

			elseif mycolor1 == 3 then
			
				fontPrint(fntx, ypos, "BLUE")

			elseif mycolor1 == 4 then
			
				fontPrint(fntx, ypos, "YELLOW")

			elseif mycolor1 == 5 then
			
				fontPrint(fntx, ypos, "GREEN")

			elseif mycolor1 == 6 then
			
				fontPrint(fntx, ypos, "ORANGE")

			elseif mycolor1 == 7 then
			
				fontPrint(fntx, ypos, "PINK")

			elseif mycolor1 == 8 then
			
				fontPrint(fntx, ypos, "PURPLE")

			elseif mycolor1 == 10 then
			
				fontPrint(fntx, ypos, "LIGHTGREEN")

			elseif mycolor1 == 11 then
			
				fontPrint(fntx, ypos, "LIGHTPINK")

			elseif mycolor1 == 12 then
			
				fontPrint(fntx, ypos, "GREY")

			elseif mycolor1 == 13 then
			
				fontPrint(fntx, ypos, "BLACK")

			elseif mycolor1 == 14 then
			
				fontPrint(fntx, ypos, "MISC")
						
			end

		elseif (k == 12) then

			if mycolor2 == 1 then
				
				fontPrint(fntx, ypos, "WHITE")	
							
			elseif mycolor2 == 2 then
			
				fontPrint(fntx, ypos, "RED")

			elseif mycolor2 == 3 then
			
				fontPrint(fntx, ypos, "BLUE")

			elseif mycolor2 == 4 then
			
				fontPrint(fntx, ypos, "YELLOW")

			elseif mycolor2 == 5 then
			
				fontPrint(fntx, ypos, "GREEN")

			elseif mycolor2 == 6 then
			
				fontPrint(fntx, ypos, "ORANGE")

			elseif mycolor2 == 7 then
			
				fontPrint(fntx, ypos, "PINK")

			elseif mycolor2 == 8 then
			
				fontPrint(fntx, ypos, "PURPLE")

			elseif mycolor2 == 9 then
			
				fontPrint(fntx, ypos, "LIGHTBLUE")

			elseif mycolor2 == 10 then
			
				fontPrint(fntx, ypos, "LIGHTGREEN")

			elseif mycolor2 == 11 then
			
				fontPrint(fntx, ypos, "LIGHTPINK")

			elseif mycolor2 == 12 then
			
				fontPrint(fntx, ypos, "GREY")

			elseif mycolor2 == 13 then
			
				fontPrint(fntx, ypos, "BLACK")

			elseif mycolor2 == 14 then
			
				fontPrint(fntx, ypos, "MISC")

			end

		elseif (k == 13) then

			if mycolor3 == 1 then
				
				fontPrint(fntx, ypos, "WHITE")	
							
			elseif mycolor3 == 2 then
			
				fontPrint(fntx, ypos, "RED")

			elseif mycolor3 == 3 then
			
				fontPrint(fntx, ypos, "BLUE")

			elseif mycolor3 == 4 then
			
				fontPrint(fntx, ypos, "YELLOW")

			elseif mycolor3 == 5 then
			
				fontPrint(fntx, ypos, "GREEN")

			elseif mycolor3 == 6 then
			
				fontPrint(fntx, ypos, "ORANGE")

			elseif mycolor3 == 7 then
			
				fontPrint(fntx, ypos, "PINK")

			elseif mycolor3 == 8 then
			
				fontPrint(fntx, ypos, "PURPLE")

			elseif mycolor3 == 9 then
			
				fontPrint(fntx, ypos, "LIGHTBLUE")

			elseif mycolor3 == 10 then
			
				fontPrint(fntx, ypos, "LIGHTGREEN")

			elseif mycolor3 == 11 then
			
				fontPrint(fntx, ypos, "LIGHTPINK")

			elseif mycolor3 == 12 then
			
				fontPrint(fntx, ypos, "GREY")

			elseif mycolor3 == 13 then
			
				fontPrint(fntx, ypos, "BLACK")

			elseif mycolor3 == 14 then
			
				fontPrint(fntx, ypos, "MISC")
						
			end 
						
		end

		ypos = OVLH/7 + k *LINEH*4.2

	end

end

function doServiceMenuP()

	-- This is the main function for the service graphic screen.
	
	local optMaxP = 15
	
	if (altState2 == lvlSetup) then

		optSelP = 1
				
		altState2 = lvlRunning
	
	elseif (altState2 == lvlRunning) then
	
		if (p1RIGHT or p1BUTTON1) then
		
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end

			else
				
				if optSelP == 12 and p1BUTTON1 and printRes == "Yes" then

					resetScore()
					soundPlay(sndvictory)
					p1BUTTON1 = false
					bIgnoreJoy = true
					joyDelayON(0.250)
					printRes = "No"


				elseif optSelP == 12 and p1BUTTON1 and printRes == "No" then 

					p1BUTTON1 = false
					soundPlay(sndwrong)
					bIgnoreJoy = true
					joyDelayON(0.250)

				else	

					p1BUTTON1 = false
					p1RIGHT = false
					soundPlay(sndcredit)
					updateOptsP(optSelP)	

					bIgnoreJoy = true
					joyDelayON(0.250)

				end

			end	

		elseif (p1LEFT) then

			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end

			else

				p1LEFT = false
				soundPlay(sndcredit)
				updateOptsMinP(optSelP)

				bIgnoreJoy = true
				joyDelayON(0.250)
				
			end
			
		elseif (p1DOWN or p1UP) then
		
			
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end
				
			else
				
				if p1DOWN then 

					p1DOWN = false
					optSelP = optSelP + 1
					if (optSelP > optMaxP) then optSelP = 1 end
				
				elseif p1UP then 
					
					p1UP = false	
					optSelP = optSelP - 1
					if (optSelP < 1) then optSelP = optMaxP end
				
				end
				
				soundPlay(sndcoin)
				
				bIgnoreJoy = true
				joyDelayON(0.250)
							
			end
		
		elseif (p1START1) then

			p1START1 = false
			altState2 = lvlEnd	
		
		end
		printOptsP()

	elseif (altState2 == lvlEnd) then
	
		writeConfig()	

		if bInPlayExit then

			bInPlayExit = false
			
			if sLevel == dip_StartLevel and sScene == dip_StartScene and sMode == dip_Playstyle and sType == dip_GameType and sLives == dip_LivesPerCredit then

				loadSave(4)

			else

				setSkin()
				sprUnload()
				getRes()
				startGame()

			end
		
		else	

			bInPlayExit = false
			gameflow = flow_GameInit
			setSkin()
			sprUnload()
			

		end

	end

end



function updateOptsP(thisIndex)

	if (thisIndex == 1) then		

		optSel = 1
		lvlState = lvlRunning
		currentLevel = levelService

	elseif (thisIndex == 2) then	
	
		dip_Res = dip_Res + 1

		if dip_Res > 2 then dip_Res = 0 end
		sprUnload()
		getRes()
	
	elseif (thisIndex == 3) then	

		dip_Display = dip_Display + 1

		if dip_Display >3 then dip_Display = 0 end

	elseif (thisIndex == 4) then	

		dip_LivType = dip_LivType + 1

		if dip_LivType > 2 then dip_LivType = 0 end
				
	elseif (thisIndex == 5) then
	
		dip_FontQ = dip_FontQ + 1

		if dip_FontQ > 3 then

			dip_FontQ = 1

		end

		fontQuality(dip_FontQ)

	elseif (thisIndex == 6) then
	
		if dip_GameType ~= 5 and dip_GameType ~= 6 then
	
			dip_MashtoRun = dip_MashtoRun + 1	
			
			if (dip_MashtoRun > 3) then
			
				dip_MashtoRun = 0
				
			end	

		end	

	elseif (thisIndex == 7) then
	
		if dip_GameType ~= 5 and dip_GameType ~= 6 then
	
			dip_HoldtoLoop = dip_HoldtoLoop + 1	
			
			if (dip_HoldtoLoop > 1) then
			
				dip_HoldtoLoop = 0
				
			end	

		end

	elseif (thisIndex == 8) then
	
		dip_MashRes = dip_MashRes + 1	
			
			if (dip_MashRes > 15) then
			
				dip_MashRes = 0

			end

	elseif (thisIndex == 9) then
	
		dip_CoinsPerCredit = dip_CoinsPerCredit + 1
				
		if (dip_CoinsPerCredit > 3) then
		
			dip_CoinsPerCredit = 0
		
		end	

	elseif (thisIndex == 10) then
	
		CoinPos = CoinPos + 1

		if CoinPos > 2 then

			CoinPos = 1

		end

	elseif (thisIndex == 11) then
	
		dip_OVLS = dip_OVLS + 1

		if dip_OVLS > 2 then

			dip_OVLS = 0

		end	

	elseif (thisIndex == 12) then
	
		if printRes == "Yes" then 

			printRes = "No"

		elseif printRes == "No" then

			printRes = "Yes"
	
		end

	elseif (thisIndex == 13) then

		if LangOpt ~= nil then

			dip_Lang = dip_Lang + 1

			if dip_Lang >= #LangOpt then

				dip_Lang = 0

			end

			setLang()

		end
	
	elseif (thisIndex == 14) then		

		if bInPlayExit then

			setSkin()
			sprUnload()
			getRes()
			startGame()

		else 
		
			setDefault()

		end

	elseif (thisIndex == 15) then		

		altState2 = lvlEnd

	end

end

function updateOptsMinP(thisIndex)


	if (thisIndex == 1) then		

		optSelG = 1
		altState = lvlRunning
		currentLevel = levelGraphic

	elseif (thisIndex == 2) then	
	
		dip_Res = dip_Res - 1

		if dip_Res < 0 then dip_Res = 2 end

		sprUnload()
		getRes()
	
	elseif (thisIndex == 3) then	

		
		dip_Display = dip_Display - 1

		if dip_Display < 0 then dip_Display = 3 end
		
	elseif (thisIndex == 4) then

		dip_LivType = dip_LivType - 1

		if dip_LivType < 0 then dip_LivType = 2 end
				
	elseif (thisIndex == 5) then
	
		dip_FontQ = dip_FontQ - 1

		if dip_FontQ < 1 then

			dip_FontQ = 3

		end

		fontQuality(dip_FontQ)

	elseif (thisIndex == 6) then
	
		if dip_GameType ~= 5 and dip_GameType ~= 6 then
	
			dip_MashtoRun = dip_MashtoRun - 1	
			
			if (dip_MashtoRun < 0) then
			
				dip_MashtoRun = 3
				
			end	

		end	

	elseif (thisIndex == 7) then
	
		if dip_GameType ~= 5 and dip_GameType ~= 6 then
	
			dip_HoldtoLoop = dip_HoldtoLoop - 1	
			
			if (dip_HoldtoLoop < 0) then
			
				dip_HoldtoLoop = 1
				
			end	

		end	

	elseif (thisIndex == 8) then
	
		dip_MashRes = dip_MashRes - 1	
			
			if (dip_MashRes < 0) then
			
				dip_MashRes = 15
				
			end	

	elseif (thisIndex == 9) then
	
		dip_CoinsPerCredit = dip_CoinsPerCredit - 1
				
		if (dip_CoinsPerCredit < 0) then
		
			dip_CoinsPerCredit = 3
		
		end

	elseif (thisIndex == 10) then
	
		CoinPos = CoinPos - 1

		if CoinPos < 1 then

			CoinPos = 2

		end

	elseif (thisIndex == 11) then
	
		dip_OVLS = dip_OVLS - 1

		if dip_OVLS < 0 then

			dip_OVLS = 2

		end	

	elseif (thisIndex == 12) then
	
		if printRes == "Yes" then 

			printRes = "No"

		elseif printRes == "No" then

			printRes = "Yes"
	
		end

	elseif (thisIndex == 13) then

		if LangOpt ~= nil then

			dip_Lang = dip_Lang + 1

			if dip_Lang >= #LangOpt then

				dip_Lang = 0

			end

			setLang()

		end

	elseif (thisIndex == 14) then		

		if bInPlayExit then

			setSkin()
			sprUnload()
			getRes()
			startGame()

		else 
		
			setDefault()

		end

	elseif (thisIndex == 15) then		

		altState2 = lvlEnd

	end

end


function printOptsP()

	-- This function writes the options on the service menu screen.
	local k = 0
	local ypos = OVLH/7
	local fntx = OVLW/1.6
	local smenu = {}; 
	local tmenu = {}; 
	local TitLevel = " "
	local titLen = 0
	local titH = 0
		
	smenu[1] = "Extra Options"
	smenu[2] = "Overlay Res"
	smenu[3] = "Display Score/Lives"
	smenu[4] = "Lives Type"
	smenu[5] = "Font Quality"
	smenu[6] = "Stick Mash with"
	smenu[7] = "Loop Action as"
	smenu[8] = "Mash Resistance"
	smenu[9] = "Coins per Credit"
	smenu[10] = "Coin Position"
	smenu[11] = "Overlay Size"
	smenu[12] = "Reset Score ?"
	smenu[13] = "Audio Track"
	
	if bInPlayExit then

		smenu[14] = "Restart"
		smenu[15] = "BACK TO GAME"

	else 
		
		smenu[14] = "Default"
		smenu[15] = "EXIT"	

	end
	
	fontSelect(fontGame)
	spriteDraw(OVLW-KIMW-LINEH,LINEH,sprite[KIMMY])		

	if ShowTitle then

		setFontColor(mycolor2)
		fontSelect(fontTit)
		fontPrint(mt1,LINEH*1.5, "OPTIONS")
			
	end		

	fontSelect(fontGame)
	
	for k=1,15 do
				
		if k == optSelP then setFontColor(mycolor2) else setFontColor(mycolor1) end		
					
		if k == 1 then 
			
			fontSelect(fontLCD)	
			fontPrint(ml3, OVLH/8, smenu[1]) 
			spriteDraw(ml3 - SELCW - LINEW,OVLH/8+(2*h1-SELCH)/2,sprite[ARROWSELL]) 
			spriteDraw(OVLW/2 + (OVLW/2 - ml3) + LINEW,OVLH/8+(2*h1-SELCH)/2,sprite[ARROWSELR])
			fontSelect(fontGame)

		elseif k == 14 then 

			fontPrint(mg2, OVLH/8 + 13.5*LINEH*4.2, smenu[k])

		elseif k == 15 then 

			if bInPlayExit then

				fontPrint(mg9, OVLH/8 + 14.5*LINEH*4.2, smenu[k])

			else

				fontPrint(mg1, OVLH/8 + 14.5*LINEH*4.2, smenu[k])

			end

		else 

			fontPrint(OVLW/4.8, ypos, smenu[k])
					
		end
		
		if (k == 2) then	

			if dip_Res == 0 then

				fontPrint(fntx, ypos, "Hi")

			elseif dip_Res == 1 then

				fontPrint(fntx, ypos, "Lo")

			elseif dip_Res == 2 then

				fontPrint(fntx, ypos, "Ultra Lo")
			
			end

		elseif (k == 3) then

			if dip_Display == 0 then

				fontPrint(fntx, ypos, "Game")

			elseif dip_Display == 1 then

				fontPrint(fntx, ypos, "Death")

			elseif dip_Display == 2 then

				fontPrint(fntx, ypos, "Ready/Panel")

			elseif dip_Display == 3 then

				fontPrint(fntx, ypos, "Pause")
				
			end

		elseif (k == 4) then

			if dip_LivType == 0 then

				fontPrint(fntx, ypos, "Picture")

			elseif dip_LivType == 1 then

				fontPrint(fntx, ypos, "Number")

			elseif dip_LivType == 2 then

				fontPrint(fntx, ypos, "Bar")
				
			end
			
		elseif (k == 5) then

			if dip_FontQ == 1 then

				fontPrint(fntx, ypos, "Solid")

			elseif dip_FontQ == 2 then

				fontPrint(fntx, ypos, "Shaded")

			elseif dip_FontQ == 3 then

				fontPrint(fntx, ypos, "Blended")
			
			end

		elseif (k == 6) then

			if dip_GameType == 5 or dip_GameType == 6 then

				fontPrint(fntx, ypos, "N/A")

			else	

				if dip_MashtoRun == 0 then
					
					fontPrint(fntx, ypos, "Good Hand")	
									
				elseif dip_MashtoRun == 1 then
					
					fontPrint(fntx, ypos, "Bad Hand")

				elseif dip_MashtoRun == 2 then
					
					fontPrint(fntx, ypos, "Two Buttons")

				elseif dip_MashtoRun == 3 then
					
					fontPrint(fntx, ypos, "Basic Mash")
								
				end

			end

		elseif (k == 7) then

			if dip_GameType == 5 or dip_GameType == 6 then

				fontPrint(fntx, ypos, "N/A")

			else	

				if dip_HoldtoLoop == 0 then
					
					fontPrint(fntx, ypos, "Loop")	
									
				elseif dip_HoldtoLoop == 1 then
					
					fontPrint(fntx, ypos, "Hold")
								
				end

			end

		elseif (k == 8) then

			fontPrint(fntx, ypos, dip_MashRes.." / 15")

		elseif (k == 9) then

			if (dip_CoinsPerCredit == DOPT_FREEPLAY) then
				
				fontPrint(fntx,ypos, "Free Play")
				
			else
			
				fontPrint(fntx,ypos, dip_CoinsPerCredit)

			end	

		elseif (k == 10) then
		
			if CoinPos == 1 then
				
				fontPrint(fntx, ypos, "MIDDLE")	
				
			
			else
			
				fontPrint(fntx, ypos, "BOTTOM")
				
			
			end	

		elseif (k == 11) then
		
			if dip_OVLS == 0 then
				
				fontPrint(fntx, ypos, "Full")	
				
			
			elseif dip_OVLS == 1 then
			
				fontPrint(fntx, ypos, "4/3")

			elseif dip_OVLS == 2 then
			
				fontPrint(fntx, ypos, "3/2")
						
			end	

		elseif (k == 12) then

			fontPrint(fntx, ypos, printRes)

		elseif (k == 13) then

			if LangOpt == nil then

				fontPrint(fntx, ypos, "Unspecified")
			else

				fontPrint(fntx, ypos, LangOpt[dip_Lang+1][1])
			end

		end

		ypos = OVLH/7 + k *LINEH*4.2


	end

end



function doSave()

	local gunx = 42
	local optMax = 4
	
	if (lvlState == lvlSetup) then
	
		discSkipToFrame(frameSave)
		discPause()		
		timerOFF()		
		optSel = 1
		readSave()		
		bShowScore = false
		bShowLives = false
		bShowLvl = false
		bhowScene = false
		bShowSkip = false		
		bShowCredits = false
		bShowLCD = false
		bShowGet = false
		bShowAction = false	
		bShowNext = false
		bIgnoreJoy = false
		
		lvlState = lvlRunning
	
	elseif (lvlState == lvlRunning) then
	
		if (p1BUTTON1 or p1RIGHT) then
		
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end
				
			else

				p1BUTTON1 = false
				p1RIGHT = false
				soundPlay(sndcredit)
				updateSave(optSel)
				bIgnoreJoy = true
				joyDelayON(0.250)	

			end

		elseif (p1LEFT) then

			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end
				
			else

				p1LEFT = false
				soundPlay(sndcredit)
				updateSaveMin(optSel)
				bIgnoreJoy = true
				joyDelayON(0.250)

			end	
			
		elseif (p1DOWN or p1UP) then
					
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end
				
			else
				
				if p1DOWN then 
					
					p1DOWN = false
					optSel = optSel + 1
					if (optSel > optMax) then optSel = 1 end
				
				elseif p1UP then 
					
					p1UP = false
					optSel = optSel - 1
					if (optSel < 1) then optSel = optMax end
				
				end
				
				soundPlay(sndcoin)
				bIgnoreJoy = true
				joyDelayON(0.250)

			end

		elseif (p1START1) then

			p1START1 = false
			lvlState = lvlEnd
			currentLevel = levelService
			
		end
		printSave()

	elseif (lvlState == lvlEnd) then

		if bInPlayExit then

			bInPlayExit = false
			loadSave(4)
		
		else
			
			bInPlayExit = false
			gameflow = flow_GameInit
			sprUnload()

		end

	end

end

function readSave()

	local s0
	local svLevel = ""
	local svScene = ""
	local svMove = ""
	local svLives = ""
	local svDif = ""
	local svScore = ""
	local svGtype = ""
	local svScPlay = ""
	local svScDeath = ""
	local svTotDeath = ""
	local k = 0
	local h1

	slotsave = nil; slotsave = {}

	for k = 1,6 do

		if altCfg == true and k < 5 then

			s0 = MYDIR.."/Cfg/s" .. k .. "0.cfg"

		else

			s0 = MYDIR.."/Cfg/s" .. k .. ".cfg"

		end	

		if k == 1 then

			h1 = io.input(s0)
			s1 = io.read("*line")

			svLevel = string.sub(s1,1,string.find(s1,",")-1)
			svScene = string.sub(s1,string.find(s1,",")+1, string.find(s1,"!")-1)
			svMove = string.sub(s1,string.find(s1,"!")+1, string.find(s1,"?")-1)
			svLives = string.sub(s1,string.find(s1,"?")+1, string.find(s1,";")-1)
			svDif = string.sub(s1,string.find(s1,";")+1, string.find(s1,":")-1)
			svScore = string.sub(s1,string.find(s1,":")+1, string.find(s1,"A")-1)
			svGtype = string.sub(s1,string.find(s1,"A")+1, string.find(s1,"B")-1)
			svScPlay = string.sub(s1,string.find(s1,"B")+1, string.find(s1,"C")-1)
			svScDeath = string.sub(s1,string.find(s1,"C")+1, string.find(s1,"D")-1)
			svTotDeath = string.sub(s1,string.find(s1,"D")+1, string.find(s1,"E")-1)
			svPlayStyle = string.sub(s1,string.find(s1,"E")+1, string.find(s1,"F")-1)
			
			slotsave[1] = {svLevel, svScene, svMove, svLives, svDif, svScore, svGtype, svScPlay, svScDeath, svTotDeath,svPlayStyle}
		
			io.close(h1)

		elseif k == 2 then

			h1 = io.input(s0)
			s1 = io.read("*line")

			svLevel = string.sub(s1,1,string.find(s1,",")-1)
			svScene = string.sub(s1,string.find(s1,",")+1, string.find(s1,"!")-1)
			svMove = string.sub(s1,string.find(s1,"!")+1, string.find(s1,"?")-1)
			svLives = string.sub(s1,string.find(s1,"?")+1, string.find(s1,";")-1)
			svDif = string.sub(s1,string.find(s1,";")+1, string.find(s1,":")-1)
			svScore = string.sub(s1,string.find(s1,":")+1, string.find(s1,"A")-1)
			svGtype = string.sub(s1,string.find(s1,"A")+1, string.find(s1,"B")-1)
			svScPlay = string.sub(s1,string.find(s1,"B")+1, string.find(s1,"C")-1)
			svScDeath = string.sub(s1,string.find(s1,"C")+1, string.find(s1,"D")-1)
			svTotDeath = string.sub(s1,string.find(s1,"D")+1, string.find(s1,"E")-1)
			svPlayStyle = string.sub(s1,string.find(s1,"E")+1, string.find(s1,"F")-1)
			
			slotsave[2] = {svLevel, svScene, svMove, svLives, svDif, svScore, svGtype, svScPlay, svScDeath, svTotDeath,svPlayStyle}
		
			io.close(h1)

		elseif k == 3 then

			h1 = io.input(s0)
			s1 = io.read("*line")

			svLevel = string.sub(s1,1,string.find(s1,",")-1)
			svScene = string.sub(s1,string.find(s1,",")+1, string.find(s1,"!")-1)
			svMove = string.sub(s1,string.find(s1,"!")+1, string.find(s1,"?")-1)
			svLives = string.sub(s1,string.find(s1,"?")+1, string.find(s1,";")-1)
			svDif = string.sub(s1,string.find(s1,";")+1, string.find(s1,":")-1)
			svScore = string.sub(s1,string.find(s1,":")+1, string.find(s1,"A")-1)
			svGtype = string.sub(s1,string.find(s1,"A")+1, string.find(s1,"B")-1)
			svScPlay = string.sub(s1,string.find(s1,"B")+1, string.find(s1,"C")-1)
			svScDeath = string.sub(s1,string.find(s1,"C")+1, string.find(s1,"D")-1)
			svTotDeath = string.sub(s1,string.find(s1,"D")+1, string.find(s1,"E")-1)
			svPlayStyle = string.sub(s1,string.find(s1,"E")+1, string.find(s1,"F")-1)
			
			slotsave[3] = {svLevel, svScene, svMove, svLives, svDif, svScore, svGtype, svScPlay, svScDeath, svTotDeath,svPlayStyle}
			
			io.close(h1)

		elseif k == 4 then

			h1 = io.input(s0)
			s1 = io.read("*line")

			svLevel = string.sub(s1,1,string.find(s1,",")-1)
			svScene = string.sub(s1,string.find(s1,",")+1, string.find(s1,"!")-1)
			svMove = string.sub(s1,string.find(s1,"!")+1, string.find(s1,"?")-1)
			svLives = string.sub(s1,string.find(s1,"?")+1, string.find(s1,";")-1)
			svDif = string.sub(s1,string.find(s1,";")+1, string.find(s1,":")-1)
			svScore = string.sub(s1,string.find(s1,":")+1, string.find(s1,"A")-1)
			svGtype = string.sub(s1,string.find(s1,"A")+1, string.find(s1,"B")-1)
			svScPlay = string.sub(s1,string.find(s1,"B")+1, string.find(s1,"C")-1)
			svScDeath = string.sub(s1,string.find(s1,"C")+1, string.find(s1,"D")-1)
			svTotDeath = string.sub(s1,string.find(s1,"D")+1, string.find(s1,"E")-1)
			svPlayStyle = string.sub(s1,string.find(s1,"E")+1, string.find(s1,"F")-1)
			
			slotsave[4] = {svLevel, svScene, svMove, svLives, svDif, svScore, svGtype, svScPlay, svScDeath, svTotDeath,svPlayStyle}
			
			io.close(h1)

		elseif k == 5 then

			h1 = io.input(s0)
			s1 = io.read("*line")

			svLevel = string.sub(s1,1,string.find(s1,",")-1)
			svScene = string.sub(s1,string.find(s1,",")+1, string.find(s1,"!")-1)
			svMove = string.sub(s1,string.find(s1,"!")+1, string.find(s1,"?")-1)
			svLives = string.sub(s1,string.find(s1,"?")+1, string.find(s1,";")-1)
			svDif = string.sub(s1,string.find(s1,";")+1, string.find(s1,":")-1)
			svScore = string.sub(s1,string.find(s1,":")+1, string.find(s1,"A")-1)
			svGtype = string.sub(s1,string.find(s1,"A")+1, string.find(s1,"B")-1)
			svScPlay = string.sub(s1,string.find(s1,"B")+1, string.find(s1,"C")-1)
			svScDeath = string.sub(s1,string.find(s1,"C")+1, string.find(s1,"D")-1)
			svTotDeath = string.sub(s1,string.find(s1,"D")+1, string.find(s1,"E")-1)
			svPlayStyle = string.sub(s1,string.find(s1,"E")+1, string.find(s1,"F")-1)
			
			slotsave[5] = {svLevel, svScene, svMove, svLives, svDif, svScore, svGtype, svScPlay, svScDeath, svTotDeath,svPlayStyle}
			
			io.close(h1)

		elseif k == 6 then

			h1 = io.input(s0)
			s1 = io.read("*line")

			svLevel = string.sub(s1,1,string.find(s1,",")-1)
			svScene = string.sub(s1,string.find(s1,",")+1, string.find(s1,"!")-1)
			svMove = string.sub(s1,string.find(s1,"!")+1, string.find(s1,"?")-1)
			svLives = string.sub(s1,string.find(s1,"?")+1, string.find(s1,";")-1)
			svDif = string.sub(s1,string.find(s1,";")+1, string.find(s1,":")-1)
			svScore = string.sub(s1,string.find(s1,":")+1, string.find(s1,"A")-1)
			svGtype = string.sub(s1,string.find(s1,"A")+1, string.find(s1,"B")-1)
			svScPlay = string.sub(s1,string.find(s1,"B")+1, string.find(s1,"C")-1)
			svScDeath = string.sub(s1,string.find(s1,"C")+1, string.find(s1,"D")-1)
			svTotDeath = string.sub(s1,string.find(s1,"D")+1, string.find(s1,"E")-1)
			svPlayStyle = string.sub(s1,string.find(s1,"E")+1, string.find(s1,"F")-1)
			
			slotsave[6] = {svLevel, svScene, svMove, svLives, svDif, svScore, svGtype, svScPlay, svScDeath, svTotDeath,svPlayStyle}
			
			io.close(h1)

		end	

	end

end

function printSave()

	-- This function writes the options on the service menu screen.
	local k = 0
	local ypos = 0
	local smenu = {}; 
	local s1 = ""
	local tempDif = ""
	local tempScene = ""
	
	if ShowTitle then

		setFontColor(mycolor2)
		fontSelect(fontTit)
		fontPrint(mt3, LINEH*2, "LOAD/SAVE MENU")
		
	end		

	
	setFontColor(mycolor2)
	fontSelect(fontGame)

	for k=1,4 do

		ypos = OVLH/5 + k *LINEH*5

		if 	tonumber(slotsave[k][1]) == 1 and (tonumber(slotsave[k][2]) == 1 or tonumber(slotsave[k][2]) == 0) and tonumber(slotsave[k][3]) == 1 then

			if k < 4 then

				s1 = k .. ". Empty"
			
			else
			
				s1 = "A. Empty"	

			end	
		
		else

			if tonumber(slotsave[k][2]) <= 0 then 

				tempScene = ", Map" 
			
			else

				tempScene = ", Scn:" .. slotsave[k][2]

			end

			if tonumber(slotsave[k][5]) == 0 then
				
				tempDif = "Easy"

			elseif tonumber(slotsave[k][5]) == 1 then
		
				tempDif = "Normal"	

			elseif tonumber(slotsave[k][5]) == 2 then
		
				tempDif = "Hard"

			elseif tonumber(slotsave[k][5]) == 3 then
		
				tempDif = "Extreme"
							
			end
		
			if tonumber(slotsave[k][7]) == 1 then

				if k < 4 then

					s1=k .. ". Lvl:" .. slotsave[k][1] .. tempScene .. ", Mov:" .. slotsave[k][3] .. ", Bar:" .. slotsave[k][4] .. ", " .. tempDif .. ", " .. slotsave[k][6]
		
				else
				
					s1="A. Lvl:" .. slotsave[k][1] .. tempScene .. ", Mov:" .. slotsave[k][3] .. ", Bar:" .. slotsave[k][4] .. ", " .. tempDif .. ", " .. slotsave[k][6]

				end	

			elseif tonumber(slotsave[k][7]) == 4 then

				if k < 4 then

					s1=k .. ". Lvl:" .. slotsave[k][1] .. tempScene .. ", Mov:" .. slotsave[k][3] .. ", Dth:" .. slotsave[k][9]+slotsave[k][10] .. ", " .. tempDif
		
				else
				
					s1="A. Lvl:" .. slotsave[k][1] .. tempScene .. ", Mov:" .. slotsave[k][3] .. ", Dth:" .. slotsave[k][9]+slotsave[k][10] .. ", " .. tempDif

				end	



			else

				if k < 4 then

					s1=k .. ". Lvl:" .. slotsave[k][1] .. tempScene .. ", Mov:" .. slotsave[k][3] .. ", Liv:" .. slotsave[k][4] .. ", " .. tempDif .. ", " .. slotsave[k][6]
		
				else
				
					s1="A. Lvl:" .. slotsave[k][1] .. tempScene .. ", Mov:" .. slotsave[k][3] .. ", Liv:" .. slotsave[k][4] .. ", " .. tempDif .. ", " .. slotsave[k][6]

				end	

			end

			
			
		end

		fontPrint(OVLW/6.55, ypos, s1)

	end

	setFontColor(mycolor3)
	fontSelect(fontLCD)
	
	for k=1,4 do
		
		
		ypos = OVLH/5 + (k+6) *LINEH*5
		if k == optSel then setFontColor(mycolor2) else setFontColor(mycolor1) end		
		if k == 3 then fontPrint(ml4, OVLH/5 + (k+6) *LINEH*5, "PROCEED") end


		if k == 4 then 

			if bInPlayExit then

				fontPrint(ml11, OVLH/5 + (k+6) *LINEH*5, "BACK TO GAME")	

			else

				fontPrint(ml12, OVLH/5 + (k+6) *LINEH*5, "EXIT")

			end	

		 end
		
		if (k == 1) then

			if dip_Loadsave == 0 then
				
				fontPrint(ml5, ypos, "LOAD")

			elseif dip_Loadsave == 1 then
		
				fontPrint(ml6, ypos, "SAVE")	
				
			end
			
		elseif (k == 2) then	

			if dip_Slot == 1 then
				
				fontPrint(ml7, ypos, "SLOT #1")

			elseif dip_Slot == 2 then
		
				fontPrint(ml8, ypos, "SLOT #2")	

			elseif dip_Slot == 3 then
		
				fontPrint(ml9, ypos, "SLOT #3")

			elseif dip_Slot == 4 then
		
				fontPrint(ml10, ypos, "AUTOSAVE")
				
			end	
				
		end

	end

end

function updateSave(thisIndex)

	if (thisIndex == 1) then
	
		dip_Loadsave  = dip_Loadsave  + 1

		if (dip_Loadsave  > 1) then
		
			dip_Loadsave = 0
		
		end		

		if dip_Loadsave == 1 then

			dip_Slot = 1

		end
				

	elseif (thisIndex == 2) then	
	
		dip_Slot = dip_Slot + 1

		if (dip_Slot == 4) then
		
			dip_Loadsave = 0
			
		end
			
		if (dip_Slot > 4) then
		
			dip_Slot = 1
			
		end

	elseif (thisIndex == 3) then
	
		if dip_Loadsave == 0 then

			loadSave(dip_Slot)			

		else
			
			local k = dip_Slot

			slotsave[k][1] = iLevel
			slotsave[k][2] = iScene

			if bCheckMove then

				slotsave[k][3] = currentMove + 1
			
			else

				slotsave[k][3] = currentMove

			end

			if dip_GameType == 1 then

				slotsave[k][4] = iLifeBar

			else

				slotsave[k][4] = iLiveSave

			end
			
			slotsave[k][5] = dip_Difficulty
			slotsave[k][6] = iScore
			
			if dip_GameType == 1 then

				slotsave[k][7] = "1"

			else

				slotsave[k][7] = "0"

			end

			slotsave[k][8] = iScPlayed
			slotsave[k][9] = iScDeath
			slotsave[k][10] = iTotDeath
			slotsave[k][11] = dip_PlayStyle

			if iScore >= iScoreSave then writeSave(dip_Slot) end

			lvlState = lvlEnd
			
		end	
		
	elseif (thisIndex == 4) then		

		lvlState = lvlEnd
		
	end

end

function updateSaveMin(thisIndex)

	if (thisIndex == 1) then
	
		dip_Loadsave  = dip_Loadsave - 1

		if (dip_Loadsave  < 0) then
		
			dip_Loadsave = 1
		
		end		

		if dip_Loadsave == 1 then

			dip_Slot = 1

		end
				

	elseif (thisIndex == 2) then	
	
		dip_Slot = dip_Slot - 1

		if (dip_Slot == 4) then
		
			dip_Loadsave = 0
			
		end
			
		if (dip_Slot < 1) then
		
			dip_Slot = 4
			
		end

	elseif (thisIndex == 3) then
	
		if dip_Loadsave == 0 then

			loadSave(dip_Slot)			

		else
			
			local k = dip_Slot

			slotsave[k][1] = iLevel
			slotsave[k][2] = iScene

			if bCheckMove then

				slotsave[k][3] = currentMove + 1
			
			else

				slotsave[k][3] = currentMove

			end

			if dip_GameType == 1 then

				slotsave[k][4] = iLifeBar

			else

				slotsave[k][4] = iLiveSave

			end

			slotsave[k][5] = dip_Difficulty
			slotsave[k][6] = iScore
			
			if dip_GameType == 1 then

				slotsave[k][7] = "1"

			else

				slotsave[k][7] = "0"

			end

			slotsave[k][8] = iScPlayed
			slotsave[k][9] = iScDeath
			slotsave[k][10] = iTotDeath
			slotsave[k][11] = dip_PlayStyle
			
			if iScore >= iScoreSave then	writeSave(dip_Slot) end

			lvlState = lvlEnd
			
		end	
		
	elseif (thisIndex == 4) then		

		lvlState = lvlEnd
		
	end

end

function writeSave(thisSlot)

	local k = thisSlot
	local sNewLine = "\n"
	local s1 = ""
	local s0

	if altCfg == true and k < 5 then

		s0 = MYDIR.."/Cfg/s" .. thisSlot .. "0.cfg"

	else

		s0 = MYDIR.."/Cfg/s" .. thisSlot .. ".cfg"

	end	

	local h1 = io.output(s0)
			
	s1 = slotsave[k][1] .. "," .. slotsave[k][2] .. "!" .. slotsave[k][3] .. "?" .. slotsave[k][4] .. ";" .. slotsave[k][5] .. ":" .. slotsave[k][6] .. "A" .. slotsave[k][7] .. "B" .. slotsave[k][8] .. "C" .. slotsave[k][9] .. "D" .. slotsave[k][10] .. "E" .. slotsave[k][11] .. "F"
	io.write(s1 .. sNewLine)
		
	for k=1,finalstage do

		if stage[LvlOrder[k]][BEATSTATUS] == true then

			s1 = LvlOrder[k] .. "A" .. "true" .. "B" .. "true" .. "C" .. stage[LvlOrder[k]][DEATHCOUNT] .. "D"

		else

			s1 = LvlOrder[k] .. "A" .. "false" .. "B" .. "false" .. "C" .. stage[LvlOrder[k]][DEATHCOUNT] .. "D"

		end
		
		io.write(s1 .. sNewLine)
				
	end	
	
	io.close(h1)

	if writeSavePlus ~= nil then writeSavePlus(thisSlot) end

end

function loadSave(thisSlot)

	local s1
	local i = 0
	local j = 0
	local k = 0
	scene = nil; scene = {}
	stage = nil; stage = {}

	local s0 = MYDIR.."/Cfg/s" .. thisSlot .. ".cfg"

	if altCfg == true and thisSlot < 5 then

		s0 = MYDIR.."/Cfg/s" .. thisSlot .. "0.cfg"

	else

		s0 = MYDIR.."/Cfg/s" .. thisSlot .. ".cfg"

	end	

	for k=1,finalstage do

		scene[k] = {}		
		stage[k] = {false, false, 0}

		for i = 1,Level[k][TOTALSCENES] do

			scene[k][i] = {}; scene[k][i] = {i, false}

		end 

	end	

	local h1 = io.input(s0)

	s1 = io.read("*line")
	
	if thisSlot == 5 or thisSlot == 6 then

		iLevel = tonumber(string.sub(s1,1,string.find(s1,",")-1))
		iScene = tonumber(string.sub(s1,string.find(s1,",")+1, string.find(s1,"!")-1))

	else

		dip_StartLevel = tonumber(string.sub(s1,1,string.find(s1,",")-1))
		dip_StartScene = tonumber(string.sub(s1,string.find(s1,",")+1, string.find(s1,"!")-1))
	
	end	
	
	currentMove = tonumber(string.sub(s1,string.find(s1,"!")+1, string.find(s1,"?")-1))
	dip_GameType = tonumber(string.sub(s1,string.find(s1,"A")+1, string.find(s1,"B")-1))

	if dip_GameType == 1 then

		iLifeBar = tonumber(string.sub(s1,string.find(s1,"?")+1, string.find(s1,";")-1))
		iLives = 1

	else	
			
		iLives = tonumber(string.sub(s1,string.find(s1,"?")+1, string.find(s1,";")-1))

	end

	iScPlayed = tonumber(string.sub(s1,string.find(s1,"B")+1, string.find(s1,"C")-1))
	iScDeath = tonumber(string.sub(s1,string.find(s1,"C")+1, string.find(s1,"D")-1))
	iTotDeath = tonumber(string.sub(s1,string.find(s1,"D")+1, string.find(s1,"E")-1))
	dip_PlayStyle = tonumber(string.sub(s1,string.find(s1,"E")+1, string.find(s1,"F")-1))

	dip_Difficulty = tonumber(string.sub(s1,string.find(s1,";")+1, string.find(s1,":")-1))
	iScore = tonumber(string.sub(s1,string.find(s1,":")+1, string.find(s1,"A")-1))
		
	for k = 1,finalstage do

		s1 = io.read("*line")

		LvlOrder[k] = tonumber(string.sub(s1,1,string.find(s1,"A")-1))
		if string.sub(s1,string.find(s1,"A")+1, string.find(s1,"B")-1) == "true" then stage[k][LEVELSTARTED] = true end
		if string.sub(s1,string.find(s1,"B")+1, string.find(s1,"C")-1) == "true" then stage[k][BEATSTATUS] = true end
		stage[k][DEATHCOUNT] = tonumber(string.sub(s1,string.find(s1,"C")+1, string.find(s1,"D")-1))

	end	

	for k=1,finalstage do

		if stage[k][BEATSTATUS] == true then

			for i = 1,Level[k][TOTALSCENES] do

				scene[k][i] = {}; scene[k][i] = {i, true}

			end 

		elseif stage[k][BEATSTATUS] == false and stage[k][LEVELSTARTED] == true and dip_StartScene ~= 1 then
			
			for i = 1,dip_StartScene-1 do

				scene[k][i] = {}; scene[k][i] = {i, true}

			end 

		end

	end	

	if AllowSecret == true then

		stage[levelSecret] = {false, false, 0}
		scene[levelSecret] = {}

		for i = 1,Level[levelSecret][TOTALSCENES] do
			
			scene[levelSecret][i] = {}; scene[levelSecret][i] = {i, false}

		end 

	end


	if 	dip_StartLevel == 1 and dip_StartScene == 1 and currentMove ==1 and thisSlot < 5 then

		lvlState = lvlEnd

	elseif dip_StartScene <= 0 and dip_PlayStyle==3 then

		writeConfig()
		iLiveSave = iLives
		iScoreSave = iScore	

		startMap()

	else

		writeConfig()
		iLiveSave = iLives
		iScoreSave = iScore	

		startSave()

	end

	io.close(h1)

	if loadSavePlus ~= nil then loadSavePlus(thisSlot) end
	
end

function autoSave(thisSlot)

	local i = 0
	
	readSave()

	slotsave[thisSlot][1] = iLevel
	slotsave[thisSlot][2] = iScene

	if bCheckMove then

		slotsave[thisSlot][3] = currentMove+1
	
	else

		slotsave[thisSlot][3] = currentMove

	end	

	if dip_GameType == 1 then

		slotsave[thisSlot][4] = iLifeBar

	else
		
		slotsave[thisSlot][4] = iLives 

	end
	
	slotsave[thisSlot][5] = dip_Difficulty
	slotsave[thisSlot][6] = iScore
	slotsave[thisSlot][7] = dip_GameType
	slotsave[thisSlot][8] = iScPlayed
	slotsave[thisSlot][9] = iScDeath
	slotsave[thisSlot][10] = iTotDeath
	slotsave[thisSlot][11] = dip_PlayStyle

	writeSave(thisSlot)	
		
end

function doNG() -- Start New Game 

	local optMax = 4

	if (lvlState == lvlSetup) then

		readSave()
		if (tonumber(slotsave[4][1]) == 1 and (tonumber(slotsave[4][2]) == 1 or tonumber(slotsave[4][2]) == 0) and tonumber(slotsave[4][3]) == 1) then

			startGame()

		else 

			discSkipToFrame(frameNewGame)
			discPause()		
			timerOFF()		
			optSel = 2
			bShowLvl = false
			bShowScene = false
			bShowScore = false
			bShowLives = false
			bShowLvl = false
			bShowSkip = false		
			bShowCredits = false
			bShowGet = false
			bShowLCD = false
			bShowAction = false	
			bShowNext = false
			bIgnoreJoy = false
			bShowWarnTilt = false
			bShowTilt = false
			
			lvlState = lvlRunning

		end

	elseif (lvlState == lvlRunning) then
	
		if (p1BUTTON1) then
		
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end

			else
				
				p1BUTTON1 = false
				soundPlay(sndcredit)
				updateNG(optSel)	

				bIgnoreJoy = true
				joyDelayON(0.250)

			end	

		elseif (p1BUTTON2) then

			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end

			else
				
				p1BUTTON2 = false
				soundPlay(sndcredit)
				
				if optSel == 2 and dip_GameType ~= 4 then 

					updateNG(10)

				elseif bUnlockSel then

					updateNG(10)

				else 

					updateNG(optSel)

				end	

				bIgnoreJoy = true
				joyDelayON(0.250)

			end	

			
		elseif (p1DOWN or p1UP) then
		
			
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end
				
			else
				
				if p1DOWN then 

					p1DOWN = false
					optSel = optSel + 1
					if (optSel > optMax) then optSel = 2 end
				
				elseif p1UP then 
					
					p1UP = false	
					optSel = optSel - 1
					if (optSel < 2) then optSel = optMax end
				
				end
				
				soundPlay(sndcoin)
				
				bIgnoreJoy = true
				joyDelayON(0.250)
							
			end
			
		end
		printNG()

	elseif (lvlState == lvlEnd) then
	
		
		
	end

end

function printNG()

	-- This function writes the options on the New Game Start screen.

	local k = 0
	local ypos
	local emenu = {}; 
	local s1 = ""
	local tempDif = ""
	
	setFontColor(mycolor2)
	fontSelect(fontGame)
	
	for k=1,4 do
				
		if k == 1 then 

			if optSel == 2 and dip_GameType ~= 4 then 

				fontPrint(LINEH*2, OVLH-TEXTH-LINEH, "B1 for Level 1, B2 for Menu Level: "..dip_StartLevel) 

			elseif optSel == 3 then	

				if tonumber(slotsave[4][2]) <= 0 then 

					tempScene = ", Map" 
				
				else

					tempScene = ", Scn:" .. slotsave[4][2]

				end

				if tonumber(slotsave[4][5]) == 0 then
					
					tempDif = "Easy"

				elseif tonumber(slotsave[4][5]) == 1 then
			
					tempDif = "Norm."	

				elseif tonumber(slotsave[4][5]) == 2 then
			
					tempDif = "Hard"

				elseif tonumber(slotsave[4][5]) == 3 then
			
					tempDif = "Ext."
								
				end
			
				if tonumber(slotsave[4][7]) == 1 then s1="SAVE: LIFEBAR, Lvl:" .. slotsave[4][1] .. tempScene .. ", Bar:" .. slotsave[4][4] .. ", " .. tempDif .. ", " .. slotsave[4][6]

				elseif tonumber(slotsave[4][7]) == 4 then s1="SAVE: D & R, Lvl:" .. slotsave[4][1] .. tempScene .. ", Dth:" .. slotsave[4][9]+slotsave[4][10] .. ", " .. tempDif	

				elseif tonumber(slotsave[4][7]) == 0 then s1="SAVE: NORMAL, Lvl:" .. slotsave[4][1] .. tempScene .. ", Liv:" .. slotsave[4][4] .. ", " .. tempDif .. ", " .. slotsave[4][6]

				else s1="SAVE: KID, Lvl:" .. slotsave[4][1] .. tempScene .. ", Liv:" .. slotsave[4][4] .. ", " .. slotsave[4][6] end	

				fontPrint(LINEH*2, OVLH-TEXTH-LINEH, s1)

			end

		end
		
		ypos = OVLH/3 + k*LINEH*7
		setFontColor(mycolor1)
		fontSelect(fontBig)
		if k == optSel then setFontColor(mycolor2) else setFontColor(mycolor1) end		
		if k == 2 then fontPrint(mb50, ypos, "NEW GAME") end
		if k == 3 then fontPrint(mb51, ypos, "CONTINUE") end
		if k == 4 then fontPrint(mb2, ypos, "BACK") end
	
	end

end

function updateNG(thisIndex)

	if (thisIndex == 2) then

		dip_StartLevel = 1
		dip_StartScene = 1
		startGame()

					
	elseif (thisIndex == 3) then

		if (tonumber(slotsave[4][1]) == 1 and (tonumber(slotsave[4][2]) == 1 or tonumber(slotsave[4][2]) == 0) and tonumber(slotsave[4][3]) == 1) then 

			 soundPlay(sndwrong)

		else
			
			loadSave(4)
		
		end

	elseif (thisIndex == 4) then

		gameflow = flow_GameInit
		sprUnload()

	elseif (thisIndex == 10) then

		startGame()

	end

end


function doExit() -- Exit program


	-- This is the main function for exit screen.
	
	local optMax = 4

	if (lvlState == lvlSetup) then

		discSkipToFrame(frameQuit)
		discPause()		
		timerOFF()		
		optSel = 1
		bShowLvl = false
		bShowScene = false
		bShowScore = false
		bShowLives = false
		bShowLvl = false
		bShowSkip = false		
		bShowCredits = false
		bShowGet = false
		bShowLCD = false
		bShowAction = false	
		bShowNext = false
		bIgnoreJoy = false
		bShowWarnTilt = false
		bShowTilt = false
		
		lvlState = lvlRunning

	elseif (lvlState == branch01) then     -- Quit D&R
				
		if (currentFrame == iFrameEnd) then 

			singeQuit()

		end

	elseif (lvlState == lvlRunning) then
	
		if (p1BUTTON1) then
		
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end

			else
				
				p1BUTTON1 = false
				soundPlay(sndcredit)
				updateExit(optSel)	

				bIgnoreJoy = true
				joyDelayON(0.250)

			end	
			
		elseif (p1DOWN or p1UP) then
		
			
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end
				
			else
				
				if p1DOWN then 

					p1DOWN = false
					optSel = optSel + 1
					if (optSel > optMax) then optSel = 1 end
				
				elseif p1UP then 
					
					p1UP = false	
					optSel = optSel - 1
					if (optSel < 1) then optSel = optMax end
				
				end
				
				soundPlay(sndcoin)
				
				bIgnoreJoy = true
				joyDelayON(0.250)
							
			end
			
		end
		printExit()

	elseif (lvlState == lvlEnd) then
	
		
		if bInPlayExit then

			bInPlayExit = false
			loadSave(4)
		
		else	
	
			gameflow = flow_GameInit
			sprUnload()

		end	

	end

end

function updateExit(thisIndex)

	if (thisIndex == 1) then

		if offsetQuit ~= 0 then

			setupClip(offsetQuit, offsetQuitend)
			lvlState = branch01	

		else	

			singeQuit()

		end
			
	elseif (thisIndex == 2) then		

		lvlState = lvlEnd

	elseif (thisIndex == 3) then

		bInPlayExit = false		
		lvlState = lvlEnd
		scoreBezelReset()

	elseif (thisIndex == 4) then		

		bInPlayExit = false	
		lvlState = lvlSetup
		currentLevel = levelService

	end

end


function printExit()

	-- This function writes the options on the exit screen.

	local k = 0
	local ypos
	local emenu = {}; 
	local s1 = ""
	local tempDif = ""
	
	setFontColor(mycolor2)
	fontSelect(fontTit)
	fontPrint(mt2, LINEH*2, "QUIT GAME?")
	spriteDraw(OVLW-KIMW-LINEH,LINEH,sprite[KIMMY])
	
	setFontColor(mycolor1)
	fontSelect(fontBig)
	
	for k=1,4 do
				
		ypos = OVLH/1.8 + k*LINEH*7
		if k == optSel then setFontColor(mycolor2) else setFontColor(mycolor1) end		
		if k == 1 then fontPrint(mb1, ypos, "QUIT") end
		if k == 2 then fontPrint(mb2, ypos, "BACK") end
		if k == 3 then fontPrint(mb3, ypos, "INTRO") end
		if k == 4 then fontPrint(mb4, ypos, "OPTIONS") end
	
	end

end

function setSkin()

	if dip_ScType == 0 then

		mycolor1 = svCol1
		mycolor2 = svCol2
		mycolor3 = svCol3
		if dip_Res ~= 2 then fontSize = svFS end
		fontType = 1
		numFont = 1
	
	elseif dip_ScType == 1 then

		SKINDIR = "/DEFAULT"
		mycolor1 = 1
		mycolor2 = 2
		mycolor3 = 4
		if dip_Res ~= 2 then fontSize = 0 end
		numFont = 2

	elseif dip_ScType == 2 then

		SKINDIR = "/WOOD"
		mycolor1 = 1
		mycolor2 = 6
		mycolor3 = 4
		if dip_Res ~= 2 then fontSize = 0 end
		fontType = 1
		numFont = 1
		
	elseif dip_ScType == 3 then

		SKINDIR = "/COMICS"
		mycolor1 = 1
		mycolor2 = 4
		mycolor3 = 2
		if dip_Res ~= 2 then fontSize = -3 end
		fontType = 1
		numFont = 1

	elseif dip_ScType == 4 then

		SKINDIR = "/STEAM"
		mycolor1 = 1
		mycolor2 = 5
		mycolor3 = 5
		if dip_Res ~= 2 then fontSize = -2 end
		fontType = 1
		numFont = 1

	elseif dip_ScType == 5 then

		SKINDIR = "/GAL"
		mycolor1 = 1
		mycolor2 = 7
		mycolor3 = 8
		if dip_Res ~= 2 then fontSize = 0 end
		fontType = 1
		numFont = 1

	elseif dip_ScType == 6 then

		SKINDIR = "/TITAN"
		mycolor1 = 1
		mycolor2 = 9
		mycolor3 = 9
		if dip_Res ~= 2 then fontSize = 0 end
		fontType = 1
		numFont = 1

	elseif dip_ScType == 7 then

		SKINDIR = "/CLIFF"
		mycolor1 = 1
		mycolor2 = 5
		mycolor3 = 4
		if dip_Res ~= 2 then fontSize = 0 end
		fontType = 1
		numFont = 1

	elseif dip_ScType == 8 then

		SKINDIR = "/SCIFI"
		mycolor1 = 1
		mycolor2 = 9
		mycolor3 = 3
		if dip_Res ~= 2 then fontSize = 0 end
		numFont = 2

	elseif dip_ScType == 9 then

		SKINDIR = "/CUSTOM"
		mycolor1 = 1
		mycolor2 = 2
		mycolor3 = 4
		if dip_Res ~= 2 then fontSize = 0 end
		numFont = 2

	end

end

