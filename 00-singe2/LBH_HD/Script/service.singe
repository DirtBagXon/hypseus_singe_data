--[[

PROGRAM NAME:	LAST BOUNTY HUNTER (SINGE EDITION)
AUTHOR:			RDG2010
CONVERTED FOR SINGE 2: POIU2020
This file is part of LAST BOUNTY HUNTER (SINGE EDITION)

    LAST BOUNTY HUNTER (SINGE EDITION) is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation.

    LAST BOUNTY HUNTER (SINGE EDITION) is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

    Read COPYING.TXT for more info.


]]--

sprLine1 = nil
sprLine2 = nil
sprLine3 = nil
qx = {}
qy = {}
--highscore = nil

sprmsg = nil
sprmsg2 = nil
sprmsg3 = nil
ssx = 0
ssy = 0	
dx = 0
dy = 0	
fx = 0
fy = 0
gx = 0
gy = 0

function readConfig()

	local s1
	local hsName = ""
	local hdScore = ""
	local k = 0
	local h1 = io.input(MYDIR .. "/Cfg/lbh.cfg")	

	if (bDebug) then debugPrint ("Entering readConfig()") end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_LivesPerCredit = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end
		
		s1 = io.read("*line")
		
		if (s1 ~= nil) then

			dip_Difficulty = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end
		
		s1 = io.read("*line")
		
		if (s1 ~= nil) then

			dip_ReloadTrigger = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end
		
		s1 = io.read("*line")
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))	
		
		if (s1 ~= nil) then
		
			if (s1 == 1) then
				dip_Undertaker = true
			else
				dip_Undertaker = false
			end
		end
		
		s1 = io.read("*line")
				
		if (s1 ~= nil) then

			dip_Showdown = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))

		if (s1 ~= nil) then

			if (s1 == 1) then
				dip_Practice = true
			else
				dip_Practice = false
			end
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then

			dip_Crosshair = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
			if dip_Crosshair == 5 then
				bReversePointer = true
				
			else
			
				bReversePointer = false
			end
			
		end

		s1 = io.read("*line")
				
		if (s1 ~= nil) then

			dip_HUD = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end
		
		s1 = io.read("*line")
		highscore = nil; highscore = {}
		for k=1,6 do
			s1 = io.read("*line")
			
			hsName = string.sub(s1,1,string.find(s1,",")-1)
			hsScore = string.sub(s1,string.find(s1,",")+1, string.len(s1))
			
			highscore[k] = {}
			highscore[k] = {hsName, hsScore}			
		
		end
		
		io.close(h1)
		
		if (bDebug) then debugPrint ("Leaving readConfig()") end

end

function writeConfig()

	-- This function writes the values of the dip variables
	-- into an external data file.

	local sNewLine = "\n"
	local s1 = ""

	local h1 = io.output(MYDIR .. "/Cfg/lbh.cfg")
	
	io.write("dip_LivesPerCredit = " .. dip_LivesPerCredit .. sNewLine)
	io.write("dip_Difficulty = " .. dip_Difficulty .. sNewLine)	
	io.write("dip_ReloadTrigger = " .. dip_ReloadTrigger .. sNewLine) 
		
	if (dip_Undertaker == true) then
		io.write("dip_Undertaker = 1" .. sNewLine)
	else
		io.write("dip_Undertaker = 0" .. sNewLine)
	end	
	
	io.write("dip_Showdown = " .. dip_Showdown .. sNewLine)
	
	if (dip_Practice == true) then
		io.write("dip_Practice = 1" .. sNewLine)
	else
		io.write("dip_Practice = 0" .. sNewLine)
	end
	
	io.write("dip_Crosshair = " .. dip_Crosshair .. sNewLine)

	io.write("dip_HUD = " .. dip_HUD .. sNewLine)

	io.write(sNewLine)
	
	for k=1,6 do
		
		
		s1 = highscore[k][1] .. "," .. highscore[k][2]
		io.write(s1 .. sNewLine)
	
	end
	
	io.close(h1)

end

function updateOpts(thisIndex)

	if (thisIndex == 1) then
	
		dip_LivesPerCredit = dip_LivesPerCredit + 1
	
		if (dip_LivesPerCredit > 6) then
		
			dip_LivesPerCredit = 3
			
		end
		
	elseif (thisIndex == 2) then
	
		if (dip_Difficulty == DOPT_EASY) then
		
			dip_Difficulty = DOPT_MEDIUM
		
		elseif (dip_Difficulty == DOPT_MEDIUM) then
		
			dip_Difficulty = DOPT_HARD
			
		elseif (dip_Difficulty == DOPT_HARD) then
		
			dip_Difficulty = DOPT_EXTREME
		
		else	
		
			dip_Difficulty = DOPT_EASY
		
		end

	elseif (thisIndex == 3) then
	
		if (dip_ReloadTrigger == DOPT_IMMEDIATE) then
		
			dip_ReloadTrigger = DOPT_ONEMPTY
		
		elseif (dip_ReloadTrigger == DOPT_ONEMPTY) then
		
			dip_ReloadTrigger = DOPT_BORDERS
		
		elseif (dip_ReloadTrigger == DOPT_BORDERS) then
		
			dip_ReloadTrigger = DOPT_LIGHTGUN
		
		else	
		
			dip_ReloadTrigger = DOPT_IMMEDIATE
		
		end
	
	elseif (thisIndex == 4) then
	
		dip_Undertaker = not dip_Undertaker
		
	elseif (thisIndex == 5) then	
		
		dip_Showdown = dip_Showdown + 1

		if (dip_Showdown > 3) then
		
			dip_Showdown = 1
			
		end

	elseif (thisIndex == 6) then	
		
		dip_Practice = not dip_Practice
		
	elseif (thisIndex == 7) then
	
		if (dip_Crosshair == 1) then
		
			dip_Crosshair = 2
			
		elseif (dip_Crosshair == 2) then
		
			dip_Crosshair = 3
			
		elseif (dip_Crosshair == 3) then
		
			dip_Crosshair = 4
			
		elseif (dip_Crosshair == 4) then
		
			dip_Crosshair = 5
			
		elseif (dip_Crosshair == 5) then
		
			dip_Crosshair = 1
			
		end
		
	elseif (thisIndex == 8) then
		

		lvlState = lvlEnd
		
	end

end

function printOpts()

	-- This function writes the options on the service menu screen.
	local k = 0

	for k=1,8 do

		if (k == 1) then

			if (dip_LivesPerCredit == 3) then

				spriteDraw(819*UnX, 233*UnY, sprHole)

			elseif (dip_LivesPerCredit == 4) then

				spriteDraw(954*UnX, 233*UnY, sprHole)

			elseif (dip_LivesPerCredit == 5) then

				spriteDraw(1074*UnX, 233*UnY, sprHole)

			else

				spriteDraw(1200*UnX, 233*UnY, sprHole)

			end

		elseif (k == 2) then

			if (dip_Difficulty == DOPT_EASY) then

				spriteDraw(819*UnX, 329*UnY, sprHole)

			elseif (dip_Difficulty == DOPT_MEDIUM) then

				spriteDraw(954*UnX, 329*UnY, sprHole)

			elseif (dip_Difficulty == DOPT_HARD) then

				spriteDraw(1074*UnX, 329*UnY, sprHole)

			else

				spriteDraw(1200*UnX, 329*UnY, sprHole)

			end

		elseif (k == 3) then

			if (dip_ReloadTrigger == DOPT_IMMEDIATE) then

				spriteDraw(914*UnX, 444*UnY, sprHole)

			elseif (dip_ReloadTrigger == DOPT_ONEMPTY) then

				spriteDraw(1100*UnX, 444*UnY, sprHole)

			elseif (dip_ReloadTrigger == DOPT_LIGHTGUN) then
			
				fontSelect(font72)
				colorForeground(255, 255, 255)
				fontPrint(785*UnX, 410*UnY, "LIGHTGUN")

			else

				spriteDraw(1368*UnX, 444*UnY, sprHole)

			end


		elseif (k == 4) then

			if dip_Undertaker then

				spriteDraw(875*UnX, 539*UnY, sprHole)


			else

				spriteDraw(1049*UnX, 539*UnY, sprHole)


			end

		elseif (k == 5) then


			if (dip_Showdown == 1) then

				spriteDraw(875*UnX, 638*UnY, sprHole)


			elseif (dip_Showdown == 2) then

				spriteDraw(1049*UnX, 638*UnY, sprHole)

			elseif (dip_Showdown == 3) then

				spriteDraw(1264*UnX, 638*UnY, sprHole)

			end

		elseif (k == 6) then


			if dip_Practice then

				spriteDraw(875*UnX, 737*UnY, sprHole)


			else

				spriteDraw(1049*UnX, 737*UnY, sprHole)


			end

		elseif (k == 7) then

			sprCursor = nil

			if (dip_Crosshair == 1) then

				sprCursor  = spriteLoad(MYDIR .. "/Overlay/crosshaira.png")
				
			elseif (dip_Crosshair == 2) then

				sprCursor  = spriteLoad(MYDIR .. "/Overlay/crosshairb.png")
				
			elseif (dip_Crosshair == 3) then

				sprCursor  = spriteLoad(MYDIR .. "/Overlay/crosshairc.png")
				
			elseif (dip_Crosshair == 4) then

				sprCursor  = spriteLoad(MYDIR .. "/Overlay/crosshaird.png")
				
			elseif (dip_Crosshair == 5) then

				sprCursor  = spriteLoad(MYDIR .. "/Overlay/crosshaire.png")
				fontSelect(font72)
				colorForeground(255, 255, 255)
				fontPrint(785*UnX, 820*UnY, "ON TRIGGER")
				
			end

			spriteDraw(785*UnX, 825*UnY, sprCursor)

		end

	end

end

function doServiceMenu()

	-- This is the main function for the service menu screen.

	local j = resX * 0.5
	local h = j - 80
	local k = 80
	local gunx = 42
	
	if (lvlState == lvlSetup) then
	
		if (bDebug) then debugPrint ("Entering doServiceMenu()") end

		discSkipToFrame(49600)
		discPause()		
		timerOFF()
		
		optSel = 1
		readConfig()
		
		bShowScore = false
		bPlaySound = false
		bReloadDisabled = true
		bShowMouse = false
		bShowCredits = false
		bShowdown = false
		bBonusLevel = false
			
		lvlState = lvlRunning
	
	elseif (lvlState == lvlRunning) then
	
		if (p1BUTTON3) then
		
			p1BUTTON3 = false
			soundPlay(sndGunshot)
			updateOpts(optSel)	
			
		elseif p1BUTTON1 then
		
			p1BUTTON1 = false	
			lvlState = lvlEnd		
			soundPlay(sndCoin)
			
		else
		
			if (mousey >= 0*UnY and mousey <= 300*UnY) then		-- Coins per credit

				spriteDraw(23*UnX, 240*UnY, sprArrow)
				optSel = 1

			elseif  (mousey >= 301*UnY and mousey <= 399*UnY) then	-- Lives per credit

				spriteDraw(23*UnX, 334*UnY, sprArrow)
				optSel = 2

			elseif  (mousey >= 400*UnY and mousey <= 500*UnY) then	-- Difficulty
				
				spriteDraw(23*UnX, 438*UnY, sprArrow)
				optSel = 3

			elseif  (mousey >= 501*UnY and mousey <= 597*UnY) then	-- Reload mode

				spriteDraw(23*UnX, 544*UnY, sprArrow)
				optSel = 4

			elseif (mousey >= 598*UnY and mousey <= 699*UnY) then	-- Show undertaker

				spriteDraw(23*UnX, 642*UnY, sprArrow)
				optSel = 5

			elseif (mousey >= 700*UnY and mousey <= 799*UnY) then -- Play showdowns

				spriteDraw(23*UnX, 742*UnY, sprArrow)
				optSel = 6

			elseif  (mousey >= 800*UnY and mousey <= 896*UnY) then -- Play practice

				spriteDraw(23*UnX, 835*UnY, sprArrow)
				optSel = 7
			
			elseif  (mousey >= 897*UnY and mousey <= 1080*UnY) then -- exit

				spriteDraw(223*UnX, 930*UnY, sprArrow)
				optSel = 8

			end	
			printOpts()
			
			
		end

	elseif (lvlState == lvlEnd) then
	
		writeConfig()
		bShowMouse = true
		iScore = 0
		iCoins = 0
		iCredits = 0
		gameflow = stateStartup
		if (bDebug) then debugPrint ("Leaving doServiceMenu()") end	

	end

end
