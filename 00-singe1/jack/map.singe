--[[

NOME PROGRAMMA: Samurai Jack Singe edition
VERSIONE:		1.0
AUTORE:			POIU (2019)

Questo file fa parte di Samurai Jack Singe edition

Samurai Jack Singe edition è un software gratuito: 
puoi ridistribuirlo e / o modificarlo
secondo i termini della GNU General Public License 
come pubblicato da la Fondazione per il software libero.

Samurai Jack Singe edition è distribuito nella speranza che possa essere utile,
ma SENZA ALCUNA GARANZIA; senza nemmeno la garanzia implicita di
COMMERCIABILITÀ o IDONEITÀ A UNO SCOPO PARTICOLARE.

Un sentito ringraziamento a RDG (autore originale del programma) a Karis per avermi aiutato a fare questo script per la mappa


]]--

curx = 0; cury = 0;

function moveCursor(overHere)

	-- This function moves the cursor in the level select screen.
	-- It determines yellow rectangle movement
	-- depending on position (given by variable overHere) and levels completed.
	-- The function does not return any values.
	
		if bIgnoreJoy then 
			
		if joyDelayDue() then bIgnoreJoy = false end
		
	else
	
		if (iCurPos == level01) then
		
			if (p1RIGHT) then			
			
				--p1RIGHT = false
				
					if (levelMap[level02] == false) then
				
						iCurPos = level02

					elseif 	(levelMap[level03] == false) then
				
						iCurPos = level03

					elseif 	(levelMap[level04] == false) then
				
						iCurPos = level04
										
					end
		
			end	
			
		elseif (iCurPos == level02) then 	-- level02
		
			if (p1LEFT) then

				if (levelMap[level01] == false) then
				
						iCurPos = level01
										
				end
			
			elseif (p1RIGHT) then
				
				if 	(levelMap[level03] == false) then
				
					iCurPos = level03

				elseif 	(levelMap[level04] == false) then
				
					iCurPos = level04
					
				end
				
			end
		
		elseif (iCurPos == level03) then 	-- level03
		
			if (p1LEFT) then
			    

				if (levelMap[level02] == false) then
				
					iCurPos = level02

				elseif 	(levelMap[level01] == false) then
				
					iCurPos = level01
										
				end
			
			elseif (p1RIGHT) then
				
				if (levelMap[level04] == false) then
				
					iCurPos = level04
									
				end
				
			end
			
		elseif (iCurPos == level04) then 	-- level04
		
			if (p1LEFT) then
			   
				if 	(levelMap[level03] == false) then
				
						iCurPos = level03

				elseif 	(levelMap[level02] == false) then
				
					iCurPos = level02

				elseif 	(levelMap[level01] == false) then
				
					iCurPos = level01
								
				end
			
			end

		end
					
		if p1UP or p1DOWN or p1LEFT or p1RIGHT or p1BUTTON1 then
			bIgnoreJoy = true
			joyDelayON(0.200)
		end
		
		p1UP      = false		
		p1DOWN    = false		
		p1LEFT    = false
		p1RIGHT   = false
		p1BUTTON1 = false
		p1BUTTON2 = false
		
	end

end

function LevelMapComplete()

	-- Quick function to determine if player has completed all the levels required to play the final boss video clip.
	-- Returns true if all levels complete, false otherwise.
	-- Used by doLevelSelect()

	if (levelMap[level01] == true and levelMap[level02] == true and levelMap[level03] == true and levelMap[level04] == true and levelMap[level05] == true and levelMap[level06] == true) then
		
		return true

	else
		
		return false

	end

end

function setCursor(overHere)

	-- This function determines the x and y coordinates of the yellow rectangle
	-- in the level select screen.
	-- This function does not return any values.

	if (overHere == level01) then -- level01
	
		curx = 5; cury = 25
	
	elseif (overHere == level02) then -- level02
	
	    curx = 180; cury = 25
	
	elseif (overHere == level03) then -- level03
	
		curx = 5; cury = 94
	
	elseif (overHere == level04) then -- level04
	
		curx = 180; cury = 94
	
	elseif (overHere == level05) then -- level05
	
		curx = 100; cury = 152
		
	end	
	

end

function doLevelSelect()

	-- Main loop for level select menu screen.

	if (lvlState == lvlSetup) then
	
		if (bDebug == true) then debugPrint("Entering doLevelSelect()") end
		
		bShowLives = true
		bIgnoreJoy = false
		
		if (LevelMapComplete() == true) then
			
			iCurPos = level05
			lvlState = lvlEnd
			
		else

			setMenuFrame() 

			if not levelMap[level01] then

				iCurPos = level01

			elseif not levelMap[level02] then
			
				iCurPos = level02
			
			elseif not levelMap[level03] then
			
				iCurPos = level03						
			
			elseif not levelMap[level04] then
			
				iCurPos = level04
			
			elseif not levelMap[level05] then
			
				iCurPos = level05
		
			end	

			lvlState = lvlRunning
			timerON(19.9)
		
		end		
		
	elseif (lvlState == lvlRunning) then
		
		if timerDue() or p1BUTTON1 then
		
			lvlState = lvlEnd
		
		else		
			
			if (p1BUTTON1) then
				
				p1BUTTON1 = false			
				lvlState = lvlEnd
			else
				if levelMap[level01] == true then spriteDraw(70, 40, sprite[CROSSMAP]) end
				if levelMap[level02] == true then spriteDraw(230, 40, sprite[CROSSMAP]) end
				if levelMap[level03] == true then spriteDraw(70, 120, sprite[CROSSMAP]) end
				if levelMap[level04] == true then spriteDraw(230, 120, sprite[CROSSMAP]) end
				if levelMap[level05] == true then spriteDraw(150, 175, sprite[CROSSMAP]) end

				moveCursor(iCurPos)			
				setCursor(iCurPos)
				spriteDraw(curx, cury, sprBox)
				
			end
			
		end
        
	elseif (lvlState == lvlEnd) then		
		
		currentLevel = levelNormal
		lvlState = lvlSetup		
		
		if (bDebug == true) then debugPrint("iCurPos = "  .. iCurPos) end
		if (bDebug == true) then debugPrint("Leaving doLevelSelect()") end
		
	end

end

function setMenuFrame()
		
	setupClip(offsetMap, offsetMapend)

end
