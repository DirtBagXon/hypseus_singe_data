--[[

PROGRAM NAME:	TIME TRAVELER (SINGE EDITION)
VERSION:		2.0
AUTHOR:			RDG2010

This file is part of TIME TRAVELER (SINGE EDITION)

    TIME TRAVELER (SINGE EDITION) is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation.

    TIME TRAVELER (SINGE EDITION) is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

    Read COPYING.TXT for more info.


]]--

function addPoints(thisMuch)

	iScore = iScore + thisMuch
	
	if (iScore > 99999999) then iScore = 99999999 end	

end

function reverseTime()

	if altState == lvlSetup then			
		
		bTurn = false -- Resets "turn and shoot" move.
		soundPlay(sndright)		
		setupClip(offsetMenus+150, offsetMenus+180)
		altState = branch01
		
	elseif altState == branch01 then
	
		if currentFrame == iFrameEnd then
		
			if currentMove > 1 then currentMove = currentMove - 1 end
			discSkipToFrame(iPauseFrame)
			discPause()
			altState = branch02
			if bDebug then debugPrint("going back to frame " .. iPauseFrame) end
		
		end	
	
	elseif altState == branch02 then
	
		if currentFrame <= move[currentMove][moveFrmStart] then
			altState = branch03
			timerON(1.25)
			discPause()
			
		else
			
			discStepBackward()
		end
		
	elseif altState == branch03 then
	
		if timerDue() then altState = lvlEnd end
	
	elseif altState == lvlEnd then
	
		lvlState = lvlRunning	
		discPlay()
		
	end	

end

function doLevel()

	local thisLevel = iCurPos

	if (lvlState == lvlSetup) then		
		
		if bDebug then debugPrint("Entering doLevel(). Playing stage " .. thisLevel) end	
		
		bPlayPrompt = true				
		bShowLives = true
		bShowCubes = true
		bShowScore = true
		bShowAction = false
		bTurn = false		
		currentMove = 1				
		setupLevel(thisLevel)
		
		if thisLevel == levelTut then
		
			bShowScore = false
			bShowCubes = false
			bShowLives = false
			discSkipToFrame(segmentStart)			
			lvlState = lvlRunning
		
		elseif not stage[thisLevel][LEVELSTARTED] then
		
			stage[thisLevel][LEVELSTARTED] = true
			getIntroClip(thisLevel)
			lvlState = branch01			
			
		else		
			
			discSkipToFrame(segmentStart)			
			lvlState = lvlRunning
		
		end			
		
	elseif (lvlState == branch01) then
	
		if (currentFrame == iFrameEnd) then		
		
			discSkipToFrame(segmentStart)			
			lvlState = lvlRunning
		
		end
	
	elseif (lvlState == branch02) then
	
		reverseTime()
	
	elseif (lvlState == branch03) then
	
		if currentFrame == move[currentMove][moveFrmStart] then lvlState = lvlRunning end
	
	elseif (lvlState == branch04) then
	
		if currentFrame >= segmentEnd then lvlState = lvlEnd end
		
	elseif (lvlState == branch05) then	
		
		if currentFrame == iFrameEnd then
		
			local j = 0
			for j=1,stage[thisLevel][SEGMENTCOUNT] do	
	
				segment[thisLevel][j][SEGMENTCOMPLETE] = true
			
			end		
			lvlState = lvlEnd
			
		end			
		
	elseif (lvlState == branch06) then
	
		if timerDue() then
		
			if BeatGameWithOneLife() then
			
				monoAudio(CHANNEL_RIGHT)
				setupClip(offsetMenus + 350, offsetMenus + 635)
				lvlState = branch08
		
			elseif newScore(iScore) then -- Has player achieved a high score?			
			
				lvlState = lvlSetup  
				currentLevel = levelHighScore	
			
			else			
			
				lvlState = lvlSetup
				currentLevel = levelGameOver		
			
			end
			
		end
		
	elseif (lvlState == branch07) then
	
		if currentFrame == iFrameEnd then lvlState = lvlEnd end
		
	elseif (lvlState == branch08) then
	
		if currentFrame == iFrameEnd then 
		
			bExtendedPlay = true
			startGame()
			
		end
		
	elseif (lvlState == lvlPlayRest) then
	
		if (currentFrame == move[currentMove][moveFrmEnd]) then
		
			currentMove = currentMove + 1
			if bDebug then debugPrint("Current Move is now: " .. currentMove) end
			
			if (currentMove <= totalMoves) then			
				
				-- If next move's start frame is right next to
				-- current move's end frame
				-- then don't skip to frame, let it flow...
				
				if ((currentFrame + 1) ~= move[currentMove][moveFrmStart]) then					
					discSkipToFrame(move[currentMove][moveFrmStart])					
				end
				
				bShowAction = false
				bPlayPrompt = true
				bTurn = false
				lvlState = lvlRunning				
				
			else
			
				-- segment beat! do some logic. move on to next segment.
				segment[thisLevel][iSegPointer][SEGMENTCOMPLETE] = true	

				if thisLevel == levelTut and stageBeat(levelTut) then
				
					iScore = 0
					lvlState = lvlSetup
					iCurPos = level01
					thisLevel = level01
					iSegPointer = 0
				
				elseif thisLevel == level08 and stageBeat(level08) then
					
					addPoints(100000)
					discSkipToFrame(offsetMenus + 73)
					discPause()
					timerON(2)
					lvlState = branch06	
					
				else
				
					if stage[thisLevel][DEATHCOUNT] < 4 then 
					
						addPoints(40000 - (stage[thisLevel][DEATHCOUNT] * 10000))
						
					end
					lvlState = branch04					
					
				end
			
			end
			
		end
	
	elseif (lvlState == lvlRunning) then
	
		if (currentFrame > move[currentMove][inputFrmEnd]) then
		
			iPauseFrame = move[currentMove][inputFrmEnd] --currentFrame			
			bShowAction = false						
			setupDeathClip(thisMove)						
			
	
		elseif (currentFrame >= move[currentMove][inputFrmStart] and currentFrame <= move[currentMove][inputFrmEnd]) then
		
			thisMove = scanInput()
			
			if dip_ShowAction then			
				
				if (bShowAction == false) then 
					bShowAction = true
					bQuestionMark = ((iCurPos >= level05 and iCurPos < levelTut) and (rndegg:value(1,100) > 85) and (move[currentMove][correctMove] ~= NOMOVE))
				end
			
			end
			
			if bPlayPrompt then
			
				--soundPlay(sndprompt) 
				bPlayPrompt = false
			end
			
			if (thisMove ~= NOMOVE) then				
				
				if turnAndShoot(currentMove) then
				
					thisMove = checkTurnAndShoot(thisMove, move[currentMove][correctMove])					
				
				end				
				
				if (thisMove == move[currentMove][correctMove]) then									
				
					bShowAction = false
					soundPlay(sndright)
					addPoints(CORRECTMOVE)					
					lvlState = lvlPlayRest
					
				elseif (thisMove ~= MOVEPENDING) then							
					
					iPauseFrame = move[currentMove][inputFrmEnd] --currentFrame			
					bShowAction = false				
					setupDeathClip(thisMove)					
				
				end
				
			end	
		
		else scanInput() -- Prevents joystick from getting 'stuck' in one position.
		
		end
		
	elseif (lvlState == lvlPlayDeath) then
	
		if (currentFrame == iFrameEnd) then
		
			iLives = iLives - 1			
			stage[thisLevel][DEATHCOUNT] = stage[thisLevel][DEATHCOUNT] + 1
			if dip_ShowWizard and iLives > 0 then
				getWizFrames(move[currentMove][wizType])
				lvlState = branch07
				
			else
				lvlState = lvlEnd
			
			end
			
		elseif (p1BUTTON2) then
		
			p1BUTTON2 = false			
			if iRevCubes > 0 then
				iRevCubes = iRevCubes - 1 
				altState = lvlSetup
				lvlState = branch02	
			else
				soundPlay(sndwrong)
			end
			
		end
		
	elseif (lvlState == lvlEnd) then
	
		lvlState = lvlSetup
		if (iLives == 0) then -- game over			
			
			if dip_AllowContinue and ((iContinues < dip_LimitContinue) or (dip_LimitContinue == DOPT_INFINITE_CONTINUES))  then
			
				iTempLevel = currentLevel				
				currentLevel = levelContinue			
				iContinues = iContinues + 1
				
			else
				
				if newScore(iScore) then -- Has player achieved a high score?							
					
					currentLevel = levelHighScore	
				
				else							
					
					currentLevel = levelGameOver		
				
				end				
				
			end			
			
		else		
			
			lvlState = lvlSetup
			if stageBeat(thisLevel) then
				
				stage[thisLevel][BEATSTATUS] = true
				levelMap[thisLevel] = true
				iSegPointer = 0
				addPoints(50000)
				
				if (dip_ShowHellgate and ((math.modf(rndegg:value(1000,10999))/1000) > 5)  and (thisLevel > 1 and thisLevel < 7)) then					
					
					currentLevel = levelHellgate
				
				else
				
					currentLevel = levelMenuScreen
					soundPlay(sndvictory)
					
					
				end
				
			else
				
				if EndOfStageReached(thisLevel) then 
				
					if thisLevel ~= level01 then
						currentLevel = levelMenuScreen 
						iSegPointer = 0				
					end
					
				elseif not segment[thisLevel][iSegPointer][SEGMENTCOMPLETE] then				
					
					if dip_MustBeatLevel or thisLevel >= 7 or thisLevel == level01 then
				
						if iSegPointer > 0 then iSegPointer = iSegPointer - 1 end
						
					end
					
				end				
			
			end
			
			bShowLives = false
			bShowCubes = false
			bShowAction = false

		end
	
		if bDebug then debugPrint("Leaving doLevel()") end
	
	end
	
end

function scanInput()

	local iResult = NOMOVE

	if     p1UP      then iResult = UP
	elseif p1DOWN    then iResult = DOWN
	elseif p1LEFT    then iResult = LEFT
	elseif p1RIGHT   then iResult = RIGHT
	elseif p1BUTTON1 then iResult = ACTION 
	elseif p1BUTTON2 then iResult = REVCUBE end
	
	p1UP      = false		
	p1DOWN    = false		
	p1LEFT    = false
	p1RIGHT   = false
	p1BUTTON1 = false
	p1BUTTON2 = false
	
	return iResult
	
end

function turnAndShoot(curMove)

	return ((move[curMove][correctMove] == TURNRIGHTSHOOT) or (move[curMove][correctMove] == TURNLEFTSHOOT))	
	
end

function checkTurnAndShoot(playerMove, curMove)

	--[[
	This function checks if the player made a successful 'turn and shoot' move.
	It function has to be called at least twice for it to return a success result.
	First it checks if player turned, then checks if player pressed the action button.
	
	]]--
	
	local z = MOVEPENDING
	local turnDir = 0 	
	
	if (bDebug == true) then debugPrint("Enterting checkTurnAndShoot" ) end	
	
		if (bDebug == true) then debugPrint("Checking for turn and shoot move") end
		-- Turn and shoot move
			
		if (bTurn == false) then	-- has player turned yet?
		
			-- Check which direction to turn
			-- save it in joyVal for later use in this function.
			
			if (curMove == TURNLEFTSHOOT) then 
			
				turnDir = LEFT 				
				if (bDebug == true) then debugPrint("turn to check is left") end
				
			else 
			
				turnDir = RIGHT 			
				if (bDebug == true) then debugPrint("turn to check is right") end
				
			end
			
			-- is player pressing the correct direction?
			
			if (turnDir == LEFT  and playerMove == LEFT) or
			   (turnDir == RIGHT and playerMove == RIGHT)then	-- Player is turning!
			
				bTurn = true				
				soundPlay(sndright)				
				if (bDebug == true) then debugPrint("Player turned! Play sndRight") end
				
			else
			
				-- is player pressing anything at all (not turn)?				
				
				if playerMove ~= NOMOVE then -- Death to player!
				
					z = MOVEFAIL
					if (bDebug == true) then debugPrint("No turn! player messed up!") end
				
				end				
			
			end
			
		else	-- Player has already turned, checking if fire button is pressed.
		
			if (bDebug == true) then debugPrint("Alright lets check if player is shooting") end
			
			-- is player shooting?
			if (playerMove == ACTION) then 	-- Player is shooting!		
				
				z = curMove
				soundPlay(sndright)
				if (bDebug == true) then debugPrint("Player fired gun!") end
			
			end
		
		end
		
	
	
	if (bDebug) then
	
		if (z == MOVEFAIL) then
			debugPrint("checkTurnAndShoot returns MOVEFAIL")
		elseif (z == TURNRIGHTSHOOT) then
			debugPrint("checkTurnAndShoot returns TURNRIGHTSHOOT")
		elseif (z == MOVEPENDING) then
			debugPrint("checkTurnAndShoot returns MOVEPENDING")	
		elseif (Z == TURNLEFTSHOOT) then
			debugPrint("checkTurnAndShoot returns TURNLEFTSHOOT")	
		else
			debugPrint("checkTurnAndShoot returns == "  .. z)	
		end
	
	end
	
	return z

end

function setupDeathClip(playerMove)
 
	if bDebug then debugPrint("Entering setupDeathClip()") end
	
	local bNothingFound = true
	local bPlayBuzzer = true
	
	-- Go through special cases, setup specific death clip if needed.
	lvlState = lvlPlayDeath
	
	if iCurPos == levelTut then
	
		if segID == SEGMENT01 then		
		
			if currentMove == 1 then
			
				if playerMove == RIGHT then
				
					local j = 0
					for j=1,stage[levelTut][SEGMENTCOUNT] do	
			
						segment[levelTut][j][SEGMENTCOMPLETE] = true
					
					end						
				
					setupClip(2540, 2636)	
					move[currentMove][moveFrmEnd] = iFrameEnd
					soundPlay(sndright)							
					
				elseif playerMove == LEFT or playerMove == NOMOVE then
					totalMoves = 1
					soundPlay(sndright)
					discSkipToFrame(move[currentMove][inputFrmEnd]+1)			
					
				end	
				lvlState = lvlPlayRest	
				bPlayBuzzer = false
				bNothingFound = false	
			
			else
			
				if playerMove == ACTION then				
				
					discSkipToFrame(move[currentMove][moveFrmEnd]-3) -- Subtract a few frames so branch lvlPlayRest in doLevel() works right.
				
				end
				lvlState = lvlPlayRest	
				bPlayBuzzer = false
				bNothingFound = false		
			
			end
		
		elseif segID == SEGMENT02 then
		
			if currentMove < 9 then
		
				setupClip(move[currentMove][deathFrmStart], move[currentMove][deathFrmEnd])
				if     currentMove >= 1 and currentMove <= 2 then currentMove = 2
				elseif currentMove >= 3 and currentMove <= 5 then currentMove = 5
				elseif currentMove >= 6 and currentMove <= 8 then currentMove = 8 end
				move[currentMove][moveFrmEnd] = iFrameEnd
				
			elseif currentMove >= 10 then
			
				if playerMove == ACTION then				
				
					discSkipToFrame(move[currentMove][moveFrmEnd]-3) -- Subtract a few frames so branch lvlPlayRest in doLevel() works right.
				
				end
				
			end
			
			lvlState = lvlPlayRest	
			bPlayBuzzer = false
			bNothingFound = false			
		
		end
	
	elseif iCurPos == level03 then  -- 2173
	
		if segID == SEGMENT01 then
		
			if playerMove == ACTION then
			
				setupClip(offsetvts06, offsetvts06 + 115)				
				bNothingFound = false
			
			else
			
				if currentMove == 4 then
				
					setupClip(offsetvts06 + 558, offsetvts06 + 610)				
					
				else
			
					setupClip(offsetvts06 + 115, offsetvts06 + 188)				
					
				end
				bNothingFound = false
			
			end			
		
		elseif segID == SEGMENT08 then
			
			if currentMove == 1 then
			
				if playerMove == ACTION then
				
					setupClip(offsetvts06 + 4560, offsetvts06 + 4660)
					bNothingFound = false
					
				else
				
					playerMove = NOMOVE
					bPlayBuzzer = false
					lvlState = lvlPlayRest
					bNothingFound = false
				
				end
			
			else
		
				if playerMove == ACTION then
				
					setupClip(offsetvts06 + 4560, offsetvts06 + 4660)
					bNothingFound = false
					
				elseif playerMove == RIGHT or playerMove == NOMOVE then
				
					setupClip(1126 + offsetMenus, 1502 + offsetMenus)
					bFailedMotherBrain = true				
					bNothingFound = false
				
				end
				
			end
			
		end			
	
	elseif iCurPos == level04 then -- 1998
	
		if segID == SEGMENT05 then
		
			if playerMove == RIGHT then
			
				setupClip(offsetvts07 + 3265, offsetvts07 + 3449)
				bNothingFound = false
			
			elseif playerMove == NOMOVE then
			
				setupClip(offsetvts07 + 3680, offsetvts07 + 3830)
				bNothingFound = false
			
			end
		
		end
		
	elseif iCurPos == level05 then -- Age of Magic
	
		if segID == SEGMENT02 then
		
			if currentMove == 1 or currentMove == 3 then
			
				if playerMove == ACTION or playerMove == RIGHT then
				
					setupClip(offsetvts08 + 2455, offsetvts08 + 2570)					
					
				else
				
					setupClip(offsetvts08 + 1430, offsetvts08 + 1605)					
				
				end				
				bNothingFound = false
				
			elseif currentMove == 2 or currentMove == 4 then
			 
				if playerMove == ACTION or playerMove == LEFT then
				
					setupClip(offsetvts08 + 2570, offsetvts08 + 2690)					
					
				else
				
					setupClip(offsetvts08 + 1605, offsetvts08 + 1785)					
				
				end				
				bNothingFound = false
			
			end
			
			
		elseif segID == SEGMENT04 then
		
			if currentMove == 1 then
			
				if playerMove == LEFT then
				
					setupClip(offsetvts08 + 2985, offsetvts08 + 3225)					
					bNothingFound = false
					
				else
				
					setupClip(offsetvts08 + 3225, offsetvts08 + 3278)					
					bNothingFound = false
				
				end		
				
			end
			
		elseif segID == SEGMENT06 then
		
			if currentMove == 1 then
			
				if playerMove == LEFT then
				
					setupClip(offsetvts08 + 5430, offsetvts08 + 5587)					
					bNothingFound = false
					
				else
				
					setupClip(offsetvts08 + 5825, offsetvts08 + 5888)					
					bNothingFound = false
				
				end		
				
			end
			
		
		end
		
	elseif iCurPos == level06 then -- 1350
	
		if segID == SEGMENT08 then
		
			if currentMove == 1 then
			
				if playerMove == REVCUBE and iRevCubes > 0 then
				
					iRevCubes = iRevCubes - 1				
					setupClip(offsetvts10 + 5745, offsetvts10 + 6005)					
					lvlState = branch05					
					soundPlay(sndright)
					
					
				else
				
					lvlState = lvlPlayRest
				
				end				
				bPlayBuzzer = false
				bNothingFound = false
				
			elseif currentMove == 2 then
			
				if playerMove == RIGHT or playerMove == NOMOVE then				
					
					setupClip(offsetvts10 + 4267, offsetvts10 + 4375)															
				
				else
				
					setupClip(offsetvts10 + 5055, offsetvts10 + 5135)
				
				end				
				bNothingFound = false
				
			elseif currentMove == 3 then
			
				if playerMove == NOMOVE then
				
					setupClip(offsetvts10 + 4375, offsetvts10 + 4485)
					
				else
				
					setupClip(offsetvts10 + 5055, offsetvts10 + 5135)
				
				end				
				bNothingFound = false
				
				
			elseif currentMove == 4 then
			
				if playerMove == RIGHT or playerMove == NOMOVE then				
					
					setupClip(offsetvts10 + 4267, offsetvts10 + 4375)				
					
				else
				
					setupClip(offsetvts10 + 5055, offsetvts10 + 5135)
				
				end				
				bNothingFound = false
				
			elseif currentMove >= 5 then
			
				if playerMove == NOMOVE then
					
					setupClip(offsetvts10 + 4375, offsetvts10 + 4485)
					
				elseif playerMove == RIGHT then
				
					ssetupClip(offsetvts10 + 4267, offsetvts10 + 4375)
					
				else
				
					setupClip(offsetvts10 + 5055, offsetvts10 + 5135)
				
				end				
				bNothingFound = false
				
			end
			
		end
		
	elseif iCurPos == level07 then -- 2552
	
		if segID == SEGMENT04 then
		
			if currentMove == 1 or currentMove == 2 then
			
				if playerMove == NOMOVE then
				
					lvlState = lvlPlayRest
					bPlayBuzzer = false									
					
				elseif playerMove == RIGHT then
				
					setupClip(offsetvts11 + 2875, offsetvts11 + 3087)
					
				else
				
					setupClip(offsetvts11 + 2765, offsetvts11 + 2875)
				
				end
				bNothingFound = false
			
			elseif currentMove == 3 then
			
				if playerMove == NOMOVE then
				
					lvlState = lvlPlayRest
					bPlayBuzzer = false
					bNothingFound = false
					
				elseif playerMove == RIGHT then
				
					setupClip(offsetvts11 + 2390, offsetvts11 + 2765)
					
				else
				
					setupClip(offsetvts11 + 2765, offsetvts11 + 2875)
				
				end
				bNothingFound = false
			
			elseif currentMove == 4 then
			
				if playerMove == NOMOVE then
				
					setupClip(offsetvts11 + 3888, offsetvts11 + 4022)									
					
				else
				
					setupClip(offsetvts11 + 2765, offsetvts11 + 2875)
				
				end
				bNothingFound = false
				
			elseif currentMove == 5 then			
				
				if playerMove == NOMOVE then
				
					setupClip(offsetvts11 + 3888, offsetvts11 + 4022)									
					
				else
				
					setupClip(offsetvts11 + 2765, offsetvts11 + 2875)
				
				end
				bNothingFound = false
				
			end
		
		end
		
	elseif iCurPos == level08 then
	
		if segID == SEGMENT01 then
		
			if currentMove == 1 then
		
				if playerMove == ACTION then
		
					setupClip(offsetvts15, offsetvts15 + 98)
					
				elseif playerMove == NOMOVE or playerMove == DOWN then
		
					lvlState = lvlPlayRest
					bPlayBuzzer = false
					bNothingFound = false
					
				else
		
					setupClip(offsetvts15 + 98, offsetvts15 + 170)
				
				end
				bNothingFound = false
				
			end
			
		elseif segID == SEGMENT02 then
		
			if currentMove == 1 then
			
				if playerMove == RIGHT then
				
					setupClip(offsetvts15 + 545, offsetvts15 + 666)
					
				else
				
					setupClip(offsetvts15 + 666, offsetvts15 + 755)
					
				end
				bNothingFound = false			
				
			elseif currentMove == 3 then
			
				if playerMove == RIGHT then
				
					setupClip(offsetvts15 + 545, offsetvts15 + 666)
					
				else
				
					setupClip(offsetvts15 + 855, offsetvts15 + 945)
					
				end
				bNothingFound = false
				
			elseif currentMove == 4 or currentMove == 6 or currentMove == 7 then
			
				if playerMove == RIGHT then
				
					setupClip(offsetvts15 + 545, offsetvts15 + 666)
					
				else
				
					setupClip(offsetvts15 + 755, offsetvts15 + 855)
					
				end
				bNothingFound = false
				
			elseif currentMove == 5 then
			
				if playerMove == RIGHT then
				
					setupClip(offsetvts15 + 545, offsetvts15 + 666)
					
				else
				
					setupClip(offsetvts15 + 855, offsetvts15 + 945)
					
				end				
				bNothingFound = false
			
			end
		
		end
		
	end
	
	if bNothingFound then -- if no special cases found, then use default clips from the move array.

		if turnAndShoot(currentMove) and bTurn then
		
			setupClip(move[currentMove][altdeathStart], move[currentMove][altdeathEnd])
		else
		
			setupClip(move[currentMove][deathFrmStart], move[currentMove][deathFrmEnd])
		end		
	
	end
	
	if bPlayBuzzer then soundPlay(sndwrong) end
	
	if bDebug then debugPrint("Leaving setupDeathClip()") end


end
