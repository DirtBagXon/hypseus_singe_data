--[[

PROGRAM NAME:	TIME TRAVELER (SINGE EDITION)
VERSION:		2.0
AUTHOR:			RDG2010

This file is part of TIME TRAVELER (SINGE EDITION)

    TIME TRAVELER (SINGE EDITION) is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation.

    TIME TRAVELER (SINGE EDITION) is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

    Read COPYING.TXT for more info.


]]--

optSel = 0

function readConfig()

	local s1
	local hsName = ""
	local hsScore = ""
	local k = 0
	local h1 = io.input("singe/timetraveler/htt.cfg")	

	if (bDebug) then debugPrint ("Entering readConfig()") end

		local s1 = io.read("*line")		

		if (s1 ~= nil) then

			dip_CoinsPerCredit = tonumber(string.sub(s1,string.find(s1,"=")+1))			
			
		end
		
		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_LivesPerCredit = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end
		
		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_RevCubeMax = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end
		
		s1 = io.read("*line")
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))	
		
		if (s1 ~= nil) then
		
			if (s1 == 1) then
				dip_ShowAction = true
			else
				dip_ShowAction = false
			end
		end		
		
		s1 = io.read("*line")
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))	
		
		if (s1 ~= nil) then
		
			if (s1 == 1) then
				dip_ShowWizard = true
			else
				dip_ShowWizard = false
			end
		end		
		
		s1 = io.read("*line")
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))	
		
		if (s1 ~= nil) then
		
			if (s1 == 1) then
				dip_ShowHellgate = true
			else
				dip_ShowHellgate = false
			end
		end
		
		s1 = io.read("*line")
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))	
		
		if (s1 ~= nil) then
		
			if (s1 == 1) then
				dip_AllowContinue = true
			else
				dip_AllowContinue = false
			end
		end
		
		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_LimitContinue = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end
		
		s1 = io.read("*line")
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))	
		
		if (s1 ~= nil) then
		
			if (s1 == 1) then
				dip_MustBeatLevel = true
			else
				dip_MustBeatLevel = false
			end
			
		end		
		
		s1 = io.read("*line")
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))	
		
		if (s1 ~= nil) then
		
			if (s1 == 1) then
				dip_PlayEveryLevel = true
			else
				dip_PlayEveryLevel = false
			end
			
		end		
		
		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_Lang = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		highscore = nil; highscore = {}
		for k=1,5 do
			s1 = io.read("*line")
			
			hsName = string.sub(s1,1,string.find(s1,",")-1)
			hsScore = string.sub(s1,string.find(s1,",")+1, string.len(s1))
			
			highscore[k] = {}
			highscore[k] = {hsName, hsScore}
		
		end		
		
		io.close(h1)
		
		if (bDebug) then debugPrint ("Leaving readConfig()") end

end

function writeConfig()

	-- This function writes the values of the dip variables
	-- into an external data file.

	local sNewLine = "\n"
	local s1 = ""

	local h1 = io.output("singe/timetraveler/htt.cfg")
	
	io.write("dip_CoinsPerCredit = " .. dip_CoinsPerCredit .. sNewLine)
	io.write("dip_LivesPerCredit = " .. dip_LivesPerCredit .. sNewLine)	
	io.write("dip_RevCubeMax = " .. dip_RevCubeMax .. sNewLine)	
		
	if (dip_ShowAction == true) then
		io.write("dip_ShowAction = 1" .. sNewLine)
	else
		io.write("dip_ShowAction = 0" .. sNewLine)
	end	
	
	if (dip_ShowWizard == true) then
		io.write("dip_ShowWizard = 1" .. sNewLine)
	else
		io.write("dip_ShowWizard = 0" .. sNewLine)
	end	
	
	if (dip_ShowHellgate == true) then
		io.write("dip_ShowHellgate = 1" .. sNewLine)
	else
		io.write("dip_ShowHellgate = 0" .. sNewLine)
	end	
	
	if (dip_AllowContinue == true) then
		io.write("dip_AllowContinue = 1" .. sNewLine)
	else
		io.write("dip_AllowContinue = 0" .. sNewLine)
	end
	
	io.write("dip_LimitContinue = " .. dip_LimitContinue .. sNewLine)	
	
	if (dip_MustBeatLevel == true) then
		io.write("dip_MustBeatLevel = 1" .. sNewLine)
	else
		io.write("dip_MustBeatLevel = 0" .. sNewLine)
	end		
	
	if (dip_PlayEveryLevel == true) then
		io.write("dip_PlayEveryLevel = 1" .. sNewLine)
	else
		io.write("dip_PlayEveryLevel = 0" .. sNewLine)
	end	
	
	io.write("dip_Lang = " .. dip_Lang .. sNewLine)		
	io.write(sNewLine)	
	
	for k=1,5 do
		
		
		s1 = highscore[k][1] .. "," .. highscore[k][2]
		io.write(s1 .. sNewLine)
	
	end
	
	io.write(sNewLine)	
	io.close(h1)

end

function updateOpts(thisIndex)

	if (thisIndex == 1) then
	
		dip_CoinsPerCredit = dip_CoinsPerCredit + 1
		
		if (dip_CoinsPerCredit > 3) then
		
			dip_CoinsPerCredit = 0
		
		end

	elseif (thisIndex == 2) then	
	
		dip_LivesPerCredit = dip_LivesPerCredit + 1
	
		if (dip_LivesPerCredit > 6) then
		
			dip_LivesPerCredit = 3
			
		end		
		
	elseif (thisIndex == 3) then	
	
		dip_RevCubeMax = dip_RevCubeMax + 1
	
		if (dip_RevCubeMax > 6) then
		
			dip_RevCubeMax = 1
			
		end		
		
	elseif (thisIndex == 4) then
	
		dip_ShowAction = not dip_ShowAction	

	elseif (thisIndex == 5) then
	
		dip_ShowWizard = not dip_ShowWizard
		
	elseif (thisIndex == 6) then
	
		dip_ShowHellgate = not dip_ShowHellgate	

	elseif (thisIndex == 7) then
	
		dip_AllowContinue = not dip_AllowContinue 
	
	elseif (thisIndex == 8) then
	
		dip_LimitContinue  = dip_LimitContinue  + 1
		
		if (dip_LimitContinue  > 5) then
		
			dip_LimitContinue = 0
		
		end
		
	elseif (thisIndex == 9) then
	
		dip_MustBeatLevel = not dip_MustBeatLevel
		
	elseif (thisIndex == 10) then
	
		dip_PlayEveryLevel= not dip_PlayEveryLevel		
		
	elseif (thisIndex == 11) then		

		lvlState = lvlEnd
		
	end

end

function printOpts()

	-- This function writes the options on the service menu screen.
	local k = 0
	local ypos = 0
	local fntx = 270
	local smenu = {}; 
	
	smenu[1] = "Coins per Credit"
	smenu[2] = "Lives per Credit"
	smenu[3] = "Max Reversal Cubes"
	smenu[4] = "Show Action Arrows?"
	smenu[5] = "Show Wizard?"
	smenu[6] = "Show Hellgate?"
	smenu[7] = "Allow Continue?"
	smenu[8] = "Max Continues"			
	smenu[9] = "Repeat lvl Until Beat?"	
	smenu[10] = "Play all scenes?"	
	smenu[11] = "EXIT"	
	
	textPrint("PROGRAMMED BY RDG2010. VERSION 2.0",68,210,fontDebug6pt,GREY,BLACK)
	fontSelect(fontDebug8pt)	
	setFontColor(YELLOW)
	fontPrint(132,65, "OPTIONS MENU")	
	
	for k=1,11 do
		
		ypos = 83+k*8
		if k == optSel then setFontColor(GREEN) else setFontColor(GREY) end		
		if k == 11 then fontPrint(164,185, "EXIT") else fontPrint(65, ypos, smenu[k]) end
		
		if (k == 1) then
		
			if (dip_CoinsPerCredit == DOPT_FREEPLAY) then
				
				fontPrint(fntx,ypos, "FREE PLAY")
				
			else
			
				fontPrint(fntx,ypos, dip_CoinsPerCredit)
			end
	
		elseif (k == 2) then		
		
			fontPrint(fntx, ypos, dip_LivesPerCredit)			
			
		elseif (k == 3) then		
		
			fontPrint(fntx, ypos, dip_RevCubeMax)
	
		elseif (k == 4) then
		
			if dip_ShowAction then			
			
				fontPrint(fntx, ypos, "YES")	
				
			
			else
			
				fontPrint(fntx, ypos, "NO")	
				
			
			end
		
		elseif (k == 5) then		
			
			if dip_ShowWizard then
			
				fontPrint(fntx, ypos, "YES")	
				
			
			else
			
				fontPrint(fntx, ypos, "NO")
				
			
			end
			
		elseif (k == 6) then		
		
			if dip_ShowHellgate then
			
				fontPrint(fntx, ypos, "YES")	
				
			
			else
			
				fontPrint(fntx, ypos, "NO")
				
			
			end
			
		elseif (k == 7) then		
			
			if dip_AllowContinue then
			
				fontPrint(fntx, ypos, "YES")	
				
			
			else
			
				fontPrint(fntx, ypos, "NO")
				
			
			end
			
		elseif (k == 8) then		
		
			if dip_LimitContinue == 0 then
				
				fontPrint(fntx, ypos, "UNLIMITED")	
			
			else
		
				fontPrint(fntx, ypos, dip_LimitContinue)	
				
			end
			
		elseif (k == 9) then
		
			if dip_MustBeatLevel then			
			
				fontPrint(fntx, ypos, "YES")				
			
			else
			
				fontPrint(fntx, ypos, "NO")			
			
			end	
			
		elseif (k == 10) then
		
			if dip_PlayEveryLevel then
			
				fontPrint(fntx, ypos, "YES")
				
			else
			
				fontPrint(fntx, ypos, "NO")			
			
			end
		
		end

	end

end

function doServiceMenu()

	-- This is the main function for the service menu screen.
	
	local gunx = 42
	local optMax = 11
	
	if (lvlState == lvlSetup) then
	
		if (bDebug) then debugPrint ("Entering doServiceMenu()") end

		discSkipToFrame(offsetvts01 + 255)
		discPause()		
		timerOFF()		
		optSel = 1
		readConfig()		
		bShowScore = false
		bShowLives = false		
		bShowCredits = false
		bShowLCD = false
		bShowAction = false	
		bShowCubes = false
		bIgnoreJoy = false
		
		lvlState = lvlRunning
	
	elseif (lvlState == lvlRunning) then
	
		if (p1BUTTON1) then
		
			p1BUTTON1 = false
			soundPlay(sndcredit)
			updateOpts(optSel)	
			
		elseif (p1DOWN or p1UP) then
		
			
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end
				
			else
				
				if p1DOWN then 
					optSel = optSel + 1
					if (optSel > optMax) then optSel = 1 end
				elseif p1UP then 
					optSel = optSel - 1
					if (optSel < 1) then optSel = optMax end
				end
				
				soundPlay(sndcoin)
				if p1UP or p1DOWN or p1LEFT or p1RIGHT or p1BUTTON1 then
					bIgnoreJoy = true
					joyDelayON(0.200)
				end
				
				p1DOWN = false; p1UP = false	
				
			end
			
		end
		printOpts()

	elseif (lvlState == lvlEnd) then
	
		writeConfig()		
		gameflow = flow_GameInit
		if (bDebug) then debugPrint ("Leaving doServiceMenu()") end	

	end

end
