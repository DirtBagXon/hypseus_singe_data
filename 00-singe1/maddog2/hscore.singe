--[[

PROGRAM NAME:	MAD DOG 2 THE LOST GOLD (SINGE EDITION)
AUTHOR:			RDG2010

This file is part of MAD DOG 2 THE LOST GOLD (SINGE EDITION)

    MAD DOG 2 THE LOST GOLD (SINGE EDITION) is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation.

    MAD DOG 2 THE LOST GOLD (SINGE EDITION) is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

    Read COPYING.TXT for more info.


]]--



LETTER_A = 1
LETTER_B = 2
LETTER_C = 3
LETTER_D = 4
LETTER_E = 5
LETTER_F = 6
LETTER_G = 7
LETTER_H = 8
LETTER_I = 9
LETTER_J = 10
LETTER_K = 11
LETTER_L = 12
LETTER_M = 13
LETTER_N = 14
LETTER_O = 15
LETTER_P = 16
LETTER_Q = 17
LETTER_R = 18
LETTER_S = 19
LETTER_T = 20
LETTER_U = 21
LETTER_V = 22
LETTER_W = 23
LETTER_X = 24
LETTER_Y = 25
LETTER_Z = 26
LETTER_NONE = -1

HS_RUB = 27
HS_END = 28

bHSDone = true
bHSMute = true

highscore = nil; highscore = {}


--Already called in cdrom-globals
--fontOldWestpt28pt = fontLoad("singe/maddog2/gambler.ttf", 28)

function GetHighScoreArray()

hitbox = nil; hitbox = {}

-- \highscore table.mdg

hitbox[1] = {}; hitbox[1] = {77, 128, 93, 151}
hitbox[2] = {}; hitbox[2] = {97, 128, 112, 151}
hitbox[3] = {}; hitbox[3] = {117, 128, 131, 151}
hitbox[4] = {}; hitbox[4] = {135, 128, 150, 151}
hitbox[5] = {}; hitbox[5] = {154, 128, 169, 151}
hitbox[6] = {}; hitbox[6] = {173, 128, 188, 151}
hitbox[7] = {}; hitbox[7] = {193, 128, 207, 151}
hitbox[8] = {}; hitbox[8] = {211, 128, 227, 151}
hitbox[9] = {}; hitbox[9] = {232, 128, 245, 152}
hitbox[10] = {}; hitbox[10] = {249, 128, 260, 152}
hitbox[11] = {}; hitbox[11] = {265, 128, 280, 152}
hitbox[12] = {}; hitbox[12] = {78, 158, 94, 184}
hitbox[13] = {}; hitbox[13] = {97, 158, 117, 184}
hitbox[14] = {}; hitbox[14] = {120, 158, 136, 184}
hitbox[15] = {}; hitbox[15] = {140, 158, 155, 184}
hitbox[16] = {}; hitbox[16] = {158, 158, 174, 184}
hitbox[17] = {}; hitbox[17] = {178, 159, 195, 187}
hitbox[18] = {}; hitbox[18] = {198, 159, 212, 184}
hitbox[19] = {}; hitbox[19] = {215, 158, 232, 185}
hitbox[20] = {}; hitbox[20] = {236, 159, 251, 184}
hitbox[21] = {}; hitbox[21] = {255, 159, 270, 185}
hitbox[22] = {}; hitbox[22] = {80, 190, 96, 215}
hitbox[23] = {}; hitbox[23] = {99, 190, 119, 215}
hitbox[24] = {}; hitbox[24] = {122, 190, 141, 216}
hitbox[25] = {}; hitbox[25] = {144, 190, 161, 216}
hitbox[26] = {}; hitbox[26] = {164, 190, 178, 216}
hitbox[27] = {}; hitbox[27] = {199, 190, 236, 215}
hitbox[28] = {}; hitbox[28] = {240, 190, 278, 215}

hitmap = nil; hitmap = {}
hitmap[1] = {}; hitmap[1] = {1, 1, 28, 0, 0, 0}

end

function doHighScore()

	local k = 0

	if (lvlState == lvlSetup) then
	
		if bDebug then debugPrint("Entering doHighScore()") end
	
		colorForeground(0, 255, 0)
		
		GetHighScoreArray()
		sName = ""
		bShowMouse = true
		bShowScore = false
		bShowCredits = false
		bHSMute = true
		bHSDone = false
		
		changeCursor()
		
		levelFrameStart = offsetMenus + 2481
		levelFrameEnd = offsetMenus + 3422 		
		discSkipToFrame(levelFrameStart)
		
		lvlState = lvlRunning
	
	elseif (lvlState == lvlRunning) then
	
		if (currentFrame >= levelFrameEnd) then
		
			if (sName == "") then 
				
				doHighScoreGetName() 				
				
			end
			
			updateHS(sName, iScore)
			writeConfig()				
			bHSDone = true
			
			lvlState = levelPlayClip1
			bShowMouse = false			
			discSkipToFrame(offsetMenus + 3515)				
				
		elseif (currentFrame <= offsetMenus + 3275) then		
		
			if (p1BUTTON3) then
			
				p1BUTTON3 = false
				k = letterScan()
				iBullets = dip_MaxBullets
				
				if (k ~= LETTER_NONE) then
				
					if (k == HS_RUB) then					
						
						letterSubtract()
					
					elseif (k == HS_END) then
					
						if (sName == "") then doHighScoreGetName() end
					
						discSkipToFrame(offsetMenus + 3275) 						
						soundPlay(sndGunshot)
					
					else
						
						letterAdd(k)					
						soundPlay(sndGunshot)
					
					end
				
				end		
			
			end
			
			if not bHSDone then drawName() end
		
		end
		
	elseif (lvlState == levelPlayClip1) then
	
		if (currentFrame == offsetMenus + 3885) then
			
			lvlState = lvlEnd
			
		else

			drawHStable()
			
		end	
	
	elseif (lvlState == lvlEnd) then
	
		updateCursor()
		
		iScore = 0
		lvlState = lvlSetup		
		sNicks = nil
		currentLevel = levelGameOver
		bShowCredits = true
		
		if bDebug then debugPrint("Leaving doHighScore()") end
	
	end


end

function doHighScoreGetName()


	local sNicks = nil
	sNicks = {}; sNicks = {"NASTYDAN","H.HARRY","TRIXIE","ELLOCO","BEAVER","BONNIE","THEKID","SKYE","ZELLER","KAYLA"}
	sName = sNicks[rndegg:value(1,10)]

end

function drawHStable()

	local k = 0
	local posy = 65
	local s1 = ""
	local s2 = ""
	
	colorForeground(0, 255, 0)
	fontSelect(fontOldWest28pt)
	fontPrint(95, 20, "T O P  S H O O T E R S")
	fontSelect(fontOldWest24pt)

	for k=1,6 do
	
		s1 = tostring(k) .. ". " .. highscore[k][1]
		s2 = highscore[k][2]
		fontPrint(80,posy, s1)
		fontPrint(230,posy, s2)
		posy = posy + 26
	
	end

end

function drawName()
	
	local k = 0
	local posx = 64
	local p = string.len(sName)	

	fontSelect(fontOldWest28pt)
	colorForeground(94, 18, 0)

	for k=1,p do
	
		sprName = nil
		sprName = fontToSprite(string.sub(sName,k,k))
		spriteDraw(posx, 74, sprName)
		posx = posx + 32
	
	
	end

end

function letterScan()

	local k = 0
	local f1 = 0
	local f2 = 0
	local x1 = 0
	local x2 = 0
	local y2 = 0
	local y3 = 0
	local thisLetter = LETTER_NONE
	
	f1 = hitmap[1][hitmapIndex]
	f2 = f1 + (hitmap[1][hitmapCount]-1)
	
	for k=f1,f2 do
		
		x1 = hitbox[k][bbx1]
		y1 = hitbox[k][bby1]
		x2 = hitbox[k][bbx2]
		y2 = hitbox[k][bby2]
		
		if (mousex >= x1 and mousex <= x2) and (mousey >= y1 and mousey <= y2) then	-- Player hit!
			
			thisLetter = k
			break
		
		end
		
	end
	
	return thisLetter


end

function letterAdd(thisLetter)

	local sAlph = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	
	if (string.len(sName) < 8) then
	
		s1 = string.sub(sAlph, thisLetter, thisLetter)

		sName = string.format("%s%s", sName, s1)
		soundPlay(sndGunshot)		
		
	end
	
end

function letterSubtract()

	local k = string.len(sName)
	
	if (k >= 1) then

		sName = string.sub(sName,1,(k-1))
		soundPlay(sndBreak)
		
	end
end

function newScore(thisScore)

	local bResult = false
	local k = 0
	
	for k=1,6 do
	
		if (tonumber(thisScore) >= tonumber(highscore[k][2])) then
			
			bResult = true			
			break
		
		end	
	
	end
	
	return bResult

end

function changeCursor()

	sprCursor = nil
	sprCursor  = spriteLoad("singe/maddog2/crosshaird.png")
	cursoroffsetx = 11; cursoroffsety = 12

end

function updateCursor()

	sprCursor = nil
	if (dip_Crosshair == 1) then

		sprCursor  = spriteLoad("singe/maddog2/crosshaira.png")
		cursoroffsetx = 3; cursoroffsety = 3
		
	elseif (dip_Crosshair == 2) then

		sprCursor  = spriteLoad("singe/maddog2/crosshairb.png")
		cursoroffsetx = 6; cursoroffsety = 6
		
	elseif (dip_Crosshair == 3) then

		sprCursor  = spriteLoad("singe/maddog2/crosshairc.png")
		cursoroffsetx = 0; cursoroffsety = 0
		
	elseif (dip_Crosshair == 4) then

		sprCursor  = spriteLoad("singe/maddog2/crosshaird.png")
		cursoroffsetx = 11; cursoroffsety = 12
		
	elseif (dip_Crosshair == 5) then

		sprCursor  = spriteLoad("singe/maddog2/crosshaire.png")
		cursoroffsetx = 0; cursoroffsety = 0
		
	end


end

function updateHS(thisName, thisScore)

	local k = 0
	local tempName = ""
	local tempScore = ""
	local tempHS = nil
	local bFound = false
	local fromHere = 0
	
	tempHS = {}
	
	for k=1,6 do
	
		tempHS[k] = {}
		tempHS[k] = {highscore[k][1], highscore[k][2]}
		
	end
		
	for k=1,6 do
	
		tempName = highscore[k][1]
		tempScore = highscore[k][2]
	
		if (tonumber(thisScore) >= tonumber(highscore[k][2])) then
		
			bFound = true
			highscore[k][1] = thisName
			highscore[k][2] = thisScore
			fromHere = k
			break
		
		end
	
	
	end
	
	if bFound then
		
		for k=fromHere,5 do
		
			highscore[k+1][1] = tempHS[k][1]
			highscore[k+1][2] = tempHS[k][2]
		
		end	

	end
	
end
