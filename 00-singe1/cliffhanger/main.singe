--[[

PROGRAM NAME:	TITAN A.E.
VERSION:		1.2
AUTHOR:			KARIS (2019)

This file is part of TITAN A.E.

	TITAN A.E. is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation.

	TITAN A.E. is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

	Thanks to Scott Duensing (author of Singe), Don Bluth & Gary Goldman.

]]--

function addPoints(thisMuch)

	iScore = iScore + thisMuch
	
	if (iScore > 99999999) then iScore = 99999999 end	

end

function BeatGameWithOneLife()

	local k = 0
	local j = 0
	local q = 0
	
	if dip_Debug then debugPrint("Entering BeatGameWithOneLife()") end
	
	for q=level01,finalstage do
	
		j = j + stage[q][DEATHCOUNT]
		
	end
	
	if dip_Debug then debugPrint("Leaving BeatGameWithOneLife()") end
	
	return (j == 0)

end

function BeatGameWithOneCredit()

	local j = 0
	
	j = j + iContinues
			
	return (j == 0)

end

function checkSkip(playerMove, curMove)

	local z = curMove
		
	if (playerMove == BUTTON1 or playerMove == BUTTON2 or playerMove == BUTTON3 or playerMove == UP or playerMove == DOWN or playerMove == LEFT or playerMove == RIGHT) then 
			
			p1BUTTON1 = false
			p1BUTTON2 = false
			p1BUTTON3 = false
			p1UP = false
			p1DOWN = false
			p1LEFT = false
			p1RIGHT = false

			bShowAction = false
			discSkipToFrame(move[currentMove][inputFrmEnd])
			
	else

														
	end	

	return z

end

function doContinue()

	if (lvlState == lvlSetup) then
	
		if dip_Debug then debugPrint("Entering doContinue()") end		
		
		
		setupClip(offsetContinue,offsetContinueend)		
		bShowLives = false
		bShowScore = false
		bShowCredits = true
		bShowAction = false
		bTestMash = false
		iMash = 0
		
		lvlState = lvlRunning		
	
	elseif (lvlState == lvlRunning) then

		if currentFrame == iFrameEnd then
			
			lvlState = lvlEnd
		
		elseif (p1START1) then
		
			p1START1 = false
			
			if (iCredits > 0 or dip_CoinsPerCredit == DOPT_FREEPLAY) then

				bSkipIntroClip = true
				if iSegPointer > 0 then iSegPointer = iSegPointer - 1 end
				startGame()								
				if dip_Debug then debugPrint("Leaving doContinue(). Continuing game.") end
			
			end
		
		end
		
	elseif (lvlState == lvlEnd) then
	
		lvlState = lvlSetup
		bSkipIntroClip = false
				
		if newScore(iScore) then -- Has player achieved a high score?							
			
			currentLevel = levelHighScore
			bGOAlt = true	
			
		else							
			
			currentLevel = levelGameOver		
		
		end		
		
		if dip_Debug then debugPrint("Leaving doContinue().") end
	
	end

end

function doFillerFrame()

	if dip_Debug then debugPrint("Entering doFillerFrame()") end
	
	local b1 = true
	local k = 0
	
	for k=1,2 do
		b1 = b1 and filler[k]
	end
	
	if b1 then
	
		for k=1,2 do
		
			if k ~= iLastFiller then filler[k] = false end
		
		end

	end
	b1 = false
	repeat
	
		k = rndegg:value(1,2)
		if filler[k] == false then
		
			iLastFiller = k
			filler[k] = true
			b1 = true
		
		end
		
	until b1	
	
	if     iLastFiller  == 1 then setupClip(offsetIntro02, offsetIntro02end)
	elseif iLastFiller  == 2 then setupClip(offsetIntro03, offsetIntro03end)

	end
		
	if dip_Debug then debugPrint("Leaving doFillerFrame()") end

end

function doFinish()
	
	if bShowTitle == true then

			fontSelect(fontLCD)
			setFontColor(mycolor3)
			fontPrint(getMiddle("LEVEL CLEARED"),LINEH*2, "LEVEL CLEARED")
		
	end		

	if (lvlState == lvlSetup) then

		setupClip(offsetClear, offsetClearend)	
		lvlState = branch02	

	elseif (lvlState == branch02) then
				
		if (currentFrame == iFrameEnd) then 
			
			timerON(1)
			discPause()
			lvlState = branch03
			
		end
	
	elseif (lvlState == branch03) then
				
		if timerDue() then 
			
			timerON(2)
			discPause()
			soundPlay(sndcredit)
			lvlState = branch04
			
		end

	elseif lvlState == branch04 then

		
		if timerDue() then

			timerON(2)
			discPause()
			soundPlay(sndcredit)
			lvlState = branch05

		else



			spriteDraw(OVLW/3,OVLH/3,sprite[LEVEL])
			spriteDraw(OVLW/3+NUMW+LEVELW,OVLH/3,sprite[SCORE])
			drawSpriteNumber(OVLW/2+NUMW+LEVELW, OVLH/3,iScoreTemp)
	
		end

	elseif lvlState == branch05 then

		
		if timerDue() then
			
			timerON(1)
			discPause()
			soundPlay(sndvictory)
			lvlState = branch06

		else

			spriteDraw(OVLW/3.2,OVLH/3,sprite[LEVEL])
			spriteDraw(OVLW/3+NUMW+LEVELW,OVLH/3,sprite[SCORE])
			drawSpriteNumber(OVLW/2+NUMW+LEVELW, OVLH/3,iScoreTemp)
			spriteDraw(OVLW/3.2,OVLH/2,sprite[BONUS])
			spriteDraw(OVLW/3+NUMW+LEVELW,OVLH/2,sprite[SCORE])
			drawSpriteNumber(OVLW/2+NUMW+LEVELW, OVLH/2, iBonus)

		end

	elseif lvlState == branch06 then

		
		if timerDue() then

			iScoreTemp = 0
			iBonus = 0
			
			if bAllowMap == true and MapStart == 0 then

				lvlState = lvlSetup
				currentLevel = levelMenuScreen	

			else
				
				NextLevel(iCurPos)
				lvlState = lvlSetup
				currentLevel = levelNormal		

			end		

		else

			spriteDraw(OVLW/3.2,OVLH/3,sprite[LEVEL])
			spriteDraw(OVLW/3+NUMW+LEVELW,OVLH/3,sprite[SCORE])
			drawSpriteNumber(OVLW/2+NUMW+LEVELW, OVLH/3,iScoreTemp)
			spriteDraw(OVLW/3.2,OVLH/2,sprite[BONUS])
			spriteDraw(OVLW/3+NUMW+LEVELW,OVLH/2,sprite[SCORE])
			drawSpriteNumber(OVLW/2+NUMW+LEVELW, OVLH/2, iBonus)
		
		end

	end

end

function doGameOver()

	if (lvlState == lvlSetup) then

		if dip_Debug then debugPrint("Entering doGameOver()") end
		bShowLives = false
		bShowScore = false
		bShowCredits = false
		bShowAction = false	
		bTestMash = false
		iMash = 0

		if bGOAlt == true then

			setupClip(offsetGameOverAlt, offsetGameOverAltend)
			bGOAlt = false

		else
		
			setupClip(offsetGameOver, offsetGameOverend)

		end	

		
		lvlState = lvlRunning
	
	elseif (lvlState == lvlRunning) then
	
		if (currentFrame == iFrameEnd) then
			
			bShowScore = false
			lvlState = lvlEnd		

		end	
	
	elseif (lvlState == lvlEnd) then
	
		lvlState = lvlSetup
		currentLevel = levelIntro	
		if dip_Debug then debugPrint("Leaving doGameOver()") end
	
	end

end

function doIntro()
	
	if (lvlState == lvlSetup) then
		
		if dip_Debug then debugPrint("Entering doIntro()") end	
		
		setupClip(offsetIntro01, offsetIntro01end)  -- ATTRACT	
		lvlState = branch01		
		
		bShowCredits = true
		bShowLives = false
		bCheckForCredits = true

	elseif (lvlState == branch01) then

		if (currentFrame == iFrameEnd or p1BUTTON1) then
			
			p1BUTTON1 = false
			discSkipToFrame(frameCommands)
			discPause()
			timerON(15)			
			lvlState = branch02			
	
		end
			
	elseif (lvlState == branch02) then
		
		if timerDue() then

			local k = 0
			fontSelect(fontGame10pt)	
			setFontColor(mycolor1)
			discSkipToFrame(frameRankings)
			timerON(5)
			discPause()
							
			lvlState = branch03

		elseif (p1BUTTON2 and p1BUTTON3 and p1UP and p1DOWN and bAllowSecret) then

			p1BUTTON2 = false
			p1BUTTON3 = false
			p1UP = false
			p1DOWN = false
				
			bExtendedPlay = true
			startGame()
			bShowCredits = false
		
		end	
		
	elseif (lvlState == branch03) then
		
		if timerDue() then

			lvlState = lvlSetup

		else
				
			drawHS()		
		
		end	
		
	elseif (lvlState == branch04) then
		
		if currentFrame == iFrameEnd then lvlState = lvlSetup end
		
	elseif (lvlState == branch05) then
		
		if timerDue() then
		
			gameflow = flow_GameInit
			
		elseif (p1START1) then
		
			p1START1 = false
			
			if ((iCredits > 0 or dip_CoinsPerCredit == DOPT_FREEPLAY) and dip_Movie == false) then 			
				
				startGame()
				bShowCredits = false

			elseif dip_Movie == true then

				lvlState = lvlSetup 
				currentLevel = levelMovie
				bShowCredits = false
			
			end
	
		end
	
	elseif (lvlState == lvlEnd) then
		
		-- no end. loop indefinitely until player does something.			
	
	end
	
	if (dip_CoinsPerCredit == DOPT_FREEPLAY) or (bShowCredits == true and iCredits > 0) then
	
		if (p1START1 and dip_Movie == false) then
		
			p1START1 = false
			bShowCredits = false				
			startGame()	

		elseif (p1START1 and dip_Movie == true) then

			p1START1 = false
			lvlState = lvlSetup 
			bShowCredits = false				
			currentLevel = levelMovie
			
		end
				
	end

end

function doLevel()
	
	local thisLevel = iCurPos

	if (lvlState == lvlSetup) then		
		
		if dip_Debug then debugPrint("Entering doLevel(). Playing stage " .. thisLevel) end	
		
		bPlayPrompt = true				
		bShowLives = true
		bShowScore = true
		bShowAction = false
		bAct = false
		bTestMash = false
		iMash = 0
		if dip_Difficulty  == 0 then resetArrows() end			
		if bSave == false then currentMove = 1 end
						
		setupLevel(thisLevel)
		

		if dip_Revive and bRes then
			
			bShowGet = true
			setupClip(offsetResurrect, offsetResurrectEnd)
			lvlState = branch11	
			bRes = false
			
		else

			if not stage[thisLevel][LEVELSTARTED] then
			
				stage[thisLevel][LEVELSTARTED] = true
				
				if bSave == true and currentMove ~= 1 then 

					currentFrame = move[currentMove-1][inputFrmEnd]+1
					discSkipToFrame(currentFrame)
					bSave = false
					lvlState = lvlRunning
							
				elseif bSkipIntroClip == false and (dip_StartLevel ~= thisLevel or dip_StartSegment == 1) then

					bShowSkip = true
					getIntroClip(thisLevel)
					lvlState = branch01	

				else
								
					discSkipToFrame(segmentStart)			
					lvlState = lvlRunning

				end
			
			else		
			
				if currentFrame +1 ~= segmentStart then

					discSkipToFrame(segmentStart)					
			
				end
			
				lvlState = lvlRunning
		
			end			

		end		
		
	elseif (lvlState == branch01) then
			
		if (currentFrame == iFrameEnd or p1BUTTON1) then		
			
			p1BUTTON1 = false
			bShowSkip = false

			if currentFrame ~= iFrameEnd then

					discSkipToFrame(segmentStart)					
			
			end
						
			lvlState = lvlRunning
		
		end
	
	elseif (lvlState == branch02) then

		if timerDue() then

			setupDeathClip(thisMove)

		end
				
	
	elseif (lvlState == branch03) then
			
		if currentFrame == move[currentMove][moveFrmStart] then lvlState = lvlRunning end
	
	elseif (lvlState == branch04) then
			
		if currentFrame >= segmentEnd then lvlState = lvlEnd end
		
	elseif (lvlState == branch05) then	
			
		if currentFrame == iFrameEnd then
		
			local j = 0

			for j=1,stage[thisLevel][SEGMENTCOUNT] do	
	
				segment[thisLevel][j][SEGMENTCOMPLETE] = true
			
			end		
			lvlState = lvlEnd
			
		end			
		
	elseif (lvlState == branch06) then
		
		if timerDue() then

			bGOAlt = true
		
			if BeatGameWithOneLife() and thisLevel ~= 18 and bAllowSecret and dip_StartLevel == 1 and dip_StartSegment == 1 then
				
				soundPlay(sndvictory)
				addPoints(SCORESECRET)
				iBonus = iBonus+SCORESECRET
				discSkipToFrame(frameExtendedPlay)
				discPause()
				timerON(4)
				lvlState = branch08

			elseif BeatGameWithOneCredit() and thisLevel ~= 18 and bAllowSecret and dip_StartLevel == 1 and dip_StartSegment == 1 then

				soundPlay(sndvictory)
				discSkipToFrame(frameExtendedPlay)
				discPause()
				timerON(4)
				lvlState = branch08
		
			elseif newScore(iScore) then -- Has player achieved a high score?			
			
				lvlState = lvlSetup  
				currentLevel = levelHighScore	
			
			else			
			
				lvlState = lvlSetup
				currentLevel = levelGameOver		
			
			end
			
		end
		
	elseif (lvlState == branch07) then
		
		if currentFrame == iFrameEnd then lvlState = lvlEnd end
		
	elseif (lvlState == branch08) then
		
		if timerDue() then 
				
			bExtendedPlay = true
			iSegPointer = 0
			startGame()
			
		end

	elseif (lvlState == branch09) then
		
		if currentFrame == iFrameEnd then

			if dip_Difficulty == 0 then resetArrows() end
			discSkipToFrame(iPauseFrame)
			currentMove = currentMove + 1
			lvlState = lvlRunning
									
		end

	elseif (lvlState == branch11) then

		if (currentFrame == iFrameEnd) then

			bShowGet = false
		
			if not stage[thisLevel][LEVELSTARTED] then

				stage[thisLevel][LEVELSTARTED] = true

				if bSave == true and currentMove ~= 1 then 

					currentFrame = move[currentMove-1][inputFrmEnd]+1
					discSkipToFrame(currentFrame)
					bSave = false
					lvlState = lvlRunning
							
				elseif bSkipIntroClip == false and (dip_StartLevel ~= thisLevel or dip_StartSegment == 1) then

					bShowSkip = true
					getIntroClip(thisLevel)
					lvlState = branch01	

				else
								
					discSkipToFrame(segmentStart)			
					lvlState = lvlRunning

				end

				
			else		
				
				if currentFrame +1 ~= segmentStart then

						discSkipToFrame(segmentStart)					
				
				end
				
				lvlState = lvlRunning
			
			end	

		end				
		
	elseif (lvlState == lvlPlayRest) then

		
		if (currentMove < totalMoves) then	bCheckMove = true end
		
		thisMove = scanInput()

		if (thisMove ~= NOMOVE) then soundPlay(sndwrong) end
		
		if (currentFrame == move[currentMove][moveFrmEnd]) then
			
			bCheckMove = false
			currentMove = currentMove + 1

			if dip_Debug then debugPrint("Current Move is now: " .. currentMove) end
			
			if (currentMove <= totalMoves) then			
				
				-- If next move's start frame is right next to
				-- current move's end frame
				-- then don't skip to frame, let it flow...
				
				if ((currentFrame + 1) ~= move[currentMove][moveFrmStart]) then		

					discSkipToFrame(move[currentMove][moveFrmStart])					
				
				end
				
				bShowAction = false
				bPlayPrompt = true
				bAct = false
				bTestMash = false
				iMash = 0
				if dip_Difficulty == 0 then resetArrows() end	
				lvlState = lvlRunning				
				
			else
				
				-- segment beat! do some logic. move on to next segment.
				segment[thisLevel][iSegPointer][SEGMENTCOMPLETE] = true	
				
				if (thisLevel == finalstage and stageBeat(finalstage)) or thisLevel == 18 then
					
						
					if dip_StartLevel == 1 and dip_StartSegment ==1 then

						addPoints(SCORESCENE - (stage[thisLevel][DEATHCOUNT] * DEATHPENALTY))
						addPoints(SCOREGAME)
						
					else

						addPoints(SCORESCENE - (stage[thisLevel][DEATHCOUNT] * DEATHPENALTY))
						addPoints(SCORELEVEL)

					end
					
					if thisLevel == 18 then

						discPause()
						timerON(0.1)
						lvlState = branch06	

					else
						
						soundPlay(sndvictory)
						discSkipToFrame(frameVictory)
						discPause()
						timerON(3)
						lvlState = branch06	
					
					end

				else
				
					if stage[thisLevel][DEATHCOUNT] < 5 then 
					
						addPoints(SCORESCENE - (stage[thisLevel][DEATHCOUNT] * DEATHPENALTY))
						iBonus = iBonus+SCORESCENE - (stage[thisLevel][DEATHCOUNT] * DEATHPENALTY)

					end

					lvlState = branch04					
					
				end
					
			end
			
		end
	
	elseif (lvlState == lvlRunning) then

		if dip_Difficulty == 0 and (move[currentMove][correctMove] > 6 and move[currentMove][correctMove] <= 12) then 

			if move[currentMove][correctMove] == 8 then move[currentMove][inputFrmStart] = move[currentMove][inputFrmStart]+10 end
			move[currentMove][correctMove] = 5

		elseif dip_Kidmode then

			if move[currentMove][correctMove] == 8 then move[currentMove][inputFrmStart] = move[currentMove][inputFrmStart]+10 end
			move[currentMove][correctMove] = 5

		end
			
		if (currentFrame > move[currentMove][inputFrmEnd] and move[currentMove][correctMove] ~= SKIP) then
			
			iPauseFrame = move[currentMove][inputFrmEnd] --currentFrame			
			bShowAction = false
			bTestMash = false
			iMash = 0

			if dip_Hint then

				setHint(thisMove)

			else

				setupDeathClip(thisMove)

			end
			
		elseif (currentFrame > move[currentMove][inputFrmEnd] and move[currentMove][correctMove] == SKIP) then

			bShowAction = false
			lvlState = lvlPlayRest
				
		elseif (currentFrame >= move[currentMove][inputFrmStart] and currentFrame <= move[currentMove][inputFrmEnd]) and (move[currentMove][correctMove] < 9 or move[currentMove][correctMove] > 16) then
			
			thisMove = scanInput()
											
			if (bShowAction == false) then 
				bShowAction = true
			end

			if bPlayPrompt then
			
				soundPlay(sndprompt) 
				bPlayPrompt = false

			end

			if (thisMove ~= NOMOVE) then

				if (move[currentMove][correctMove] == SKIP) then

					thisMove = checkSkip(thisMove, move[currentMove][correctMove])

				end	
							
				if (thisMove == move[currentMove][correctMove]) then									
			
					bShowAction = false
					bTestMash = false
					iMash = 0

					if (move[currentMove][correctMove] ~= SKIP) then 

						soundPlay(sndright)
						addPoints(SCOREMOVE + dip_Difficulty * BUFFMOVE) 
						iScoreTemp = iScoreTemp+(SCOREMOVE + dip_Difficulty * BUFFMOVE)

					end				
					
					lvlState = lvlPlayRest
									
				elseif (thisMove ~= MOVEPENDING) then		
				
					iPauseFrame = move[currentMove][inputFrmEnd] --currentFrame			
					bShowAction = false		
					if dip_Hint then

						setHint(thisMove)

					else

						setupDeathClip(thisMove)

					end		
								
				
				end
				
			end	
		
		else scanInput() -- Prevents joystick from getting 'stuck' in one position.
		
		end
		
	elseif (lvlState == lvlPlayDeath) then

		bRes = true
			
		if (currentFrame == iFrameEnd) then
		
			iLives = iLives - 1
						
			stage[thisLevel][DEATHCOUNT] = stage[thisLevel][DEATHCOUNT] + 1
		
			if iLives > 0 then
				
				if dip_Rewind==0  then

					lvlState= branch07

				elseif dip_Rewind == 3 then

					iSegPointer = 0
					lvlState= lvlSetup
								
				elseif dip_Rewind == 2 and currentMove == totalMoves then

					segment[iCurPos][iSegPointer][SEGMENTCOMPLETE] = true
					lvlState = lvlEnd

				else
					
					lvlState = branch09
				
				end	

			else

				lvlState = lvlEnd
			
			end
					
		end
		
	elseif (lvlState == lvlEnd) then
	
		lvlState = lvlSetup
		
		if (iLives == 0) then -- game over			
			
			if dip_AllowContinue and ((iContinues < dip_LimitContinue) or (dip_LimitContinue == DOPT_INFINITE_CONTINUES))  then
				
				iTempLevel = currentLevel	

				currentLevel = levelContinue			
				iContinues = iContinues + 1
				
			else
				
				if newScore(iScore) then -- Has player achieved a high score?							
					
					currentLevel = levelHighScore	
				
				else							
					
					currentLevel = levelGameOver		
				
				end				
				
			end		


			
		else		
			
			lvlState = lvlSetup
						
			if stageBeat(thisLevel) then
				
				stage[thisLevel][BEATSTATUS] = true
				levelMap[thisLevel] = true
				if bAllowMap == true then 

					autoSave(4) 
					bShowDiskA = true
					altState = branch01

				end
				iSegPointer = 0
				addPoints(SCORELEVEL)
				iBonus = iBonus+SCORELEVEL
				bSkipIntroClip = false
				iLiveSave = iLives
				iScoreSave = iScore
				bAllowSave = true
				soundPlay(sndclear)	
				lvlState = lvlSetup
				currentLevel = levelFinish
											
			else
				
				if not segment[thisLevel][iSegPointer][SEGMENTCOMPLETE] then

					if iSegPointer > 0 then iSegPointer = iSegPointer - 1 end
				
				else

					iLiveSave = iLives
					iScoreSave = iScore
					bAllowSave = true
															
				end				
			
			end
			
			bShowLives = false
			bShowAction = false
			bTestMash = false
			iMash = 0

		end
		
		

		if dip_Debug then debugPrint("Leaving doLevel()") end
	
	end
	
end

function resetArrows()

	posxUDARROWS = (OVLW/2)-(ARUW/3)
	posyLRARROWS = (OVLH/2)-(ARLH/3)
	posyUARROW = startyUARROW
	posyDARROW = startyDARROW
	posxLARROW = startxLARROW
	posxRARROW = startxRARROW
	
end

function drawAction()
	
	
	if currentMove <= totalMoves then

		local thisMove = move[currentMove][correctMove]

		if dip_Difficulty ~= 0 then
		
			if dip_ShowAction == false then
			
				spriteDraw(posxBUTTONS,posyBUTTONS,sprArrow[NOMOVES])
			
			elseif thisMove == UP then
				
				spriteDraw(posxUDARROWS,posyLRARROWS,sprArrow[UP])
				
			elseif thisMove == DOWN then

				spriteDraw(posxUDARROWS,posyLRARROWS,sprArrow[DOWN])
				
						
			elseif thisMove == LEFT then

				spriteDraw(posxUDARROWS,posyLRARROWS,sprArrow[LEFT])

					
			elseif thisMove == RIGHT then

				spriteDraw(posxUDARROWS,posyLRARROWS,sprArrow[RIGHT])
					
			elseif thisMove == BUTTON1 then
			
				spriteDraw(posxBUTTONS,posyBUTTONS,sprArrow[BUTTON1])

			elseif thisMove == BUTTON2 then
			
				spriteDraw(posxBUTTONS,posyBUTTONS,sprArrow[BUTTON2])

			elseif thisMove == SKIP then

				blinkTimer(0.4)
				if heartbeat then spriteDraw((OVLW/2)-SKIPW/2,OVLH-12-TEXTH,sprite[SKIPINTRO])  end

			end

		else

			if dip_ShowAction == false then
			
				spriteDraw(posxBUTTONS,posyBUTTONS,sprArrow[NOMOVES])
			
			elseif thisMove == UP then
				
				goTimer(1)
		
				if heartbeat then

					if posyUARROW > endyUARROW then posyUARROW = posyUARROW-3 end
					spriteDraw(posxUDARROWS,posyUARROW,sprArrow[UP])
					

				end
				
			elseif thisMove == DOWN then

				goTimer(1)
		
				if heartbeat then	

					if posyDARROW < endyDARROW then posyDARROW = posyDARROW+3 end
					spriteDraw(posxUDARROWS,posyDARROW,sprArrow[DOWN])
							
				end
			
			elseif thisMove == LEFT then

				goTimer(1)
		
				if heartbeat then	
					
					if posxLARROW > endxLARROW then posxLARROW = posxLARROW-5 end
					spriteDraw(posxLARROW,posyLRARROWS,sprArrow[LEFT])
							
				end

					
			elseif thisMove == RIGHT then

				goTimer(1)
		
				if heartbeat then	

					if posxRARROW < endxRARROW then posxRARROW = posxRARROW+5 end
					spriteDraw(posxRARROW,posyLRARROWS,sprArrow[RIGHT])
							
				end
					
			elseif thisMove == BUTTON1 then
			
				spriteDraw(posxBUTTONS,posyBUTTONS,sprArrow[BUTTON1])

			elseif thisMove == BUTTON2 then
			
				spriteDraw(posxBUTTONS,posyBUTTONS,sprArrow[BUTTON2])

			elseif thisMove == SKIP then

				blinkTimer(0.4)
				if heartbeat then spriteDraw((OVLW/2)-SKIPW/2,OVLH-12-TEXTH,sprite[SKIPINTRO])  end

			
			end

		end
		
	end

end

function drawCredits()
	
	blinkTimer(0.3)
	
	if heartbeat then	
		
		if (dip_CoinsPerCredit == DOPT_FREEPLAY) then					
			
			spriteDraw((OVLW/2)-SKIPW,OVLH-TEXTH-LINEH,sprite[FREEPLAY])
		
		else
		
			if (iCredits > 0) then			
				
				spriteDraw(LINEW,OVLH-LINEH-TEXTH,sprite[CREDIT])
				drawSpriteNumber(LINEW+CRDW+NUMW,OVLH-LINEH-TEXTH,iCredits)
				
			else		
				
				spriteDraw((OVLW/2)-SKIPW,OVLH-TEXTH-LINEH,sprite[INSERTCOIN])
				
			end
			
		end

	end

end

function drawDisk1()

	if altState == branch01 then

	timerON(1)
	altState = branch02

	elseif altState == branch02 then

		if timerDue() then

			bShowDisk1 = false 

		else

			spriteDraw(LINEW+25, OVLH-LINEH-LINEW-15, sprite[D1])

		end

	end

end

function drawDisk2()

	if altState == branch01 then

	timerON(1)
	altState = branch02

	elseif altState == branch02 then

		if timerDue() then

			bShowDisk2 = false 

		else

			spriteDraw(LINEW+25, OVLH-LINEH-LINEW-15, sprite[D2])

		end

	end

end

function drawDisk3()

	if altState == branch01 then

	timerON(1)
	altState = branch02

	elseif altState == branch02 then

		if timerDue() then

			bShowDisk3 = false 

		else

			spriteDraw(LINEW+25, OVLH-LINEH-LINEW-15, sprite[D3])

		end

	end

end

function drawDiskA()

	if altState == branch01 then

	timerON(1)
	altState = branch02

	elseif altState == branch02 then

		if timerDue() then

			bShowDiskA = false 

		else

			spriteDraw(LINEW+25, OVLH-LINEH-LINEW-15, sprite[DA])

		end

	end

end

function drawLives()

	if (iLives > 0) then

		if iLives==1 then

			spriteDraw(OVLW-LINEW-LIVW,LINEH,sprite[LIVES])

		elseif iLives==2 then

			spriteDraw(OVLW-LINEW-(LIVW*2),LINEH,sprite[LIVES])
			spriteDraw(OVLW-LINEW-LIVW,LINEH,sprite[LIVES])

		elseif iLives==3 then

			spriteDraw(OVLW-LINEW-(LIVW*3),LINEH,sprite[LIVES])
			spriteDraw(OVLW-LINEW-(LIVW*2),LINEH,sprite[LIVES])
			spriteDraw(OVLW-LINEW-LIVW,LINEH,sprite[LIVES])

		elseif iLives==4 then
			
			spriteDraw(OVLW-LINEW-(LIVW*4),LINEH,sprite[LIVES])
			spriteDraw(OVLW-LINEW-(LIVW*3),LINEH,sprite[LIVES])
			spriteDraw(OVLW-LINEW-(LIVW*2),LINEH,sprite[LIVES])
			spriteDraw(OVLW-LINEW-LIVW,LINEH,sprite[LIVES])

		elseif iLives==5 then	

			spriteDraw(OVLW-LINEW-(LIVW*5),LINEH,sprite[LIVES])
			spriteDraw(OVLW-LINEW-(LIVW*4),LINEH,sprite[LIVES])
			spriteDraw(OVLW-LINEW-(LIVW*3),LINEH,sprite[LIVES])
			spriteDraw(OVLW-LINEW-(LIVW*2),LINEH,sprite[LIVES])
			spriteDraw(OVLW-LINEW-LIVW,LINEH,sprite[LIVES])
		
		end	
		
	end

end

function drawGet()

	blinkTimer(0.300)
	if heartbeat then				
				
		spriteDraw((OVLW/2)-SKIPW/1.5,OVLH-TEXTH-LINEH,sprite[GETREADY])
				
	end
	
end

function drawScore()
	
	local j = 0
	
	drawSpriteNumber(LINEW, LINEH,iScore)
	
end

function drawSkip()


	blinkTimer(0.4)
	
	if heartbeat then	
	
		spriteDraw((OVLW/2)-SKIPW/2,OVLH-TEXTH-LINEH,sprite[SKIPINTRO])
						
	end

end

function drawSpriteNumber(thisx, thisy, thisAmt)

	local j = 0
	local k = 0
	local s1 = ""
	
	s1 = tostring(thisAmt)
	
	for k=1,(string.len(s1)) do
		
		j = tonumber(string.sub(s1,k,k)) + 1	
		spriteDraw((thisx + ((k-1) * NUMW)), thisy, sprNUM[j])
	
	end

end

function initJob()

	debugPrint("Playing CliffHanger v1.02")

	readConfig()
	if dip_Debug then debugPrint ("Entering initJob()") end

	resetChannels()
	
	gameflow = flow_GameRunning
	currentLevel = levelIntro
	lvlState = lvlSetup
	iCoins = 0
	iScore = 0
	iScoreTemp = 0
	iBonus = 0
	iSegPointer = 0
	rndegg = random.new(os.clock() * 100000)
	levelMap = nil; levelMap = {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}		
	bShowCredits = true
	bShowScore = false
	bShowLives = false
	bShowAction = false
	bAct = false
	bTestMash = false
	iMash = 0
	bShowSkip = false  
	bShowDisk1 = false
	bShowDisk2 = false
	bShowDisk3 = false
	bShowDiskA = false

	setFontColor(mycolor1)
	
	sprNUM = nil; sprNUM = {}
	sprNUM[1]  = spriteLoad(MYDIR .. "num00.png")
	sprNUM[2]  = spriteLoad(MYDIR .. "num01.png")
	sprNUM[3]  = spriteLoad(MYDIR .. "num02.png")
	sprNUM[4]  = spriteLoad(MYDIR .. "num03.png")
	sprNUM[5]  = spriteLoad(MYDIR .. "num04.png")
	sprNUM[6]  = spriteLoad(MYDIR .. "num05.png")
	sprNUM[7]  = spriteLoad(MYDIR .. "num06.png")
	sprNUM[8]  = spriteLoad(MYDIR .. "num07.png")
	sprNUM[9]  = spriteLoad(MYDIR .. "num08.png")
	sprNUM[10] = spriteLoad(MYDIR .. "num09.png")
	
	filler = nil; filler = {false,false,false,false}			
	sprite = nil; sprite = {}									
	sprite[CREDIT] = spriteLoad(MYDIR .. "credit.png")
	sprite[LIVES] = spriteLoad(MYDIR .. "live.png")				
	sprite[LEVEL] = spriteLoad(MYDIR .. "level.png")		
	sprite[SKIPINTRO] = spriteLoad(MYDIR .. "skip.png")
	sprite[SCORE] = spriteLoad(MYDIR .. "score.png")
	sprite[BONUS] = spriteLoad(MYDIR .. "bonus.png")
	sprite[D1] = spriteLoad(MYDIR .. "disk1.png")
	sprite[D2] = spriteLoad(MYDIR .. "disk2.png")
	sprite[D3] = spriteLoad(MYDIR .. "disk3.png")
	sprite[DA] = spriteLoad(MYDIR .. "diskA.png")
	sprite[GETREADY] = spriteLoad(MYDIR .. "getready.png")
	sprite[INSERTCOIN] = spriteLoad(MYDIR .. "insertcoin.png")
	sprite[FREEPLAY] = spriteLoad(MYDIR .. "freeplay.png")

	

	OVLW = overlayGetWidth()
	OVLH = overlayGetHeight()
	
	fontGame = font7pt
	fontLCD = font8pt

	LINEH = OVLH/45
	LINEW = OVLW/40

	fontQuality(FONT_QUALITY_SOLID)
	fontSelect(fontGame)  
	
	if dip_Difficulty == 0 then

		sprArrow = nil; sprArrow = {}											
		sprArrow[UP] 		= spriteLoad(MYDIR .. "arrowup.png")
		sprArrow[DOWN] 		= spriteLoad(MYDIR .. "arrowdown.png")
		sprArrow[LEFT]	 	= spriteLoad(MYDIR .. "arrowleft.png")
		sprArrow[RIGHT] 	= spriteLoad(MYDIR .. "arrowright.png")										
		sprArrow[BUTTON1] 	= spriteLoad(MYDIR .. "hand.png")	
		sprArrow[BUTTON2] 	= spriteLoad(MYDIR .. "feet.png")	

		LIVW = spriteGetWidth(sprite[LIVES])
		LIVH = spriteGetHeight(sprite[LIVES])
		NUMW = spriteGetWidth(sprNUM[1])
		TEXTH = spriteGetHeight(sprite[SKIPINTRO])
		BUTW = spriteGetWidth(sprArrow[BUTTON1])
		BUTH = spriteGetHeight(sprArrow[BUTTON1])
		SKIPW = spriteGetWidth(sprite[SKIPINTRO])
		LVLW = spriteGetWidth(sprite[LEVEL])
		SCNW = spriteGetWidth(sprite[SCENE])
		CRDW = spriteGetWidth(sprite[CREDIT])
		ARUW = spriteGetWidth(sprArrow[UP])
		ARUH = spriteGetHeight(sprArrow[UP])
		ARLW = spriteGetWidth(sprArrow[LEFT])
		ARLH = spriteGetHeight(sprArrow[LEFT])
		LEVELW = spriteGetWidth(sprite[LEVEL])
		SELW = spriteGetWidth(sprite[SELMAP])
		DISKW = spriteGetWidth(sprite[D1])	

		posxBUTTONS = (OVLW/2)-(BUTW/2)
		posyBUTTONS = (OVLH/2)-(BUTH/2)

		posxUDARROWS = (OVLW/2)-(ARUW/2)
		posyLRARROWS = (OVLH/2)-(ARLH/2)
		startyUARROW = 70 +  LINEH*2
		startyDARROW = OVLH-ARUH- (70 + LINEH*2)
		endyUARROW = 10 + LINEH*2
		endyDARROW = OVLH-ARUH-(10 + LINEH*2)

		startxLARROW = 100 + LINEW*4
		startxRARROW = OVLW-ARLW-(100 + LINEW*4)
		endxLARROW = LINEW*4
		endxRARROW = OVLW-ARLW-LINEW*4

	else

		sprArrow = nil; sprArrow = {}											
		sprArrow[UP] 		= spriteLoad(MYDIR .. "stick.png")
		sprArrow[DOWN] 		= spriteLoad(MYDIR .. "stick.png")
		sprArrow[LEFT]	 	= spriteLoad(MYDIR .. "stick.png")
		sprArrow[RIGHT] 	= spriteLoad(MYDIR .. "stick.png")										
		sprArrow[BUTTON1] 	= spriteLoad(MYDIR .. "action.png")	
		sprArrow[BUTTON2] 	= spriteLoad(MYDIR .. "action.png")

		LIVW = spriteGetWidth(sprite[LIVES])
		LIVH = spriteGetHeight(sprite[LIVES])
		NUMW = spriteGetWidth(sprNUM[1])
		TEXTH = spriteGetHeight(sprite[SKIPINTRO])
		BUTW = spriteGetWidth(sprArrow[BUTTON1])
		BUTH = spriteGetHeight(sprArrow[BUTTON1])
		SKIPW = spriteGetWidth(sprite[SKIPINTRO])
		LVLW = spriteGetWidth(sprite[LEVEL])
		SCNW = spriteGetWidth(sprite[SCENE])
		CRDW = spriteGetWidth(sprite[CREDIT])
		ARUW = spriteGetWidth(sprArrow[UP])
		ARUH = spriteGetHeight(sprArrow[UP])
		ARLW = spriteGetWidth(sprArrow[LEFT])
		ARLH = spriteGetHeight(sprArrow[LEFT])
		LEVELW = spriteGetWidth(sprite[LEVEL])
		SELW = spriteGetWidth(sprite[SELMAP])
		DISKW = spriteGetWidth(sprite[D1])	

		posxBUTTONS = (OVLW/2)-(BUTW/2)
		posyBUTTONS = OVLH-BUTH-LINEH

		posxUDARROWS = (OVLW/2)-(BUTW/2)
		posyLRARROWS = OVLH-BUTH-LINEH
		startyUARROW = 70 +  LINEH*2
		startyDARROW = OVLH-ARUH- (70 + LINEH*2)
		endyUARROW = 10 + LINEH*2
		endyDARROW = OVLH-ARUH-(10 + LINEH*2)

		startxLARROW = 100 + LINEW*4
		startxRARROW = OVLW-ARLW-(100 + LINEW*4)
		endxLARROW = LINEW*4
		endxRARROW = OVLW-ARLW-LINEW*4	

	end

	sprArrow[NOMOVES] 	= spriteLoad(MYDIR .. "nomoves.png")	

	

	if dip_Debug then debugPrint ("Leaving initJob()") end
	
end

function EndOfStageReached(thisLevel)

	return (iSegPointer == stage[thisLevel][SEGMENTCOUNT])

end

function initVLDP()	
 
	-- VLDP has to run before any sprite drawing takes place.
	
	if (lvlState == lvlSetup) then
	
		if dip_Debug then debugPrint("Entering initVLDP()") end
	
		discSetFPS(MovieFPS)				
		setupClip(offsetTitle, offsetTitleend)
		bPause = true
		lvlState = lvlRunning
	
	elseif (lvlState == lvlRunning) then
	
		if (currentFrame == iFrameEnd) then
		
			discPause()
			lvlState = lvlEnd
		
		end
	
	elseif (lvlState == lvlEnd) then
		bPause = false
		gameflow = flow_GameInit
		lvlState = lvlSetup
		
		if dip_Debug then debugPrint("Leaving initVLDP()") end
	
	end

end

function onInputPressed(intWhat)
	
	if not bPause then
	
		if (intWhat == SWITCH_BUTTON1) then

			p1BUTTON1 = true
			if bTestMash then iMash = iMash + 1 end
									
		elseif (intWhat == SWITCH_BUTTON2) then

			p1BUTTON2 = true

		elseif (intWhat == SWITCH_BUTTON3) then

			p1BUTTON3 = true
		
		elseif (intWhat == SWITCH_UP) then
			
			p1UP = true
			
		elseif (intWhat == SWITCH_DOWN) then
			
			p1DOWN = true
			
		elseif (intWhat == SWITCH_LEFT) then
			
			p1LEFT = true
			
		elseif (intWhat == SWITCH_RIGHT) then
			
			p1RIGHT = true	

		elseif (intWhat == SWITCH_SERVICE) then
			
			p1SERVICE = true
			
		elseif (intWhat == SWITCH_COIN1) then
			
			p1COIN1 = true

						
		elseif (intWhat == SWITCH_COIN2) then
			
			p1COIN2 = true	
			
		elseif (intWhat == SWITCH_START1) then
			
			p1START1 = true		

						
		elseif (intWhat == SWITCH_START2) then
			
			p1START2 = true

		elseif (intWhat == SWITCH_SKILL1) then
			
			p1COIN2 = true	
			
		elseif (intWhat == SWITCH_SKILL2) then
			
			p1SKILL1 = true			
			
		elseif (intWhat == SWITCH_SKILL3) then
			
			p1SKILL2 = true

		elseif (intWhat == SWITCH_TEST) then
		
			p1SKILL3 = true

		end
		
	end

end

function onInputReleased(intWhat)

	if (intWhat == SWITCH_PAUSE) then bPause = not bPause end
	
	if (gameflow == flow_GameRunning and not bPause) then	
	
		if (intWhat == SWITCH_COIN1 or intWhat == SWITCH_COIN2) then 
			
			if (currentLevel ~= levelService and currentLevel ~= levelNormal) then
			
				p1COIN1 = false
				p1COIN2 = false
		
				if not (dip_CoinsPerCredit == DOPT_FREEPLAY) then
					
					if (iCredits < 9) then
					
						iCoins = iCoins + 1			
						
						if (iCoins >= dip_CoinsPerCredit) then
						
							iCoins = iCoins - dip_CoinsPerCredit
							iCredits = iCredits + 1
							soundPlay(sndcredit)
							
						else
						
							soundPlay(sndcoin)					
						
						end
						if currentLevel == levelContinue then bResetContinue = true end
					
					end
					
				end
				
			end
			
		elseif (intWhat == SWITCH_UP) then
		
			p1UP = false
		
		elseif (intWhat == SWITCH_DOWN) then
		
			p1DOWN = false
		
		elseif (intWhat == SWITCH_LEFT) then
		
			p1LEFT = false
		
		elseif (intWhat == SWITCH_RIGHT) then
		
			p1RIGHT = false
			
		elseif (intWhat == SWITCH_BUTTON1) then
		
			p1BUTTON1 = false
						
		elseif (intWhat == SWITCH_BUTTON2) then

			p1BUTTON2 = false

		elseif (intWhat == SWITCH_BUTTON3) then

			p1BUTTON3 = false
			
		elseif (intWhat == SWITCH_SERVICE and gameflow == flow_GameRunning) then
		
			p1SERVICE = false
			lvlState = lvlSetup
			currentLevel = levelService

		elseif (intWhat == SWITCH_TEST) then

			p1TEST = false
			
			if currentLevel == levelIntro or currentMove < totalMoves then

				lvlState = lvlSetup
				currentLevel = levelSave
			
			end

		elseif (intWhat == SWITCH_START1) then
			
			p1START1 = false
			
		elseif (intWhat == SWITCH_START2) then
			
			p1START2 = false

		elseif (intWhat == SWITCH_SKILL1) then
			
			p1SKILL1 = false

			if currentLevel == levelNormal and currentMove < totalMoves and p1START1 == true then

				loadSave(1)
				p1START1 = false
				bShowDisk1 = true
				altState = branch01

			elseif currentLevel == levelNormal and currentMove < totalMoves then

				autoSave(1)
				bShowDisk1 = true
				altState = branch01
			
			end	

			

		elseif (intWhat == SWITCH_SKILL2) then
			
			p1SKILL2 = false

			if currentLevel == levelNormal and currentMove < totalMoves and p1START1 == true then

				loadSave(2)
				p1START1 = false
				bShowDisk2 = true
				altState = branch01
				
			elseif currentLevel == levelNormal and currentMove < totalMoves then

				autoSave(2)
				bShowDisk2 = true
				altState = branch01
				
			end	

			

		elseif (intWhat == SWITCH_SKILL3) then
			
			p1SKILL3 = false

			if currentLevel == levelNormal and currentMove < totalMoves and p1START1 == true then

				loadSave(3)
				p1START1 = false
				bShowDisk3 = true
				altState = branch01

			elseif currentLevel == levelNormal and currentMove < totalMoves then

				autoSave(3)
				bShowDisk3 = true
				altState = branch01
			
			end	
			
		end	
	
	end		
	
end

function onMouseMoved(intX, intY, intXrel, intYrel)

	-- leave empty

end

function onOverlayUpdate()

	overlayClear()
	
	currentFrame = discGetFrame()
	
	if (gameflow == flow_VLDPStart) then
	
		initVLDP()
	
	elseif (gameflow == flow_GameInit) then
	
		initJob()				
		
	elseif (gameflow == flow_GameRunning) then	
		
		if (currentLevel == levelIntro) then
		
			doIntro()		
			
		elseif (currentLevel == levelNormal) then
		
			doLevel()			
			
		elseif (currentLevel == levelMenuScreen) then
		
			doLevelSelect()	
			
		elseif (currentLevel == levelContinue) then
		
			doContinue()
			
		elseif (currentLevel == levelGameOver) then
		
			doGameOver()
			
		elseif (currentLevel == levelHighScore) then
		
			doHighScore()

		elseif (currentLevel == levelService) then
		
			doServiceMenu()

		elseif (currentLevel == levelMovie) then
		
			startMovie()

		elseif (currentLevel == levelFinish) then
		
			doFinish()

		elseif (currentLevel == levelSave) then
		
			doSave()
		
		end
	
		if bShowAction    then drawAction()     end
		if bShowScore 	  then drawScore() 		end
		if bShowLives 	  then drawLives() 		end
		if bShowCredits   then drawCredits() 	end	
		if bShowSkip      then drawSkip() 	    end	
		if bShowDisk1     then drawDisk1() 	    end	
		if bShowDisk2     then drawDisk2() 	    end	
		if bShowDisk3     then drawDisk3() 	    end	
		if bShowDiskA     then drawDiskA() 	    end	
	    if bShowGet       then drawGet() 	    end	
			
	end
	
	return(OVERLAY_UPDATED)
	
end

function onShutdown()
	
	discStop()	
	if (dip_Debug == true) then debugPrint ("Leaving game!") end
	
end

function onSoundCompleted(intWhich)

	-- leave empty	
	
end

function stageBeat(thisLevel)

	local k = 0
	local b1 = true

	k = stage[thisLevel][SEGMENTCOUNT]
	
	if dip_Debug then debugPrint("Entering stageBeat()") end
	
	b1 = b1 and segment[thisLevel][k][SEGMENTCOMPLETE]
	
	if dip_Debug then debugPrint("Leaving stageBeat()") end
	
	return b1

end

function scanInput()

	local iResult = NOMOVE

	if     p1UP      then iResult = UP
	elseif p1DOWN    then iResult = DOWN
	elseif p1LEFT    then iResult = LEFT
	elseif p1RIGHT   then iResult = RIGHT
	elseif p1BUTTON1 then iResult = BUTTON1 
	elseif p1BUTTON2 then iResult = BUTTON2
	elseif p1BUTTON3 then iResult = BUTTON3 end
	
	p1UP      = false		
	p1DOWN    = false		
	p1LEFT    = false
	p1RIGHT   = false
	p1BUTTON1 = false
	p1BUTTON2 = false
	p1BUTTON3 = false
	
	return iResult
	
end

-------------------------------------------------------------------------------------------------------
-- If you need more than 16 levels, you will need to edit (add lines) the functions below this point --
-------------------------------------------------------------------------------------------------------

function createLevel01(thisStage)

	local i = 0

	stage[level01] = {}; stage[level01] = {false, false, TotalScenesLevel01, 0}
	
	for i = 1,TotalScenesLevel01 do

		segment[level01][i] = {}; segment[level01][i] = {i, false, ""}

	end 
			
end

function createLevel02(thisStage)
	
	local i = 0

	stage[level02] = {}; stage[level02] = {false, false, TotalScenesLevel02, 0}
	
	for i = 1,TotalScenesLevel02 do

		segment[level02][i] = {}; segment[level02][i] = {i, false, ""}

	end 

end

function createLevel03(thisStage)
	
	local i = 0

	stage[level03] = {}; stage[level03] = {false, false, TotalScenesLevel03, 0}
	
	for i = 1,TotalScenesLevel03 do

		segment[level03][i] = {}; segment[level03][i] = {i, false, ""}

	end 

end

function createLevel04(thisStage)
	
	local i = 0

	stage[level04] = {}; stage[level04] = {false, false, TotalScenesLevel04, 0}
	
	for i = 1,TotalScenesLevel04 do

		segment[level04][i] = {}; segment[level04][i] = {i, false, ""}

	end 

end

function createLevel05(thisStage)

	local i = 0

	stage[level05] = {}; stage[level05] = {false, false, TotalScenesLevel05, 0}
	
	for i = 1,TotalScenesLevel05 do

		segment[level05][i] = {}; segment[level05][i] = {i, false, ""}

	end 
	
end

function createLevel06(thisStage)

	local i = 0

	stage[level06] = {}; stage[level06] = {false, false, TotalScenesLevel06, 0}
	
	for i = 1,TotalScenesLevel06 do

		segment[level06][i] = {}; segment[level06][i] = {i, false, ""}

	end 

end

function createLevel07(thisStage)

	local i = 0

	stage[level07] = {}; stage[level07] = {false, false, TotalScenesLevel07, 0}
	
	for i = 1,TotalScenesLevel07 do

		segment[level07][i] = {}; segment[level07][i] = {i, false, ""}

	end 

end

function createLevel08(thisStage)

	local i = 0

	stage[level08] = {}; stage[level08] = {false, false, TotalScenesLevel08, 0}
	
	for i = 1,TotalScenesLevel08 do

		segment[level08][i] = {}; segment[level08][i] = {i, false, ""}

	end 

end



function getIntroClip(thisValue)

	local a = 0
	local b = 1
		
	if thisValue == level01 then
	
		a = offsetLevel01 
		b = offsetLevel01Clipend
		
	elseif thisValue == level02 then
	
		a = offsetLevel02 
		b = offsetLevel02Clipend
	
	elseif thisValue == level03 then
	
		a = offsetLevel03
		b = offsetLevel03Clipend
	
	elseif thisValue == level04 then
	
		a = offsetLevel04
		b = offsetLevel04Clipend
	
	elseif thisValue == level05 then
	
		a = offsetLevel05
		b = offsetLevel05Clipend

	elseif thisValue == level06 then
	
		a = offsetLevel06
		b = offsetLevel06Clipend

	elseif thisValue == level07 then
	
		a = offsetLevel07
		b = offsetLevel07Clipend

	elseif thisValue == level08 then
	
		a = offsetLevel08
		b = offsetLevel08Clipend

	end
	
	setupClip(a,b)

end


function initStages()

	local k = 0	

	stage = nil; stage = {}	
	segment = nil; segment = {}
	for k=level01,finalstage do
		
		segment[k] = {}
	
		if k == level01 then
		
			createLevel01(k)
			
		elseif k == level02 then
		
			createLevel02(k)
			
		elseif k == level03 then
		
			createLevel03(k)
			
		elseif k == level04 then
		
			createLevel04(k)
			
		elseif k == level05 then
		
			createLevel05(k)
			
		elseif k == level06 then
		
			createLevel06(k)

		elseif k == level07 then
		
			createLevel07(k)

		elseif k == level08 then
		
			createLevel08(k)
		
		end

	end

end


function NextLevel(thisLevel)

	if bAllowMap == true then

		currentLevel = levelMenuScreen
		iSegPointer = 0

	else	

		if thisLevel == level01 then

			iCurPos = level02
			iSegPointer = 0	

		elseif thisLevel == level02 then

			iCurPos = level03
			iSegPointer = 0	
					
		elseif thisLevel == level03 then

			iCurPos = level04
			iSegPointer = 0	

		elseif thisLevel == level04 then

			iCurPos = level05
			iSegPointer = 0	
				
		elseif thisLevel == level05 then

			iCurPos = level06
			iSegPointer = 0

		elseif thisLevel == level06 then

			iCurPos = level07
			iSegPointer = 0

		elseif thisLevel == level07 then

			iCurPos = level08
			iSegPointer = 0	
															
		end

	end

end

function setHint(playerMove)


	soundPlay(sndwrong)
	
	if (move[currentMove][correctMove] == UP) then
					
		discSkipToFrame(2000)
								
	elseif (move[currentMove][correctMove] == DOWN) then
					
		discSkipToFrame(2003)
					
	elseif (move[currentMove][correctMove] == LEFT) then
					
		discSkipToFrame(2006)

	elseif (move[currentMove][correctMove] == RIGHT) then
					
		discSkipToFrame(2009)
					
	elseif (move[currentMove][correctMove] == BUTTON1) then
					
		discSkipToFrame(1994)
							
	elseif (move[currentMove][correctMove] == BUTTON2) then
					
		discSkipToFrame(1997)
		
	end	

	timerON(1.5)
	discPause()
	lvlState = branch02

end	


function setupDeathClip(playerMove)								
 
	local bPlayBuzzer = true 
	local iHang =0
	if dip_Hang then iHang=215 end

	lvlState = lvlPlayDeath	

	if move[currentMove][moveDeath] == 1 then

		setupClip(offsetDeath01, offsetDeath01end+iHang)

	elseif move[currentMove][moveDeath] == 2 then

		setupClip(offsetDeath02, offsetDeath02end+iHang)

	elseif move[currentMove][moveDeath] == 3 then

		setupClip(offsetDeath03, offsetDeath03end+iHang)

	elseif move[currentMove][moveDeath] == 4 then

		setupClip(offsetDeath04, offsetDeath04end+iHang)

	elseif move[currentMove][moveDeath] == 5 then

		setupClip(offsetDeath05, offsetDeath05end+iHang)

	elseif move[currentMove][moveDeath] == 6 then

		setupClip(offsetDeath06, offsetDeath06end+iHang)

	elseif move[currentMove][moveDeath] == 7 then

		setupClip(offsetDeath07, offsetDeath07end+iHang)

	elseif move[currentMove][moveDeath] == 8 then

		setupClip(offsetDeath08, offsetDeath08end+iHang)

	elseif move[currentMove][moveDeath] == 9 then

		setupClip(offsetDeath09, offsetDeath09end+iHang)

	elseif move[currentMove][moveDeath] == 10 then

		setupClip(offsetDeath10, offsetDeath10end+iHang)

	elseif move[currentMove][moveDeath] == 11 then

		setupClip(offsetDeath11, offsetDeath11end+iHang)

	elseif move[currentMove][moveDeath] == 12 then

		setupClip(offsetDeath12, offsetDeath12end+iHang)

	elseif move[currentMove][moveDeath] == 13 then

		setupClip(offsetDeath13, offsetDeath13end+iHang)

	elseif move[currentMove][moveDeath] == 14 then

		setupClip(offsetDeath14, offsetDeath14end+iHang)

	elseif move[currentMove][moveDeath] == 15 then

		setupClip(offsetDeath15, offsetDeath15end+iHang)

	elseif move[currentMove][moveDeath] == 16 then

		setupClip(offsetDeath16, offsetDeath16end+iHang)

	elseif move[currentMove][moveDeath] == 17 then

		setupClip(offsetDeath17, offsetDeath17end+iHang)

	elseif move[currentMove][moveDeath] == 18 then

		setupClip(offsetDeath18, offsetDeath18end+iHang)

	elseif move[currentMove][moveDeath] == 19 then

		setupClip(offsetDeath19, offsetDeath19end+iHang)

	elseif move[currentMove][moveDeath] == 20 then

		setupClip(offsetDeath20, offsetDeath20end+iHang)

	elseif move[currentMove][moveDeath] == 21 then

		setupClip(offsetDeath21, offsetDeath21end+iHang)

	elseif move[currentMove][moveDeath] == 22 then

		setupClip(offsetDeath22, offsetDeath22end+iHang)

	elseif move[currentMove][moveDeath] == 23 then

		setupClip(offsetDeath23, offsetDeath23end+iHang)

	elseif move[currentMove][moveDeath] == 24 then

		setupClip(offsetDeath24, offsetDeath24end+iHang)

	elseif move[currentMove][moveDeath] == 25 then

		setupClip(offsetDeath25, offsetDeath25end+iHang)

	elseif move[currentMove][moveDeath] == 26 then

		setupClip(offsetDeath26, offsetDeath26end+iHang)

	end	
		
	--if bPlayBuzzer then soundPlay(sndwrong) end   

	if dip_Rewind == 1 then
		

		if currentMove == 1 then

			iPauseFrame = segmentStart
			currentMove= 0

		else
				
			iPauseFrame = move[currentMove-1][inputFrmEnd] + 1
			currentMove=currentMove-1

		end	
	
	end
							

end 	


function SetupFramesLevel(thisLevel)

	local k = 0																 
	local q = 0
	
	for k=1,totalMoves do

		move[k][5] = move[k][1] + offsetIntro01
		move[k][1] = move[k][1] + offsetIntro01 + (dip_Difficulty * 2 -2)
		move[k][2] = move[k][2] + offsetIntro01
		
	end

	for q=1,totalMoves do

		if q < totalMoves then

			move[q][6] = move[q+1][5] - 1
		
		else
			
			move[q][6] = segmentEnd
								
		end

	end
	
end


function setupLevel(thisLevel)

	if dip_Debug then debugPrint("Entering setupLevel() thisLevel = " .. thisLevel) end
	
	local thisSegment = 0
	local bSegFound = false

	iSegPointer	= iSegPointer + 1
	
	if dip_Debug then debugPrint( "iSegPointer: " .. iSegPointer .. " - stage segment total: " .. stage[thisLevel][SEGMENTCOUNT] ) end	
	if iSegPointer > stage[thisLevel][SEGMENTCOUNT] then iSegPointer = iSegPointer - 1 end	
	

	for thisSegment=iSegPointer,stage[thisLevel][SEGMENTCOUNT] do			
		
		if segment[thisLevel][thisSegment][SEGMENTCOMPLETE] == false then
		
			segID = segment[thisLevel][thisSegment][SEGMENTID]
			iSegPointer = thisSegment
			bSegFound = true
	
			if dip_Debug then debugPrint("Setting up segment #" .. segID .. " - '" .. segment[thisLevel][thisSegment][SEGMENTNAME] .. "'") end
			
			if     (thisLevel == level01)  then setupLevel01(segID)		
			elseif (thisLevel == level02)  then setupLevel02(segID)						
			elseif (thisLevel == level03)  then setupLevel03(segID)			
			elseif (thisLevel == level04)  then setupLevel04(segID)
			elseif (thisLevel == level05)  then setupLevel05(segID)
			elseif (thisLevel == level06)  then setupLevel06(segID)
			elseif (thisLevel == level07)  then setupLevel07(segID)			
			elseif (thisLevel == level08)  then setupLevel08(segID)
			end 
			SetupFramesLevel(thisLevel)	
						
			break
			
		end
	
	end
	
	if not bSegFound then
		
		iSegPointer = 1
	
		for thisSegment=1,stage[thisLevel][SEGMENTCOUNT] do			
			
			if segment[thisLevel][thisSegment][SEGMENTCOMPLETE] == false then
			
				segID = segment[thisLevel][thisSegment][SEGMENTID]
				iSegPointer = thisSegment
				bSegFound = true
		
				if dip_Debug then debugPrint("Setting up segment #" .. segID .. " - '" .. segment[thisLevel][thisSegment][SEGMENTNAME] .. "'") end
				
				if (thisLevel == level01)      then setupLevel01(segID)
				elseif (thisLevel == level02)  then setupLevel02(segID)
				elseif (thisLevel == level03)  then setupLevel03(segID)
				elseif (thisLevel == level04)  then setupLevel04(segID)
				elseif (thisLevel == level05)  then setupLevel05(segID)
				elseif (thisLevel == level06)  then setupLevel06(segID)
				elseif (thisLevel == level07)  then setupLevel07(segID)			
				elseif (thisLevel == level08)  then setupLevel08(segID)
				end 
				SetupFramesLevel(thisLevel)	

				break
				
			end
		
		end	
		
	end
	
	if bAllowSave == true then 

		autoSave(4) 
		bShowDiskA = true
		altState = branch01		
		bAllowSave = false

	end

	if dip_Debug then debugPrint("Leaving setupLevel()") end

end

function startGame()

	if dip_Debug then debugPrint ("Entering startGame()") end
	
	initStages()
	bRes = false

	if bExtendedPlay then 

		currentLevel = levelNormal
		iCurPos = levelExt
			
	else
		
		if iCredits > 0 then iCredits = iCredits - 1 end
		iScore = 0	
		iScoreTemp = 0
		iBonus = 0
		
		if (currentLevel == levelContinue) then	
	        
			currentLevel = iTempLevel

			if dip_Rewind == 1 then

				currentMove = currentMove+1
				bSave = true

			elseif dip_Rewind == 2 then
						
				if currentMove == totalMoves then

					currentMove = currentMove-1
					bSave = true
																							
				else

					currentMove = currentMove+1
					bSave = true
				
				end	

			elseif dip_Rewind == 3 then
			
				iSegPointer = 0

			end
				
		else		
			
			iContinues = 0
			iSegPointer = 0

			if dip_StartLevel == 1 then

				iCurPos = level01					
			
			elseif dip_StartLevel == 2 then
			
				iCurPos = level02	

			elseif dip_StartLevel == 3 then
			
				iCurPos = level03

			elseif dip_StartLevel == 4 then
			
				iCurPos = level04

			elseif dip_StartLevel == 5 then
			
				iCurPos = level05

			elseif dip_StartLevel == 6 then
			
				iCurPos = level06

			elseif dip_StartLevel == 7 then
			
				iCurPos = level07

			elseif dip_StartLevel == 8 then
			
				iCurPos = level08

			end

			if dip_StartSegment == 1 then

				iSegPointer = 0					
			
			elseif dip_StartSegment == 2 then
			
				iSegPointer = 1	

			elseif dip_StartSegment == 3 then
			
				iSegPointer = 2

			elseif dip_StartSegment == 4 then
			
				iSegPointer = 3

			elseif dip_StartSegment == 5 then
			
				iSegPointer = 4

			elseif dip_StartSegment == 6 then
			
				iSegPointer = 5	

			elseif dip_StartSegment == 7 then
			
				iSegPointer = 6	

			end

			rndegg = random.new(os.clock() * 100000)						
						
			if bAllowMap == true and MapStart == 0 then

				currentLevel = levelMenuScreen	

			else
			
				currentLevel = levelNormal		

			end				
			
		end		
		
	end
	
	lvlState = lvlSetup
	
	
	bShowLives = true
	bShowAction = true
	bShowScore = true

	
	iLives = dip_LivesPerCredit	
	bShowAction = false
	bTestMash = false
	iMash = 0
	bShowCredits = false
	bResetContinue = false	
	bExtendedPlay = false	
	
	if dip_Debug then debugPrint ("Leaving startGame()") end

end

function startSave()

	bSave = true
	bShowSkip = false 

	if dip_Debug then debugPrint ("Entering startSave()") end
	
	initStages()
		
	iContinues = 0
	iSegPointer = 0

	if dip_StartLevel == 1 then

		iCurPos = level01					
		
	elseif dip_StartLevel == 2 then
			
		iCurPos = level02	

	elseif dip_StartLevel == 3 then
			
		iCurPos = level03

	elseif dip_StartLevel == 4 then
			
		iCurPos = level04

	elseif dip_StartLevel == 5 then
			
		iCurPos = level05

	elseif dip_StartLevel == 6 then
			
		iCurPos = level06

	elseif dip_StartLevel == 7 then
			
		iCurPos = level07

	elseif dip_StartLevel == 8 then
			
		iCurPos = level08

	end

	if dip_StartSegment == 1 then

		iSegPointer = 0					
			
	elseif dip_StartSegment == 2 then
			
		iSegPointer = 1	

	elseif dip_StartSegment == 3 then
			
		iSegPointer = 2

	elseif dip_StartSegment == 4 then
			
		iSegPointer = 3

	elseif dip_StartSegment == 5 then
			
		iSegPointer = 4

	elseif dip_StartSegment == 6 then
			
		iSegPointer = 5	

	elseif dip_StartSegment == 7 then
			
		iSegPointer = 6	

	end

	iScoreTemp = iScore
	
	rndegg = random.new(os.clock() * 100000)	
	
	currentLevel = levelNormal		
	
	lvlState = lvlSetup

	bShowLives = true
	bShowAction = true
	bShowScore = true

		
	bShowAction = false
	bTestMash = false
	iMash = 0
	bShowCredits = false
	bResetContinue = false	
	bExtendedPlay = false	
		
	if dip_Debug then debugPrint ("Leaving startSave()") end

end

function startMovie()
	
	if dip_Debug then debugPrint ("Entering startMovie()") end
	
	if (lvlState == lvlSetup) then

		iScore = 0	
		iScoreTemp = 0
		iBonus = 0
		iContinues = 0
		iSegPointer = 0
	
		setupClip(offsetLevel01, offsetIntro01 + 2521)					
		
		bShowLives = false
		bShowAction = false
		bShowScore = false
		bShowCredits = false
	
		lvlState = lvlRunning
	
	elseif (lvlState == lvlRunning) then
	
		if (currentFrame == iFrameEnd) then
			
			p1RIGHT = true
			lvlState = lvlRunning
			
		elseif p1START1 then

			p1START1 = false
			lvlState = lvlSetup
			currentLevel = levelIntro
		
		elseif p1RIGHT then

			p1RIGHT = false

			iMovie = iMovie + 1

			if iMovie == 2 then

				setupClip(offsetLevel02,  offsetIntro01 + 6451)

			elseif iMovie == 3 then

				setupClip(offsetLevel03, offsetIntro01 + 13790)

			elseif iMovie == 4 then

				setupClip(offsetLevel04, offsetIntro01 + 18649)

			elseif iMovie == 5 then

				setupClip(offsetLevel05, offsetIntro01 + 21101)	

			elseif iMovie == 6 then

				setupClip(offsetLevel06, offsetIntro01 + 24962)

			elseif iMovie == 7 then

				setupClip(offsetLevel07, offsetIntro01 + 29702)

			elseif iMovie == 8 then

				setupClip(offsetLevel08, offsetIntro01 + 37494)


			elseif iMovie == 9 or iMovie == 1 then

				iMovie = 1
				setupClip(offsetLevel01, offsetIntro01 + 2521)	

			end

		elseif p1LEFT then

			p1LEFT = false

			iMovie = iMovie - 1

			if iMovie == 2 then

				setupClip(offsetLevel02, offsetIntro01 + 6451)

			elseif iMovie == 3 then

				setupClip(offsetLevel03, offsetIntro01 + 13790)

			elseif iMovie == 4 then

				setupClip(offsetLevel04, offsetIntro01 + 18649)

			elseif iMovie == 5 then

				setupClip(offsetLevel05, offsetIntro01 + 21101)	

			elseif iMovie == 6 then

				setupClip(offsetLevel06, offsetIntro01 + 24962)


			elseif iMovie == 7 or iMovie == 0 then

				setupClip(offsetLevel07, offsetIntro01 + 29702)

			elseif iMovie == 8 or iMovie == 0 then

				iMovie = 8
				setupClip(offsetLevel08, offsetIntro01 + 37494)	

			elseif iMovie == 1 then

				setupClip(offsetLevel01, offsetIntro01 + 2521)	

			end


		end	
	
	elseif (lvlState == lvlEnd) then
	
		lvlState = lvlSetup
		currentLevel = levelIntro	
		if dip_Debug then debugPrint ("Leaving startMovie()") end

	end

end
