--[[

PROGRAM NAME:	LUA SINGE ENGINE
VERSION:		3.22
AUTHOR:			KARIS (2021)

This file is part of LUA SINGE ENGINE.

	LUA SINGE ENGINE is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation.

	LUA SINGE ENGINE is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

	Thanks to Scott Duensing, RDG.

]]--

optSel = 0
slotsave = nil;

function readConfig()

	local s1
	local hsName = ""
	local hsScore = ""
	local hsDiff = ""
	local hsNameLB = ""
	local hsScoreLB = ""	
	local k = 0
	local h1 = io.input(MYDIR.."game.cfg")	

		local s1 = io.read("*line")	

		if (s1 ~= nil) then
		
			dip_Diffshow = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")

		if (s1 ~= nil) then
		
			dip_GameType = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")

		if (s1 ~= nil) then
		
			dip_PlayStyle = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end
	
		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_StartLevel = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_StartScene = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_Rewind = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then

			dip_CoinsPerCredit = tonumber(string.sub(s1,string.find(s1,"=")+1))			
			
		end
		
		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_LivesPerCredit = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end
				
		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_LimitContinue = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_ShowAction = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_Extravid = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		if dip_Extravid == 0 then

			ShowResurrect = false 
			ShowSupDeath = false
			ShowLvlClear = false 

		elseif dip_Extravid == 1 then

			ShowResurrect = true
			ShowSupDeath = false 
			ShowLvlClear = false

		elseif dip_Extravid == 2 then

			ShowResurrect = false 
			ShowSupDeath = true
			ShowLvlClear = false 

		elseif dip_Extravid == 3 then

			ShowResurrect = false
			ShowSupDeath = false 
			ShowLvlClear = true

		elseif dip_Extravid == 4 then

			ShowResurrect = true
			ShowSupDeath = true 
			ShowLvlClear = false

		elseif dip_Extravid == 5 then

			ShowResurrect = true
			ShowSupDeath = false 
			ShowLvlClear = true

		elseif dip_Extravid == 6 then

			ShowResurrect = false
			ShowSupDeath = true 
			ShowLvlClear = true

		elseif dip_Extravid == 7 then

			ShowResurrect = true
			ShowSupDeath = true 
			ShowLvlClear = true	

		end

		if ShowTop then bShowTop = true end

		s1 = io.read("*line")
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
		if (s1 ~= nil) then
		
			if (s1 == 1) then
				dip_Hints = true
			else
				dip_Hints = false
			end
		end

		s1 = io.read("*line")	

		if (s1 ~= nil) then
		
			dip_Difficulty = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_MashtoRun = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")	

		if (s1 ~= nil) then
		
			dip_Res = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end
				
		s1 = io.read("*line")
		highscore = nil; highscore = {}
		for k=1,10 do
			s1 = io.read("*line")
			
			hsName = string.sub(s1,1,string.find(s1,",")-1)
			hsScore = string.sub(s1,string.find(s1,",")+1, string.len(s1))
			if k==1 then iTop = tonumber(hsScore) end
			
			highscore[k] = {}
			highscore[k] = {hsName, hsScore}
		
		end	

		s1 = io.read("*line")
		highscoreLB = nil; highscoreLB = {}
		for k=1,10 do
			s1 = io.read("*line")
			
			hsNameLB = string.sub(s1,1,string.find(s1,",")-1)
			hsScoreLB = string.sub(s1,string.find(s1,",")+1, string.len(s1))
			if k==1 then iTop = tonumber(hsScoreLB) end
			
			highscoreLB[k] = {}
			highscoreLB[k] = {hsNameLB, hsScoreLB}
		
		end	

		s1 = io.read("*line")
		
		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			t1 = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end	

		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			t2 = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			t3 = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			t4 = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			t1l = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end	

		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			t2l = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			t3l = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			t4l = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		percent = nil; percent = {}
		for k=1,finalstage do
			s1 = io.read("*line")
			
			hsName = string.sub(s1,1,string.find(s1,",")-1)
			hsScore = string.sub(s1,string.find(s1,",")+1, string.find(s1,"!")-1)
			hsDiff = string.sub(s1,string.find(s1,"!")+1, string.len(s1))
						
			percent[k] = {}
			percent[k] = {hsName, hsScore, hsDiff}
		
		end	
		
		io.close(h1)

end

function writeConfig()

	-- This function writes the values of the dip variables
	-- into an external data file.

	local sNewLine = "\n"
	local s1 = ""

	local h1 = io.output(MYDIR.."game.cfg")
	
	io.write("dip_Diffshow = " .. dip_Diffshow .. sNewLine)
	io.write("dip_GameType = " .. dip_GameType .. sNewLine)
	io.write("dip_PlayStyle = " .. dip_PlayStyle .. sNewLine)
	io.write("dip_StartLevel = " .. dip_StartLevel .. sNewLine)	
	io.write("dip_StartScene = " .. dip_StartScene .. sNewLine)	
	io.write("dip_Rewind = " .. dip_Rewind .. sNewLine)
	io.write("dip_CoinsPerCredit = " .. dip_CoinsPerCredit .. sNewLine)
	io.write("dip_LivesPerCredit = " .. dip_LivesPerCredit .. sNewLine)	
	io.write("dip_LimitContinue = " .. dip_LimitContinue .. sNewLine)
	io.write("dip_ShowAction = " .. dip_ShowAction .. sNewLine)
	io.write("dip_Extravid = " .. dip_Extravid .. sNewLine)
	
	if (dip_Hints == true) then
		io.write("dip_Hints = 1" .. sNewLine)
	else
		io.write("dip_Hints = 0" .. sNewLine)
	end

	if (dip_Diffshow == 4) then	

		dip_Difficulty = 1 

	else

		dip_Difficulty = dip_Diffshow 

	end

	io.write("dip_Difficulty = " .. dip_Difficulty .. sNewLine)

	io.write("dip_MashtoRun = " .. dip_MashtoRun .. sNewLine)

	io.write("dip_Res = " .. dip_Res .. sNewLine)

	io.write(sNewLine)	
	
	for k=1,10 do
		
		s1 = highscore[k][1] .. "," .. highscore[k][2]
		io.write(s1 .. sNewLine)
	
	end

	io.write(sNewLine)	
	
	for k=1,10 do
		
		s1 = highscoreLB[k][1] .. "," .. highscoreLB[k][2]
		io.write(s1 .. sNewLine)
	
	end
	
	io.write(sNewLine)	

	io.write("t1 = " .. t1 .. sNewLine)
	io.write("t2 = " .. t2 .. sNewLine)
	io.write("t3 = " .. t3 .. sNewLine)	
	io.write("t4 = " .. t4 .. sNewLine)

	io.write(sNewLine)	

	io.write("t1l = " .. t1l .. sNewLine)
	io.write("t2l = " .. t2l .. sNewLine)
	io.write("t3l = " .. t3l .. sNewLine)	
	io.write("t4l = " .. t4l .. sNewLine)

	io.write(sNewLine)

	for k=1,finalstage do
		
		s1 = percent[k][1] .. "," .. percent[k][2] .. "!" .. percent[k][3]
		io.write(s1 .. sNewLine)
	
	end

	io.close(h1)

end

function setDefault()

	local s1
	local hsName = ""
	local hsScore = ""
	local k = 0
	local h1 = io.input(MYDIR.."default.cfg")	

		local s1 = io.read("*line")	

		if (s1 ~= nil) then
		
			dip_Diffshow = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")

		if (s1 ~= nil) then
		
			dip_GameType = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")

		if (s1 ~= nil) then
		
			dip_PlayStyle = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end
	
		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_StartLevel = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_StartScene = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_Rewind = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then

			dip_CoinsPerCredit = tonumber(string.sub(s1,string.find(s1,"=")+1))			
			
		end
		
		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_LivesPerCredit = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end
				
		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_LimitContinue = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_ShowAction = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_Extravid = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		if dip_Extravid == 0 then

			ShowResurrect = false 
			ShowSupDeath = false
			ShowLvlClear = false 

		elseif dip_Extravid == 1 then

			ShowResurrect = true
			ShowSupDeath = false 
			ShowLvlClear = false

		elseif dip_Extravid == 2 then

			ShowResurrect = false 
			ShowSupDeath = true
			ShowLvlClear = false 

		elseif dip_Extravid == 3 then

			ShowResurrect = false
			ShowSupDeath = false 
			ShowLvlClear = true

		elseif dip_Extravid == 4 then

			ShowResurrect = true
			ShowSupDeath = true 
			ShowLvlClear = false

		elseif dip_Extravid == 5 then

			ShowResurrect = true
			ShowSupDeath = false 
			ShowLvlClear = true

		elseif dip_Extravid == 6 then

			ShowResurrect = false
			ShowSupDeath = true 
			ShowLvlClear = true

		elseif dip_Extravid == 7 then

			ShowResurrect = true
			ShowSupDeath = true 
			ShowLvlClear = true	

		end

		s1 = io.read("*line")
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))
		
		if (s1 ~= nil) then
		
			if (s1 == 1) then
				dip_Hints = true
			else
				dip_Hints = false
			end
		end

		s1 = io.read("*line")	

		if (s1 ~= nil) then
		
			dip_Difficulty = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_MashtoRun = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		s1 = io.read("*line")	

		if (s1 ~= nil) then
		
			dip_Res = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end

		getRes()

		io.close(h1)

end

function updateOpts(thisIndex)

	if (thisIndex == 1) then	
	
		if dip_GameType == 0 then
					
			dip_GameType = 1
			dip_Rewind = 0
			dip_Hints = false

			if IngameDiffchoice then

				dip_Diffshow = 4

			else
				
				dip_Diffshow = 1
			
			end

		elseif dip_GameType == 1 then

			dip_GameType = 2
			dip_Hints = false
			
			if IngameDiffchoice then

				dip_Diffshow = 4

			else
				
				dip_Diffshow = 1
			
			end
			
		elseif dip_GameType == 2 then

			dip_GameType = 3
			dip_Hints = false
			dip_Diffshow = 0	

		elseif dip_GameType == 3 then

			dip_GameType = 4
			dip_Hints = false
			dip_Diffshow = 1
						
		elseif dip_GameType == 4 then

			dip_GameType = 0
						
			if IngameDiffchoice then

				dip_Diffshow = 4

			else
				
				dip_Diffshow = 1
			
			end

		end	

	elseif (thisIndex == 2) then
		
		if dip_GameType <3 then

			dip_Diffshow  = dip_Diffshow  + 1

			if IngameDiffchoice then

				if (dip_Diffshow >4) then	dip_Diffshow = 0 end		
					
			else
						
				if (dip_Diffshow >3) then	dip_Diffshow = 0 end	

			end	

		end

	elseif (thisIndex == 3) then

		if dip_GameType ~= 2 and dip_GameType ~= 4 then

			if dip_PlayStyle == 0 then

				if AllowRandom == true then

					dip_PlayStyle = 1

				elseif AllowTier == true then

					dip_PlayStyle = 2

				elseif AllowMap == true then

					dip_PlayStyle = 3

				end	

			elseif dip_PlayStyle == 1 then

				if AllowTier == true then

					dip_PlayStyle = 2

				elseif AllowMap == true then

					dip_PlayStyle = 3

				else

					dip_PlayStyle = 0

				end	

			elseif dip_PlayStyle == 2 then

				if AllowMap == true then

					dip_PlayStyle = 3

				else

					dip_PlayStyle = 0

				end	

			elseif dip_PlayStyle == 3 then

				dip_PlayStyle = 0

			end

		end
	
	elseif (thisIndex == 4) then	
		
		if dip_GameType ~= 4 and dip_PlayStyle == 0 then	
		
			dip_StartLevel = dip_StartLevel + 1
			
			dip_StartScene = 1
		
			if (dip_StartLevel > finalstage) then
				
				dip_StartLevel = 1

			end
		
		end
			
	elseif (thisIndex == 5) then	
		
		if (dip_GameType == 0 or dip_GameType == 1 or dip_GameType == 3) and dip_Rewind ~= 2 then

			dip_StartScene = dip_StartScene + 1

			if (dip_StartScene > Level[dip_StartLevel][TOTALSCENES]) then 

					dip_StartScene = 1	

			end

		end

	elseif (thisIndex == 6) then	
		
		if dip_GameType ~= 1 and dip_GameType ~= 2 and dip_GameType ~= 4 then

			if not ForceRewind then dip_Rewind = dip_Rewind + 1 end

			if (dip_Rewind > 3) then
			
				dip_Rewind = 0
				
			end		

			if dip_Rewind == 2 then dip_StartScene = 1 end	

		end
			
	elseif (thisIndex == 7) then
	
		dip_CoinsPerCredit = dip_CoinsPerCredit + 1
		
		
		if (dip_CoinsPerCredit > 3) then
		
			dip_CoinsPerCredit = 0
		
		end

	elseif (thisIndex == 8) then	
	
		if dip_GameType ~= 1 and dip_GameType ~= 2 and dip_GameType ~= 4 then

			dip_LivesPerCredit = dip_LivesPerCredit + 1
			
				
			if (dip_LivesPerCredit > 5) then
			
				dip_LivesPerCredit = 1
				
			end		

		end
		
	elseif (thisIndex == 9) then

		if dip_GameType ~= 2 and dip_GameType ~= 4 then
	
			dip_LimitContinue  = dip_LimitContinue  + 1
					
			if (dip_LimitContinue  > 4) then
			
				dip_LimitContinue = 0
			
			end

		end

	elseif (thisIndex == 10) then

		if dip_GameType ~= 4 then
	
			dip_ShowAction = dip_ShowAction + 1	
			
			if (dip_ShowAction > 4) then
			
				dip_ShowAction = 0
				
			end	

		end	

	elseif (thisIndex == 11) then

		if dip_GameType ~= 4 then
	
			if dip_Extravid == 0 then

				if (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 1

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) then

					dip_Extravid = 2

				elseif (offsetClearend - offsetClear > 1) then

					dip_Extravid = 3

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 4

				elseif (offsetClearend - offsetClear > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 5

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 6

				elseif (offsetGetReadyEnd - offsetGetReady > 1) and (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 7

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 1 then

				if (offsetSupDeathEnd - offsetSupDeath > 1) then

					dip_Extravid = 2

				elseif (offsetClearend - offsetClear > 1) then

					dip_Extravid = 3

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 4

				elseif (offsetClearend - offsetClear > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 5

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 6

				elseif (offsetGetReadyEnd - offsetGetReady > 1) and (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 7

				else

					dip_Extravid = 0

				end


			elseif dip_Extravid == 2 then

				if (offsetClearend - offsetClear > 1) then

					dip_Extravid = 3

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 4

				elseif (offsetClearend - offsetClear > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 5

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 6

				elseif (offsetGetReadyEnd - offsetGetReady > 1) and (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 7

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 3 then
				
				if (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 4

				elseif (offsetClearend - offsetClear > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 5

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 6

				elseif (offsetGetReadyEnd - offsetGetReady > 1) and (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 7

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 4 then

				if (offsetClearend - offsetClear > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 5

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 6

				elseif (offsetGetReadyEnd - offsetGetReady > 1) and (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 7

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 5 then

				if (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 6

				elseif (offsetGetReadyEnd - offsetGetReady > 1) and (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 7

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 6 then

				if (offsetGetReadyEnd - offsetGetReady > 1) and (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 7

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 7 then

				dip_Extravid = 0

			end

			if dip_Extravid == 0 then

				ShowResurrect = false 
				ShowSupDeath = false
				ShowLvlClear = false 

			elseif dip_Extravid == 1 then

				ShowResurrect = true
				ShowSupDeath = false 
				ShowLvlClear = false

			elseif dip_Extravid == 2 then

				ShowResurrect = false 
				ShowSupDeath = true
				ShowLvlClear = false 

			elseif dip_Extravid == 3 then

				ShowResurrect = false
				ShowSupDeath = false 
				ShowLvlClear = true

			elseif dip_Extravid == 4 then

				ShowResurrect = true
				ShowSupDeath = true 
				ShowLvlClear = false

			elseif dip_Extravid == 5 then

				ShowResurrect = true
				ShowSupDeath = false 
				ShowLvlClear = true

			elseif dip_Extravid == 6 then

				ShowResurrect = false
				ShowSupDeath = true 
				ShowLvlClear = true

			elseif dip_Extravid == 7 then

				ShowResurrect = true
				ShowSupDeath = true 
				ShowLvlClear = true	

			end	

		end

	elseif (thisIndex == 12) then
	
		if dip_GameType ~= 1 and dip_GameType ~= 2 and dip_GameType ~= 4 then dip_Hints = not dip_Hints end

	elseif (thisIndex == 13) then
	
		if dip_GameType ~= 3 and dip_GameType ~= 4 then
	
			dip_MashtoRun = dip_MashtoRun + 1	
			
			if (dip_MashtoRun > 3) then
			
				dip_MashtoRun = 0
				
			end	

		end	
				
	elseif (thisIndex == 14) then		

		dip_Res = dip_Res + 1

		if dip_Res >3 then dip_Res = 0 end

		getRes()
				
	elseif (thisIndex == 15) then		

		setDefault()

	elseif (thisIndex == 16) then		

		lvlState = lvlEnd

	end

end

function updateOptsMin(thisIndex)

	if (thisIndex == 1) then	
	
		if dip_GameType == 0 then
					
			dip_GameType = 4
			dip_Hints = false
			dip_Diffshow = 1

		elseif dip_GameType == 4 then 

			dip_GameType = 3
			dip_Hints = false
			dip_Diffshow = 0	

		elseif dip_GameType == 3 then

			dip_GameType = 2
			dip_Hints = false
			
			if IngameDiffchoice then

				dip_Diffshow = 4

			else
				
				dip_Diffshow = 1
			
			end
	
		elseif dip_GameType == 2 then
					
			dip_GameType = 1
			dip_Rewind = 0
			dip_Hints = false
			
			if IngameDiffchoice then

				dip_Diffshow = 4

			else
				
				dip_Diffshow = 1
			
			end
			
		elseif dip_GameType == 1 then
					
			dip_GameType = 0
						
			if IngameDiffchoice then

				dip_Diffshow = 4

			else
				
				dip_Diffshow = 1
			
			end
			
		end

	elseif (thisIndex == 2) then
		
		if dip_GameType <3 then

			dip_Diffshow  = dip_Diffshow - 1

			if IngameDiffchoice then

				if (dip_Diffshow  < 0) then	dip_Diffshow = 4 end		
					
			else
						
				if (dip_Diffshow  < 0) then	dip_Diffshow = 3 end	

			end	

		end

	elseif (thisIndex == 3) then

		if dip_GameType ~= 2 and dip_GameType ~= 4 then

			if dip_PlayStyle == 0 then

				if AllowMap == true then

					dip_PlayStyle = 3

				elseif AllowTier == true then

					dip_PlayStyle = 2

				elseif AllowRandom == true then

					dip_PlayStyle = 1

				end	

			elseif dip_PlayStyle == 3 then

				if AllowTier == true then

					dip_PlayStyle = 2

				elseif AllowRandom == true then

					dip_PlayStyle = 1

				else

					dip_PlayStyle = 0

				end	

			elseif dip_PlayStyle == 2 then

				if AllowRandom == true then

					dip_PlayStyle = 1

				else

					dip_PlayStyle = 0

				end	

			elseif dip_PlayStyle == 1 then

				dip_PlayStyle = 0

			end
	
		end
	
	elseif (thisIndex == 4) then	
	
		if dip_GameType ~= 4 and dip_PlayStyle == 0 then

			dip_StartLevel = dip_StartLevel - 1
			
			dip_StartScene = 1
		
			if (dip_StartLevel < 1) then
			
				dip_StartLevel = finalstage

			elseif (dip_StartLevel == 1) then

				dip_StartScene = 1
				
			end

		end

	elseif (thisIndex == 5) then	
	
		if (dip_GameType == 0 or dip_GameType == 1 or dip_GameType == 3) and dip_Rewind ~= 2 then

			dip_StartScene = dip_StartScene - 1

			if (dip_StartScene < 1) then 

				dip_StartScene = Level[dip_StartLevel][TOTALSCENES]

			end
			
		end

	elseif (thisIndex == 6) then	
		
		if dip_GameType ~= 1 and dip_GameType ~= 2 and dip_GameType ~= 4 then

			if not ForceRewind then dip_Rewind = dip_Rewind - 1 end
						
			if (dip_Rewind < 0) then
			
				dip_Rewind = 3
				
			end	

			if dip_Rewind == 2 then dip_StartScene = 1 end

		end		

	elseif (thisIndex == 7) then
	
		dip_CoinsPerCredit = dip_CoinsPerCredit - 1
				
		if (dip_CoinsPerCredit < 0) then
		
			dip_CoinsPerCredit = 3
		
		end

	elseif (thisIndex == 8) then	
		
		if dip_GameType ~= 1 and dip_GameType ~= 2 and dip_GameType ~= 4 then

			dip_LivesPerCredit = dip_LivesPerCredit - 1
					
			if (dip_LivesPerCredit < 1) then
			
				dip_LivesPerCredit = 5
				
			end		

		end
	
	elseif (thisIndex == 9) then

		if dip_GameType ~= 2 and dip_GameType ~= 4 then
	
			dip_LimitContinue  = dip_LimitContinue  - 1
			
			
			if (dip_LimitContinue < 0) then
			
				dip_LimitContinue = 4
			
			end

		end

	elseif (thisIndex == 10) then

		if dip_GameType ~= 4 then
	
			dip_ShowAction = dip_ShowAction - 1	
			

			if (dip_ShowAction < 0) then
			
				dip_ShowAction = 4
				
			end

		end

	elseif (thisIndex == 11) then
		
		if dip_GameType ~= 4 then

			if dip_Extravid == 0 then

				if (offsetGetReadyEnd - offsetGetReady > 1) and (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 7

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 6

				elseif (offsetClearend - offsetClear > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 5

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 4

				elseif (offsetClearend - offsetClear > 1) then

					dip_Extravid = 3

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) then

					dip_Extravid = 2

				elseif (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 1

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 1 then

				dip_Extravid = 0
				

			elseif dip_Extravid == 2 then

				if (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 1

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 3 then
				
				if (offsetSupDeathEnd - offsetSupDeath > 1) then

					dip_Extravid = 2

				elseif (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 1

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 4 then

				if (offsetClearend - offsetClear > 1) then

					dip_Extravid = 3

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) then

					dip_Extravid = 2

				elseif (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 1

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 5 then

				if (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 4

				elseif (offsetClearend - offsetClear > 1) then

					dip_Extravid = 3

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) then

					dip_Extravid = 2

				elseif (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 1

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 6 then

				if (offsetClearend - offsetClear > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 5

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 4

				elseif (offsetClearend - offsetClear > 1) then

					dip_Extravid = 3

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) then

					dip_Extravid = 2

				elseif (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 1

				else

					dip_Extravid = 0

				end

			elseif dip_Extravid == 7 then

				if (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetClearend - offsetClear > 1) then

					dip_Extravid = 6

				elseif (offsetClearend - offsetClear > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 5

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) and (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 4

				elseif (offsetClearend - offsetClear > 1) then

					dip_Extravid = 3

				elseif (offsetSupDeathEnd - offsetSupDeath > 1) then

					dip_Extravid = 2

				elseif (offsetGetReadyEnd - offsetGetReady > 1) then

					dip_Extravid = 1

				else

					dip_Extravid = 0

				end

			end

			if dip_Extravid == 0 then

				ShowResurrect = false 
				ShowSupDeath = false
				ShowLvlClear = false 

			elseif dip_Extravid == 1 then

				ShowResurrect = true
				ShowSupDeath = false 
				ShowLvlClear = false

			elseif dip_Extravid == 2 then

				ShowResurrect = false 
				ShowSupDeath = true
				ShowLvlClear = false 

			elseif dip_Extravid == 3 then

				ShowResurrect = false
				ShowSupDeath = false 
				ShowLvlClear = true

			elseif dip_Extravid == 4 then

				ShowResurrect = true
				ShowSupDeath = true 
				ShowLvlClear = false

			elseif dip_Extravid == 5 then

				ShowResurrect = true
				ShowSupDeath = false 
				ShowLvlClear = true

			elseif dip_Extravid == 6 then

				ShowResurrect = false
				ShowSupDeath = true 
				ShowLvlClear = true

			elseif dip_Extravid == 7 then

				ShowResurrect = true
				ShowSupDeath = true 
				ShowLvlClear = true	

			end	

		end

	elseif (thisIndex == 12) then
	
		if dip_GameType ~= 1 and dip_GameType ~= 2 and dip_GameType ~= 4 then dip_Hints = not dip_Hints end

	elseif (thisIndex == 13) then
	
		if dip_GameType ~= 3 and dip_GameType ~= 4 then
	
			dip_MashtoRun = dip_MashtoRun - 1	
			
			if (dip_MashtoRun < 0) then
			
				dip_MashtoRun = 3
				
			end	

		end	
					
	elseif (thisIndex == 14) then		

		dip_Res = dip_Res - 1

		if dip_Res <0 then dip_Res = 3 end

		getRes()
		
	elseif (thisIndex == 15) then		

		setDefault()

	elseif (thisIndex == 16) then		

		lvlState = lvlEnd
		
	end

end

function printOpts()

	-- This function writes the options on the service menu screen.
	local k = 0
	local ypos = 0
	local fntx = OVLW-OVLW/3
	local smenu = {}; 
	local TitLevel = " "
	
	smenu[1] = "Game Type       "
	smenu[2] = "Difficulty      "	
	smenu[3] = "Play Style      "
	smenu[4] = "Start at Level  "
	smenu[5] = "Start at Scene  "
	smenu[6] = "Death Rewind    "
	smenu[7] = "Coins per Credit"
	smenu[8] = "Lives per Credit"
	smenu[9] = "Allow Continue? "
	smenu[10] = "Show Moves?     "
	smenu[11] = "Extra Movies    "
	smenu[12] = "Show Hints?     "
	smenu[13] = "Run Action with "
	smenu[14] = "Overlay Res     "
	smenu[15] = "Default"
	smenu[16] = "EXIT"	

	fontSelect(fontGame)	

	if ShowTitle then


		setFontColor(mycolor3)
		fontSelect(fontLCD)
		fontPrint(getMiddle("OPTIONS MENU"),LINEH*2, "OPTIONS MENU")
			
	end		

	fontSelect(fontOpt)
	
	for k=1,16 do
		
		ypos = OVLH/8 + k *LINEH*3.5
		if k == optSel then setFontColor(mycolor2) else setFontColor(mycolor1) end		
		
			
		if k == 15 then 

			fontPrint(getMiddle(smenu[15]), OVLH/7 + k*LINEH*3.5, "Default") 

		elseif k ==16 then 

			fontPrint(getMiddle(smenu[16]), OVLH/7 + k*LINEH*3.5, "EXIT")

		else 

			fontPrint(OVLW/4, ypos, smenu[k]) 

		end
		
		if (k == 1) then	

			if dip_GameType == 0 then
				
				fontPrint(fntx, ypos, "Normal")

			elseif dip_GameType == 1 then
		
				fontPrint(fntx, ypos, "Life Bar")

			elseif dip_GameType == 2 then
		
				fontPrint(fntx, ypos, "Percent")

			elseif dip_GameType == 3 then
		
				fontPrint(fntx, ypos, "Kid (Action Only)")
				
			elseif dip_GameType == 4 then
		
				fontPrint(fntx, ypos, "Watch Movie")		
									
			end

		elseif (k == 2) then

			if dip_GameType == 4 then

				fontPrint(fntx, ypos, "N/A")

			else


				if dip_Diffshow == 0 then
					
					fontPrint(fntx, ypos, "Easy")

				elseif dip_Diffshow == 1 then
			
					fontPrint(fntx, ypos, "Normal")	

				elseif dip_Diffshow == 2 then
			
					fontPrint(fntx, ypos, "Hard")

				elseif dip_Diffshow == 3 then
			
					fontPrint(fntx, ypos, "Extreme")

				elseif dip_Diffshow == 4 then
			
					fontPrint(fntx, ypos, "In-Game")
											
				end
			
			end	

		elseif (k == 3) then

			if dip_GameType == 2 or dip_GameType == 4 then

				fontPrint(fntx, ypos, "N/A")

			else

				if dip_PlayStyle == 0 then
					
					fontPrint(fntx, ypos, "Normal")

				elseif dip_PlayStyle == 1 then
			
					fontPrint(fntx, ypos, "Random")	

				elseif dip_PlayStyle == 2 then
			
					fontPrint(fntx, ypos, "Tiers")

				elseif dip_PlayStyle == 3 then
			
					fontPrint(fntx, ypos, "Map")
											
				end
			
			end	

		elseif (k == 4) then

			if dip_PlayStyle > 0 or dip_GameType == 4 then

				fontPrint(fntx, ypos, "N/A")

			else

				TitLevel = 	dip_StartLevel .. ". " .. Level[dip_StartLevel][TITLE]
				fontPrint(fntx, ypos, TitLevel)

			end
		
		elseif (k == 5) then

			if dip_GameType == 2 or dip_GameType == 4 or dip_PlayStyle > 0  then

				fontPrint(fntx, ypos, "N/A")

			else	

				fontPrint(fntx, ypos, dip_StartScene)	

			end	

		elseif (k == 6) then	

			if dip_GameType == 2 or dip_GameType == 4 then

				fontPrint(fntx, ypos, "N/A")

			else

				if dip_Rewind == 0 then
				
					fontPrint(fntx, ypos, "Scene")
								
				elseif dip_Rewind == 1 then
			
					fontPrint(fntx, ypos, "Last Move")
					
				elseif dip_Rewind == 2 then
			
					fontPrint(fntx, ypos, "Level")

				elseif dip_Rewind == 3 then
			
					fontPrint(fntx, ypos, "Next Move")
													
				end

			end	
		
			
		
		elseif (k == 7) then

			if (dip_CoinsPerCredit == DOPT_FREEPLAY) then
				
				fontPrint(fntx,ypos, "Free Play")
				
			else
			
				fontPrint(fntx,ypos, dip_CoinsPerCredit)
			end		
		
		elseif (k == 8) then

			if dip_GameType == 1 or dip_GameType == 2 or dip_GameType == 4 then

				fontPrint(fntx, ypos, "N/A")

			else

				fontPrint(fntx, ypos, dip_LivesPerCredit)

			end

		elseif (k == 9) then	

			if dip_GameType == 2 or dip_GameType == 4 then

				fontPrint(fntx, ypos, "N/A")

			else	
			
				if dip_LimitContinue == 0 then
					
					fontPrint(fntx, ypos, "None")

				elseif dip_LimitContinue == 4 then
					
					fontPrint(fntx, ypos, "Unlimited")	
				
				else
			
					fontPrint(fntx, ypos, dip_LimitContinue)	
					
				end

			end

		elseif (k == 10) then

			if dip_GameType == 4 then

				fontPrint(fntx, ypos, "N/A")

			else
		
				if dip_ShowAction == 0 then			
				
					fontPrint(fntx, ypos, "Nothing")	
								
				elseif dip_ShowAction == 1 then
				
					fontPrint(fntx, ypos, "Sound")	

				elseif dip_ShowAction == 2 then
				
					fontPrint(fntx, ypos, "Guess")

				elseif dip_ShowAction == 3 then
				
					fontPrint(fntx, ypos, "Cliff")

				elseif dip_ShowAction == 4 then
				
					fontPrint(fntx, ypos, "Normal")
							
				end	

			end

		elseif (k == 11) then

			if dip_GameType == 4 then

				fontPrint(fntx, ypos, "N/A")

			else
		
				if dip_Extravid == 0 then			
				
					fontPrint(fntx, ypos, "None")	
								
				elseif dip_Extravid == 1 then
				
					fontPrint(fntx, ypos, "Ready")	

				elseif dip_Extravid == 2 then
				
					fontPrint(fntx, ypos, "Death")

				elseif dip_Extravid == 3 then
				
					fontPrint(fntx, ypos, "Clear")

				elseif dip_Extravid == 4 then
				
					fontPrint(fntx, ypos, "Ready/Death")

				elseif dip_Extravid == 5 then
				
					fontPrint(fntx, ypos, "Ready/Clear")

				elseif dip_Extravid == 6 then
				
					fontPrint(fntx, ypos, "Clear/Death")

				elseif dip_Extravid == 7 then
				
					fontPrint(fntx, ypos, "All")
							
				end	

			end

		elseif (k == 12) then	

			if dip_GameType == 1 or dip_GameType == 2 or dip_GameType == 4 then

				fontPrint(fntx, ypos, "N/A")

			else	
			
				if dip_Hints then
				
					fontPrint(fntx, ypos, "Yes")	
					
				
				else
				
					fontPrint(fntx, ypos, "No")
					
				
				end
			
			end

		elseif (k == 13) then

			if dip_GameType == 3 or dip_GameType == 4 then

				fontPrint(fntx, ypos, "N/A")

			else	

				if dip_MashtoRun == 0 then
					
					fontPrint(fntx, ypos, "Good Hand Stick")	
									
				elseif dip_MashtoRun == 1 then
					
					fontPrint(fntx, ypos, "Bad Hand Stick")

				elseif dip_MashtoRun == 2 then
					
					fontPrint(fntx, ypos, "Two Buttons")

				elseif dip_MashtoRun == 3 then
					
					fontPrint(fntx, ypos, "Simple Mash")
								
				end

			end
									
		elseif (k == 14) then		
			
			if dip_Res == 0 then

				fontPrint(fntx, ypos, "Hi")

			elseif dip_Res == 1 then

				fontPrint(fntx, ypos, "Basic Hi")

			elseif dip_Res == 2 then

				fontPrint(fntx, ypos, "Lo")

			elseif dip_Res == 3 then

				fontPrint(fntx, ypos, "Basic Lo")
			
			end
					
		end

	end

end

function doServiceMenu()

	-- This is the main function for the service menu screen.
	
	local gunx = 42
	local optMax = 16

	if (lvlState == lvlSetup) then

		discSkipToFrame(frameOptions)
		discPause()		
		timerOFF()		
		optSel = 1
		readConfig()	
		bShowLvl = false
		bShowScene = false
		bShowScore = false
		bShowLives = false
		bShowLvl = false
		bShowSkip = false		
		bShowCredits = false
		bShowGet = false
		bShowLCD = false
		bShowAction = false	
		bIgnoreJoy = false
		
		lvlState = lvlRunning
	
	elseif (lvlState == lvlRunning) then
	
		if (p1BUTTON1 or p1RIGHT) then
		
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end

			else
				
				p1BUTTON1 = false
				p1RIGHT = false
				soundPlay(sndcredit)
				updateOpts(optSel)	

				bIgnoreJoy = true
				joyDelayON(0.250)

			end	

		elseif (p1LEFT) then

			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end

			else

				p1LEFT = false
				soundPlay(sndcredit)
				updateOptsMin(optSel)

				bIgnoreJoy = true
				joyDelayON(0.250)
				
			end
			
		elseif (p1DOWN or p1UP) then
		
			
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end
				
			else
				
				if p1DOWN then 

					p1DOWN = false
					optSel = optSel + 1
					if (optSel > optMax) then optSel = 1 end
				
				elseif p1UP then 
					
					p1UP = false	
					optSel = optSel - 1
					if (optSel < 1) then optSel = optMax end
				
				end
				
				soundPlay(sndcoin)
				
				bIgnoreJoy = true
				joyDelayON(0.250)
							
			end
		
		elseif (p1START1) then

			p1START1 = false
			lvlState = lvlEnd		
		
		end
		printOpts()

	elseif (lvlState == lvlEnd) then
	
		writeConfig()		
		gameflow = flow_GameInit

	end

end

function doSave()

	local gunx = 42
	local optMax = 4
	
	if (lvlState == lvlSetup) then
	
		discSkipToFrame(frameSave)
		discPause()		
		timerOFF()		
		optSel = 1
		readSave()		
		bShowScore = false
		bShowLives = false
		bShowLvl = false
		bhowScene = false
		bShowSkip = false		
		bShowCredits = false
		bShowLCD = false
		bShowGet = false
		bShowAction = false	
		bIgnoreJoy = false
		
		lvlState = lvlRunning
	
	elseif (lvlState == lvlRunning) then
	
		if (p1BUTTON1 or p1RIGHT) then
		
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end
				
			else

				p1BUTTON1 = false
				p1RIGHT = false
				soundPlay(sndcredit)
				updateSave(optSel)
				bIgnoreJoy = true
				joyDelayON(0.250)	

			end

		elseif (p1LEFT) then

			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end
				
			else

				p1LEFT = false
				soundPlay(sndcredit)
				updateSaveMin(optSel)
				bIgnoreJoy = true
				joyDelayON(0.250)

			end	
			
		elseif (p1DOWN or p1UP) then
					
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end
				
			else
				
				if p1DOWN then 
					
					p1DOWN = false
					optSel = optSel + 1
					if (optSel > optMax) then optSel = 1 end
				
				elseif p1UP then 
					
					p1UP = false
					optSel = optSel - 1
					if (optSel < 1) then optSel = optMax end
				
				end
				
				soundPlay(sndcoin)
				bIgnoreJoy = true
				joyDelayON(0.250)

			end

		elseif (p1START1) then

			p1START1 = false
			lvlState = lvlEnd
			
		end
		printSave()

	elseif (lvlState == lvlEnd) then
	
		gameflow = flow_GameInit

	end

end

function readSave()

	local s1
	local svLevel = ""
	local svScene = ""
	local svMove = ""
	local svLives = ""
	local svDif = ""
	local svScore = ""
	local svGtype = ""
	local svScPlay = ""
	local svScDeath = ""
	local svTotDeath = ""
	local k = 0
	local h1

	slotsave = nil; slotsave = {}

	for k = 1,4 do

		if k == 1 then

			h1 = io.input(MYDIR.."s1.cfg")
			s1 = io.read("*line")

			svLevel = string.sub(s1,1,string.find(s1,",")-1)
			svScene = string.sub(s1,string.find(s1,",")+1, string.find(s1,"!")-1)
			svMove = string.sub(s1,string.find(s1,"!")+1, string.find(s1,"?")-1)
			svLives = string.sub(s1,string.find(s1,"?")+1, string.find(s1,";")-1)
			svDif = string.sub(s1,string.find(s1,";")+1, string.find(s1,":")-1)
			svScore = string.sub(s1,string.find(s1,":")+1, string.find(s1,"A")-1)
			svGtype = string.sub(s1,string.find(s1,"A")+1, string.find(s1,"B")-1)
			svScPlay = string.sub(s1,string.find(s1,"B")+1, string.find(s1,"C")-1)
			svScDeath = string.sub(s1,string.find(s1,"C")+1, string.find(s1,"D")-1)
			svTotDeath = string.sub(s1,string.find(s1,"D")+1, string.find(s1,"E")-1)

			slotsave[1] = {svLevel, svScene, svMove, svLives, svDif, svScore, svGtype, svScPlay, svScDeath, svTotDeath}
		
			io.close(h1)

		elseif k == 2 then

			h1 = io.input(MYDIR.."s2.cfg")
			s1 = io.read("*line")

			svLevel = string.sub(s1,1,string.find(s1,",")-1)
			svScene = string.sub(s1,string.find(s1,",")+1, string.find(s1,"!")-1)
			svMove = string.sub(s1,string.find(s1,"!")+1, string.find(s1,"?")-1)
			svLives = string.sub(s1,string.find(s1,"?")+1, string.find(s1,";")-1)
			svDif = string.sub(s1,string.find(s1,";")+1, string.find(s1,":")-1)
			svScore = string.sub(s1,string.find(s1,":")+1, string.find(s1,"A")-1)
			svGtype = string.sub(s1,string.find(s1,"A")+1, string.find(s1,"B")-1)
			svScPlay = string.sub(s1,string.find(s1,"B")+1, string.find(s1,"C")-1)
			svScDeath = string.sub(s1,string.find(s1,"C")+1, string.find(s1,"D")-1)
			svTotDeath = string.sub(s1,string.find(s1,"D")+1, string.find(s1,"E")-1)

			slotsave[2] = {svLevel, svScene, svMove, svLives, svDif, svScore, svGtype, svScPlay, svScDeath, svTotDeath}
		
			io.close(h1)

		elseif k == 3 then

			h1 = io.input(MYDIR.."s3.cfg")
			s1 = io.read("*line")

			svLevel = string.sub(s1,1,string.find(s1,",")-1)
			svScene = string.sub(s1,string.find(s1,",")+1, string.find(s1,"!")-1)
			svMove = string.sub(s1,string.find(s1,"!")+1, string.find(s1,"?")-1)
			svLives = string.sub(s1,string.find(s1,"?")+1, string.find(s1,";")-1)
			svDif = string.sub(s1,string.find(s1,";")+1, string.find(s1,":")-1)
			svScore = string.sub(s1,string.find(s1,":")+1, string.find(s1,"A")-1)
			svGtype = string.sub(s1,string.find(s1,"A")+1, string.find(s1,"B")-1)
			svScPlay = string.sub(s1,string.find(s1,"B")+1, string.find(s1,"C")-1)
			svScDeath = string.sub(s1,string.find(s1,"C")+1, string.find(s1,"D")-1)
			svTotDeath = string.sub(s1,string.find(s1,"D")+1, string.find(s1,"E")-1)

			slotsave[3] = {svLevel, svScene, svMove, svLives, svDif, svScore, svGtype, svScPlay, svScDeath, svTotDeath}
			
			io.close(h1)

		elseif k == 4 then

			h1 = io.input(MYDIR.."s4.cfg")
			s1 = io.read("*line")

			svLevel = string.sub(s1,1,string.find(s1,",")-1)
			svScene = string.sub(s1,string.find(s1,",")+1, string.find(s1,"!")-1)
			svMove = string.sub(s1,string.find(s1,"!")+1, string.find(s1,"?")-1)
			svLives = string.sub(s1,string.find(s1,"?")+1, string.find(s1,";")-1)
			svDif = string.sub(s1,string.find(s1,";")+1, string.find(s1,":")-1)
			svScore = string.sub(s1,string.find(s1,":")+1, string.find(s1,"A")-1)
			svGtype = string.sub(s1,string.find(s1,"A")+1, string.find(s1,"B")-1)
			svScPlay = string.sub(s1,string.find(s1,"B")+1, string.find(s1,"C")-1)
			svScDeath = string.sub(s1,string.find(s1,"C")+1, string.find(s1,"D")-1)
			svTotDeath = string.sub(s1,string.find(s1,"D")+1, string.find(s1,"E")-1)

			slotsave[4] = {svLevel, svScene, svMove, svLives, svDif, svScore, svGtype, svScPlay, svScDeath, svTotDeath}
			
			io.close(h1)

		end	

	end

end

function printSave()

	-- This function writes the options on the service menu screen.
	local k = 0
	local ypos = 0
	local fntx = OVLW-OVLW/2+OVLW/3
	local smenu = {}; 
	local s1 = ""
	local tempDif = ""
	
	smenu[3] = "PROCEED"
	smenu[4] = "EXIT"	

		

	if ShowTitle then

		setFontColor(mycolor3)
		fontSelect(fontLCD)
		fontPrint(getMiddle("LOAD/SAVE MENU"), LINEH*2, "LOAD/SAVE MENU")
		
	end		

	
	setFontColor(mycolor4)
	fontSelect(fontLCD)

	for k=1,4 do

		ypos = OVLH/5 + k *LINEH*5

		if 	tonumber(slotsave[k][1]) == 1 and (tonumber(slotsave[k][2]) == 1 or tonumber(slotsave[k][2]) == 0) and tonumber(slotsave[k][3]) == 1 then

			if k < 4 then

				s1 = k .. ". Empty"
			
			else
			
				s1 = "A. Empty"	

			end	
		
		else

			if tonumber(slotsave[k][5]) == 0 then
				
				tempDif = "Easy"

			elseif tonumber(slotsave[k][5]) == 1 then
		
				tempDif = "Normal"	

			elseif tonumber(slotsave[k][5]) == 2 then
		
				tempDif = "Hard"

			elseif tonumber(slotsave[k][5]) == 3 then
		
				tempDif = "Extreme"
							
			end
		
			if tonumber(slotsave[k][7]) == 5 then

				if k < 4 then

					s1=k .. ". Lvl:" .. slotsave[k][1] .. ", Scn:" .. slotsave[k][2] .. ", Mov:" .. slotsave[k][3] .. ", Bar:" .. slotsave[k][4] .. ", " .. tempDif .. ", " .. slotsave[k][6]
		
				else
				
					s1="A. Lvl:" .. slotsave[k][1] .. ", Scn:" .. slotsave[k][2] .. ", Mov:" .. slotsave[k][3] .. ", Bar:" .. slotsave[k][4] .. ", " .. tempDif .. ", " .. slotsave[k][6]

				end	


			else

				if k < 4 then

					s1=k .. ". Lvl:" .. slotsave[k][1] .. ", Scn:" .. slotsave[k][2] .. ", Mov:" .. slotsave[k][3] .. ", Liv:" .. slotsave[k][4] .. ", " .. tempDif .. ", " .. slotsave[k][6]
		
				else
				
					s1="A. Lvl:" .. slotsave[k][1] .. ", Scn:" .. slotsave[k][2] .. ", Mov:" .. slotsave[k][3] .. ", Liv:" .. slotsave[k][4] .. ", " .. tempDif .. ", " .. slotsave[k][6]

				end	

			end

			
			
		end

		fontPrint(OVLW/5, ypos, s1)

	end

	setFontColor(mycolor1)
	fontSelect(fontLCD)
	
	for k=1,4 do
		
		
		ypos = OVLH/5 + (k+6) *LINEH*5
		if k == optSel then setFontColor(mycolor2) else setFontColor(mycolor1) end		
		if k == 3 then fontPrint(getMiddle(smenu[3]), OVLH/5 + (k+6) *LINEH*5, "PROCEED") end
		if k == 4 then fontPrint(getMiddle(smenu[4]), OVLH/5 + (k+6) *LINEH*5, "EXIT") end
		
		if (k == 1) then

			if dip_Loadsave == 0 then
				
				fontPrint(getMiddle("LOAD"), ypos, "LOAD")

			elseif dip_Loadsave == 1 then
		
				fontPrint(getMiddle("SAVE"), ypos, "SAVE")	
				
			end
			
		elseif (k == 2) then	

			if dip_Slot == 1 then
				
				fontPrint(getMiddle("SLOT #1"), ypos, "SLOT #1")

			elseif dip_Slot == 2 then
		
				fontPrint(getMiddle("SLOT #2"), ypos, "SLOT #2")	

			elseif dip_Slot == 3 then
		
				fontPrint(getMiddle("SLOT #3"), ypos, "SLOT #3")

			elseif dip_Slot == 4 then
		
				fontPrint(getMiddle("AUTOSAVE"), ypos, "AUTOSAVE")
				
			end	
				
		end

	end

end

function updateSave(thisIndex)

	if (thisIndex == 1) then
	
		dip_Loadsave  = dip_Loadsave  + 1

		if (dip_Loadsave  > 1) then
		
			dip_Loadsave = 0
		
		end		

		if dip_Loadsave == 1 then

			dip_Slot = 1

		end
				

	elseif (thisIndex == 2) then	
	
		dip_Slot = dip_Slot + 1

		if (dip_Slot == 4) then
		
			dip_Loadsave = 0
			
		end
			
		if (dip_Slot > 4) then
		
			dip_Slot = 1
			
		end

	elseif (thisIndex == 3) then
	
		if dip_Loadsave == 0 then

			loadSave(dip_Slot)			

		else
			
			local k = dip_Slot

			slotsave[k][1] = iCurPos
			slotsave[k][2] = iSegPointer

			if bCheckMove then

				slotsave[k][3] = currentMove + 1
			
			else

				slotsave[k][3] = currentMove

			end

			if dip_GameType == 1 then

				slotsave[k][4] = iLifeBar

			else

				slotsave[k][4] = iLiveSave

			end
			
			slotsave[k][5] = dip_Difficulty
			slotsave[k][6] = iScore
			
			if dip_GameType == 1 then

				slotsave[k][7] = "1"

			else

				slotsave[k][7] = "0"

			end

			slotsave[k][8] = iScPlayed
			slotsave[k][9] = iScDeath
			slotsave[k][10] = iTotDeath

			if iScore > iScoreSave then	writeSave(dip_Slot) end

			lvlState = lvlEnd
			
		end	
		
	elseif (thisIndex == 4) then		

		lvlState = lvlEnd
		
	end

end

function updateSaveMin(thisIndex)

	if (thisIndex == 1) then
	
		dip_Loadsave  = dip_Loadsave - 1

		if (dip_Loadsave  < 0) then
		
			dip_Loadsave = 1
		
		end		

		if dip_Loadsave == 1 then

			dip_Slot = 1

		end
				

	elseif (thisIndex == 2) then	
	
		dip_Slot = dip_Slot - 1

		if (dip_Slot == 4) then
		
			dip_Loadsave = 0
			
		end
			
		if (dip_Slot < 1) then
		
			dip_Slot = 4
			
		end

	elseif (thisIndex == 3) then
	
		if dip_Loadsave == 0 then

			loadSave(dip_Slot)			

		else
			
			local k = dip_Slot

			slotsave[k][1] = iCurPos
			slotsave[k][2] = iSegPointer

			if bCheckMove then

				slotsave[k][3] = currentMove + 1
			
			else

				slotsave[k][3] = currentMove

			end

			if dip_GameType == 1 then

				slotsave[k][4] = iLifeBar

			else

				slotsave[k][4] = iLiveSave

			end

			slotsave[k][5] = dip_Difficulty
			slotsave[k][6] = iScore
			
			if dip_GameType == 1 then

				slotsave[k][7] = "1"

			else

				slotsave[k][7] = "0"

			end

			slotsave[k][8] = iScPlayed
			slotsave[k][9] = iScDeath
			slotsave[k][10] = iTotDeath
			
			if iScore > iScoreSave then	writeSave(dip_Slot) end

			lvlState = lvlEnd
			
		end	
		
	elseif (thisIndex == 4) then		

		lvlState = lvlEnd
		
	end

end

function writeSave(thisSlot)

	local k = thisSlot
	local sNewLine = "\n"
	local s1 = ""
	local s0 = MYDIR.."s" .. thisSlot .. ".cfg"
	local h1 = io.output(s0)
			
	s1 = slotsave[k][1] .. "," .. slotsave[k][2] .. "!" .. slotsave[k][3] .. "?" .. slotsave[k][4] .. ";" .. slotsave[k][5] .. ":" .. slotsave[k][6] .. "A" .. slotsave[k][7] .. "B" .. slotsave[k][8] .. "C" .. slotsave[k][9] .. "D" .. slotsave[k][10] .. "E"
	io.write(s1 .. sNewLine)
		
	for k=1,finalstage do

		if levelMap[k] == true then

			s1 = LvlOrder[k] .. "A" .. "true" .. "B"

		else

			s1 = LvlOrder[k] .. "A" .. "false" .. "B"

		end

		io.write(s1 .. sNewLine)
				
	end	
	
	io.close(h1)

end

function loadSave(thisSlot)

	local s1
	local i = 0
	local j = 0
	local k = 0
	local s0 = MYDIR.."s" .. thisSlot .. ".cfg"
	local h1 = io.input(s0)

	s1 = io.read("*line")
	
	dip_StartLevel = tonumber(string.sub(s1,1,string.find(s1,",")-1))
	dip_StartScene = tonumber(string.sub(s1,string.find(s1,",")+1, string.find(s1,"!")-1))
	currentMove = tonumber(string.sub(s1,string.find(s1,"!")+1, string.find(s1,"?")-1))
	dip_GameType = tonumber(string.sub(s1,string.find(s1,"A")+1, string.find(s1,"B")-1))

	if dip_GameType == 1 then

		iLifeBar = tonumber(string.sub(s1,string.find(s1,"?")+1, string.find(s1,";")-1))
		iLives = 1

	else	
			
		iLives = tonumber(string.sub(s1,string.find(s1,"?")+1, string.find(s1,";")-1))
			
	end

	iScPlayed = tonumber(string.sub(s1,string.find(s1,"B")+1, string.find(s1,"C")-1))
	iScDeath = tonumber(string.sub(s1,string.find(s1,"C")+1, string.find(s1,"D")-1))
	iTotDeath = tonumber(string.sub(s1,string.find(s1,"D")+1, string.find(s1,"E")-1))

	dip_Difficulty = tonumber(string.sub(s1,string.find(s1,";")+1, string.find(s1,":")-1))
	iScore = tonumber(string.sub(s1,string.find(s1,":")+1, string.find(s1,"A")-1))
		
	for k = 1,finalstage do

		s1 = io.read("*line")

		LvlOrder[k] = tonumber(string.sub(s1,1,string.find(s1,"A")-1))
		if string.sub(s1,string.find(s1,"A")+1, string.find(s1,"B")-1) == "true" then levelMap[k] = true end
	
	end	

	if 	dip_StartLevel == 1 and dip_StartScene == 1 and currentMove ==1 then

		lvlState = lvlEnd

		else

		iLiveSave = iLives
		iScoreSave = iScore	

		startSave()

	end

	io.close(h1)
	
end

function autoSave(thisSlot)

	local i = 0
	
	readSave()

	slotsave[thisSlot][1] = iCurPos
	slotsave[thisSlot][2] = iSegPointer

	if bCheckMove then

		slotsave[thisSlot][3] = currentMove+1

	else
			
		slotsave[thisSlot][3] = currentMove

	end	

	if dip_GameType == 1 then

		slotsave[thisSlot][4] = iLifeBar

	else

		slotsave[thisSlot][4] = iLives 

	end
	
	slotsave[thisSlot][5] = dip_Difficulty
	slotsave[thisSlot][6] = iScore
	slotsave[thisSlot][7] = dip_GameType
	slotsave[thisSlot][8] = iScPlayed
	slotsave[thisSlot][9] = iScDeath
	slotsave[thisSlot][10] = iTotDeath

	writeSave(thisSlot)	
		
end


function doExit() -- Exit program


	-- This is the main function for exit screen.
	
	local optMax = 3

	if (lvlState == lvlSetup) then

		discSkipToFrame(frameHints)
		discPause()		
		timerOFF()		
		optSel = 1
		bShowLvl = false
		bShowScene = false
		bShowScore = false
		bShowLives = false
		bShowLvl = false
		bShowSkip = false		
		bShowCredits = false
		bShowGet = false
		bShowLCD = false
		bShowAction = false	
		bIgnoreJoy = false
		
		lvlState = lvlRunning

	elseif (lvlState == lvlRunning) then
	
		if (p1BUTTON1) then
		
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end

			else
				
				p1BUTTON1 = false
				soundPlay(sndcredit)
				updateExit(optSel)	

				bIgnoreJoy = true
				joyDelayON(0.250)

			end	
			
		elseif (p1DOWN or p1UP) then
		
			
			if bIgnoreJoy then 
			
				if joyDelayDue() then bIgnoreJoy = false end
				
			else
				
				if p1DOWN then 

					p1DOWN = false
					optSel = optSel + 1
					if (optSel > optMax) then optSel = 1 end
				
				elseif p1UP then 
					
					p1UP = false	
					optSel = optSel - 1
					if (optSel < 1) then optSel = optMax end
				
				end
				
				soundPlay(sndcoin)
				
				bIgnoreJoy = true
				joyDelayON(0.250)
							
			end
			
		end
		printExit()

	elseif (lvlState == lvlEnd) then
	
		gameflow = flow_GameInit

	end

end


function updateExit(thisIndex)

	if (thisIndex == 1) then
	
		singeQuit()
			
	elseif (thisIndex == 2) then		

		lvlState = lvlEnd

	elseif (thisIndex == 2) then		

		lvlState = lvlEnd

	elseif (thisIndex == 3) then		

		lvlState = lvlSetup
		currentLevel = levelService

	end

end


function printExit()

	-- This function writes the options on the exit screen.

	local k = 0
	local ypos = OVLH/5 + k *LINEH*6
	local fntx = OVLW-OVLW/2+OVLW/3
	local emenu = {}; 
	local s1 = ""
	local tempDif = ""
	
	emenu[1] = "YES"
	emenu[2] = "NO"
	emenu[3] = "OPTIONS"	
		

	setFontColor(mycolor2)
	fontSelect(fontBig)
	fontPrint(getMiddle("QUIT GAME?"), LINEH*2, "QUIT GAME?")
	
	setFontColor(mycolor1)
	fontSelect(fontBig)
	
	for k=1,3 do
				
		ypos = OVLH/5 + (k+6) *LINEH*5
		if k == optSel then setFontColor(mycolor2) else setFontColor(mycolor1) end		
		if k == 1 then fontPrint(getMiddle(emenu[1]), ypos, "YES") end
		if k == 2 then fontPrint(getMiddle(emenu[2]), ypos, "NO") end
		if k == 3 then fontPrint(getMiddle(emenu[3]), ypos, "OPTIONS") end
	
	end

end

