--[[

PROGRAM NAME:	MAD DOG MCCREE (SINGE EDITION)
AUTHOR:			RDG2010
CONVERTED FOR SINGE 2: POIU2020
This file is part of MAD DOG MCCREE (SINGE EDITION)

    MAD DOG MCCREE (SINGE EDITION) is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation.

    MAD DOG MCCREE (SINGE EDITION) is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

    Read COPYING.TXT for more info.


]]--


bDebug = true
bPlaySound = true

-- Hypseus Game Setup --

-- Do Not Remove/Alter these --
OVERLAY_FULL     = 1
OVERLAY_HALF     = 2
OVERLAY_OVERSIZE = 3
-- Do Not Remove/Alter these --


BASEDIR = "singe"                                 -- This should be 'singe'

BASEOVERLAY = OVERLAY_OVERSIZE                    -- Set the default Overlay

MYDIR = BASEDIR .."/".. "maddog-hd/"             -- This is the directory where your game is

MovieFPS = 29.97

dip_ShowHit = false

-- End Hypseus Game Setup --


if (setOverlayResolution ~= nil) then
        setOverlayResolution(360, 240) -- overrides BASEOVERLAY
end

DOPT_EASY = 1
DOPT_MEDIUM = 2
DOPT_HARD = 3
DOPT_IMMEDIATE = 100
DOPT_ONEMPTY = 101
DOPT_BORDERS = 102
DOPT_LIGHTGUN = 103

dip_StartAtPart = 1
dip_LivesPerCredit = 6
dip_CoinsPerCredit = 1
dip_CoinsPerContinue = dip_CoinsPerCredit
dip_Difficulty = DOPT_EASY
dip_MaxBullets = 6
dip_ReloadTrigger = DOPT_BORDERS
dip_Crosshair = 1
dip_Practice = false
dip_Showdown = true
dip_Undertaker = false
dip_Lores = false


--Framework.singe....

discSetFPS(MovieFPS)
discSearch(1)

SWITCH_UP         =  0
SWITCH_LEFT       =  1
SWITCH_DOWN       =  2
SWITCH_RIGHT      =  3
SWITCH_START1     =  4
SWITCH_START2     =  5
SWITCH_BUTTON1    =  6
SWITCH_BUTTON2    =  7
SWITCH_BUTTON3    =  8
SWITCH_COIN1      =  9
SWITCH_COIN2      = 10
SWITCH_SKILL1     = 11
SWITCH_SKILL2     = 12
SWITCH_SKILL3     = 13
SWITCH_SERVICE    = 14
SWITCH_TEST       = 15
SWITCH_RESET      = 16
SWITCH_SCREENSHOT = 17
SWITCH_QUIT       = 18
SWITCH_PAUSE      = 19
SWITCH_CONSOLE    = 20

FONT_QUALITY_SOLID   = 1
FONT_QUALITY_SHADED  = 2
FONT_QUALITY_BLENDED = 3

SOUND_ERROR_INVALID = -1
SOUND_ERROR_FULL    = -2

OVERLAY_NOT_UPDATED = 0
OVERLAY_UPDATED     = 1


--End Framework

-- Let there be globals!

rndegg=math.random
stateStartup    = 0
statePlaying    = 1
stateQuit	 	= 2
stateInit		= 3

lvlSetup = 1
lvlRunning = 2
lvlEnd = 3
lvlIntro = 4
lvlPlayPause = 5
lvlPlayClip = 6
lvlPlayDeath = 7
lvlUndertaker = 8
lvlPauseAction = 9
lvlPlayRest = 10
lvlPlayAdviceSetup = 11
lvlPlayAdvice = 12
lvlShowMineHint = 13
lvlShowMap = 14
lvlPlayExplosion = 15
lvlPlayNiceShooting = 16
lvlPlayClip2 = 17
lvlPlayClip3 = 18
lvlPlayClip4 = 19
lvlPlayClip5 = 20
lvlPlayClip6 = 21
lvlPlayClip7 = 22
lvl2ndChance = 23
lvlState = lvlSetup

levelTownSelect = 100
levelStart = 101
levelCorral = 102
levelSheriff = 103
levelSaloon = 104
levelBank = 105
levelNoKey = 106
levelGameOver = 107
levelSignSelect = 108
levelFuse = 109
levelMine = 110
levelBottle = 111
levelHideoutSelect = 112
levelPlateau = 113
levelPond = 114
levelCliff = 115
levelCanyon = 116
levelMaze = 117
levelHideout = 118
levelHouse = 119
levelMaddog = 120
levelShowdown = 121
levelService = 122
levelHighScore = 123
levelContinue = 124
levelTut = 125
levelLivesLeft = 126
levelShowdown = 127

iScore = 0
iCredits = 0
iCoins = 0
iLives = dip_LivesPerCredit
iBullets = dip_MaxBullets
iDelay = 0
mousex = 0; mousey = 0	 -- tracks mouse cursor
cursorx = 0; cursory = 0 -- center of cursor sprite
cursoroffsetx = 0; cursoroffsety = 0
tx = 0; ty = 0; tx2 = 0	 -- Used for font coordinates
sx = 0; sy = 0;     	 -- Used for score sprite coordinates
tempDelay = 0
starPos = nil; POSX = 1; POSY = 2
sName = ""

iZmX = 1.02
iZmY = 1.02


bShowMouse = false
bPause = false
bMakeNoise = true
bShowScore = false
bShowLives = false
bShowBullets = false
bFuse = false
bGotKey = false
bLevelComplete = false
bReloadDisabled = false
bNoMoreBonuses = false
bBarKeeperDead = false
bSaloonFirstTime = false
bCorralFirstTime = false
bBankFirstTime = false
bPondFirstTime = false
bFuseNag = false
bFlipPlateau = false
bFlipCanyon = false
bFlipCliff = false
bMazeComplete = false
bHSMute = false
bHSDone = false
bShowCredits = false
bResetContinue = false
bAmmo = false
bRealShow = false

currentFrame = 0
currentState = stateInit
currentLevel = 0
tempLevel = 0
lvlFrameStart = 0	-- The start and end frame for a given scene
lvlFrameEnd = 0
iFrameStart = 0
iFrameEnd = 0


frameShootStart = 1	-- Indexes for move array
frameShootEnd = 2
frameDeathStart = 3
frameDeathEnd = 4
hitmapStart = 5
endFrmRandom = 6

-- Indexes for pixel perfect detection

lineStartX = 1
lineEndX = 3
lineY = 2
lineY2 = 4


-- Labels for elements in the hitbox arrays

bbx1 = 1	-- Box coordinates
bby1 = 2
bbx2 = 3
bby2 = 4

hitmapFrame = 1		-- Frame the boxes belong to
hitmapIndex = 2		-- Where in the hitbox array to start looking
hitmapCount = 3		-- How many boxes
hitmapBonus = 4		-- Index for a skull/spitoon bound box (in the powerup array)
hitmapCivStart = 5	-- Index in the civillian array to start looking
hitmapCivCount = 6	-- How many boxes

-- Used for undertaker clips

undertkrFrmStart = 0
undertkrFrmEnd = 0
menuFrame = 0


-- Frame offsets for each level.

offsetlvlStart = 0
offsetIntro = 2444
offsetlvlSaloon = 4460
offsetVTS4 = 8564
offsetlvlBank = 13881
offsetlvlCorral = 16302
offsetlvlSheriff = 19017
offsetVTS8 = 22023
offsetVTS9 = 26743
offsetVTS10 = 29364
offsetVTS11 = 31414
offsetVTS13 = 37942
offsetIntro2 = 37192
offsetHighScore = 37942
offsetHowToPlay = 39381
offsetMenus = 41089
thisOffset = 0

signFrame = offsetMenus + 445
continueFrmStart = offsetMenus + 19
continueFrmEnd = offsetMenus + 318
gameOverFrmStart = offsetMenus + 319
gameOverFrmEnd = offsetMenus + 437


logoFrame = 41600
logoService = offsetMenus + 17
logoGameOver = offsetMenus + 16

move = nil
totalMoves = 0
hitmapTotal = 0
currentMove = 0
tempMem = 0
showdown = nil; showdown = {false, false, false}
sign = nil

-- labels for undertaker

UNDERTKR_PULLTHROUGH = 0
UNDERTKR_BADHIT = 1
UNDERTKR_2LIVESLEFT = 2
UNDERTKR_1LIFELEFT = 3
UNDERTKR_NOLIVESLEFT = 4
UNDERTKR_SHOTWOMAN = 5
UNDERTKR_SHOTGUY = 6
UNDERTKR_SHOTNOGENDER = 7
UNDERTKR_NORMAL = 8
UNDERTKR_GOODGUY = 9



-- booleans for joystick input

p1UP = false		-- Used for level select menu.
p1DOWN = false		-- Used to quickly test if a joy direction or button is being pressed.
p1LEFT = false
p1RIGHT = false
p1BUTTON3 = false
p1COIN1 = false
p1COIN2 = false
p1SERVICE = false
p1START1 = false

stage = nil;
-- stage array {corral, saloon, sheriff's office, bank, fuse, mine}
STAGE_CORRAL = 1
STAGE_SALOON = 2
STAGE_SHERIFF = 3
STAGE_BANK = 4
STAGE_FUSE = 5
STAGE_MINE = 6
STAGE_BOTTLE = 7
STAGE_POND = 8
STAGE_PLATEAU = 9
STAGE_CLIFF = 10
STAGE_CANYON = 11
STAGE_HIDEOUT = 12
STAGE_HOUSE = 13
STAGE_MADDOG = 14


-- Index labels for sign and mine arrays
SIGN_PROSPECTOR = 1
SIGN_MINE = 2
SIGN_HIDEOUT = 3
SIGN_POST32 = 32
SIGN_POST175 = 175
SIGN_POST340 = 340
SIGN_POST500 = 500
SIGN_POST630 = 630
SIGN_ENTRANCE = 446

MINE_SIGN = 1
MINE_PITCHFORK = 2
MINE_PAN = 3
MINE_LANTERN = 4
MINE_SKULL = 5

iWhatToHit = 0
bLanternHit = false
bItemHit = false


-- Score constants
SCORE_BADGUY = 100
SCORE_BOTTLE = 50
SCORE_MADDOG = 500
SCORE_SHOWDOWN = 500
SCORE_SIGN = 100

-- Approach hideout from the front or from the rear?
iApproach = 0
HIDEOUT_REAR = 1
HIDEOUT_FRONT = 2

-- Where's the hideout?
iPosHideout = 0
mazeState = 0	-- Used in doMazeSign for loop control
curMazePos = 0	-- Keeps tabs of current maze location
mazeSize = 0	-- Total size for maze array
maze = nil		-- Array containing the path (levels, signs to show) for maze level
mazeType = 1
mazeLevel = 2
signType = 1
signDirection = 2

GOLEFT = 1
GORIGHT = 2
DOCANYON = 3	-- Labels used in doMazeSign
DOPLATEAU = 4
DOCLIFF = 5
DOPOND = 6
GOFRONT = 2
GOREAR = 1
GUY_ONE = 1
GUY_TWO = 2
GUY_THREE = 3


-- Load Assets

-- Hitmaps

dofile(MYDIR .. "framework.singe")
dofile(MYDIR .. "toolbox.singe")
dofile(MYDIR .. "hitbox-lvlbottle.singe")
dofile(MYDIR .. "hitbox-lvlcorral.singe")
dofile(MYDIR .. "hitbox-lvlbank.singe")
dofile(MYDIR .. "hitbox-lvlplateau.singe")
dofile(MYDIR .. "hitbox-lvlcanyon.singe")
dofile(MYDIR .. "hitbox-lvlcliff.singe")
dofile(MYDIR .. "hitbox-lvlsaloon.singe")
dofile(MYDIR .. "hitbox-lvlsheriff.singe")
dofile(MYDIR .. "hitbox-lvlfuse.singe")
dofile(MYDIR .. "hitbox-lvlpond.singe")
dofile(MYDIR .. "hitbox-lvlhouse.singe")
dofile(MYDIR .. "hitbox-lvlhideout.singe")
dofile(MYDIR .. "hitbox-lvlmad.singe")
dofile(MYDIR .. "hitbox-showdowns.singe")
dofile(MYDIR .. "hitbox-lvlstart.singe")
dofile(MYDIR .. "hitbox-lvltut.singe")
dofile(MYDIR .. "hitbox-highscore.singe")
dofile(MYDIR .. "hitmap-signpost.singe")
dofile(MYDIR .. "hitmap-hideoutsigns.singe")
dofile(MYDIR .. "hitmap-mine.singe")
dofile(MYDIR .. "service.singe")

fontQuality(FONT_QUALITY_SOLID)

readConfig()

sndGunshot   = soundLoad(MYDIR .. "shot.wav")
sndEmpty     = soundLoad(MYDIR .. "empty.wav")
sndReload    = soundLoad(MYDIR .. "reload.wav")
sndCoin      = soundLoad(MYDIR .. "coin.wav")
sndCredit    = soundLoad(MYDIR .. "arcadecoin.wav")
sndTing      = soundLoad(MYDIR .. "arcadecoin.wav")
sndBreak     = soundLoad(MYDIR .. "bottlebreak.wav")
sndHorns     = soundLoad(MYDIR .. "hs.wav")
sndSign      = soundLoad(MYDIR .. "music.wav")
sndHandle    = ""

	sprBullet  = spriteLoad(MYDIR .. "bullet.png")
	sprStar    = spriteLoad(MYDIR .. "star.png")
	sprCredits = spriteLoad(MYDIR .. "credits.png")
	sprReload  = spriteLoad(MYDIR .. "reload.png")
	sprArrow  = spriteLoad(MYDIR .. "pistol.png")
	sprRev = spriteLoad(MYDIR .. "hit.png")
	sprHole  = spriteLoad(MYDIR .. "hole.png")
	sprShot  = spriteLoad(MYDIR .. "shot.png")
	sprBulletSM  = spriteLoad(MYDIR .. "bullet.png")
	sprStarSM    = spriteLoad(MYDIR .. "star.png")
	sprName = nil
	
	sprRev1      = spriteLoad(MYDIR .. "hit1.png")
	sprRev2      = spriteLoad(MYDIR .. "hit2.png")
	sprRev3      = spriteLoad(MYDIR .. "hit3.png")
	sprRev4     = spriteLoad(MYDIR .. "hit4.png")
	sprRev5     = spriteLoad(MYDIR .. "hit5.png")

	sprNUM = nil; sprNUM = {}
	sprNUM[0] = spriteLoad(MYDIR .. "num0.png")
	sprNUM[1] = spriteLoad(MYDIR .. "num1.png")
	sprNUM[2] = spriteLoad(MYDIR .. "num2.png")
	sprNUM[3] = spriteLoad(MYDIR .. "num3.png")
	sprNUM[4] = spriteLoad(MYDIR .. "num4.png")
	sprNUM[5] = spriteLoad(MYDIR .. "num5.png")
	sprNUM[6] = spriteLoad(MYDIR .. "num6.png")
	sprNUM[7] = spriteLoad(MYDIR .. "num7.png")
	sprNUM[8] = spriteLoad(MYDIR .. "num8.png")
	sprNUM[9] = spriteLoad(MYDIR .. "num9.png")

	resX = 360
	resY = 240
	UnX = resX/1440
	UnY = resY/1080
	meanx = 0
	meany = 0
	cx = 0
	cy = 0

	iHalX = resX/2
	iHalY = resY/2
	iZmX = 1.02
	iZmY = 1.02

	starPos = nil; starPos = {}
	starPos[1] = {}; starPos[1] = {resX-100*UnX, 30*UnY}
	starPos[2] = {}; starPos[2] = {resX-160*UnX, 30*UnY}
	starPos[3] = {}; starPos[3] = {resX-220*UnX, 30*UnY}
	starPos[4] = {}; starPos[4] = {resX-280*UnX, 30*UnY}
	starPos[5] = {}; starPos[5] = {resX-340*UnX, 30*UnY}
	starPos[6] = {}; starPos[6] = {resX-400*UnX, 30*UnY}

	tx = (resX  * 0.5) - (spriteGetWidth(sprCredits) * 0.5)
	ty = 980*UnY
	tx2 = (resX  * 0.5) + (spriteGetWidth(sprCredits) * 0.5) +10

	sx = 40*UnX
	sy = 20*UnY
	bulletSprtX = 40*UnX
	bulletSprtY = 940*UnY
	bulletSprtY2 = 880*UnY
	shotX = 580*UnX
	shotY = 300*UnY

	cursoroffsetx = 50*UnX
	cursoroffsety = 47*UnY


-- xratio and yratio declaration --
if (ratioGetX ~= nil or ratioGetY ~= nil) then
	debugPrint("Singe version compatible with ratio adjustment.")
	ratiox = ratioGetX()
	ratioy = ratioGetY()
	if (ratiox <= 1 ) then ratiox = 1 end
	if (ratioy <= 1 ) then ratioy = 1 end
else
	debugPrint("Singe version not compatible with ratio adjustment.  Using standard 1:1 values")
	ratiox = 1
	ratioy = 1
end
ratioxOffset = ( ratiox - 1 ) * (resX/2)
ratioyOffset = ( ratioy - 1 ) * (resY/2)
-- -- -- -- -- -- -- -- -- -- -- -- 


	sprCursor = nil

	if (dip_Crosshair == 1) then

		sprCursor  = spriteLoad(MYDIR .. "crosshaira.png")
		
	elseif (dip_Crosshair == 2) then

		sprCursor  = spriteLoad(MYDIR .. "crosshairb.png")
		
	elseif (dip_Crosshair == 3) then

		sprCursor  = spriteLoad(MYDIR .. "crosshairc.png")

	elseif (dip_Crosshair == 4) then

		sprCursor  = spriteLoad(MYDIR .. "crosshaird.png")

	elseif (dip_Crosshair == 5) then

		sprCursor  = spriteLoad(MYDIR .. "crosshaire.png")
		cursoroffsetx = cursoroffsetx-3
		cursoroffsety = cursoroffsety

	end

	fontScore14 = fontLoad(MYDIR .. "score.ttf", 14)
	fontScore = fontLoad(MYDIR .. "score.ttf", 42*UnY)
	fontDebug = fontLoad(MYDIR .. "gambler.ttf", 24*UnY)
	fontOldWest = fontLoad(MYDIR .. "gambler.ttf", 72*UnY)
	fontOldWestBig = fontLoad(MYDIR .. "gambler.ttf", 144*UnY)


function ResHMx(thisMuch)

	local r = (resX * thisMuch) / 360
	
	thisMuch = math.floor(iHalX+(r-iHalX)*iZmX) 

	return thisMuch
	
end


function ResHMy(thatMuch)

	local r = (resY * thatMuch) / 240

	thatMuch = math.floor(iHalY+(r-iHalY )*iZmY)

	return thatMuch

end

function ResHMx2(thisMuch)

	local r = (resX * thisMuch) / 360
	
	thisMuch = math.floor(r) 

	return thisMuch
	
end


function ResHMy2(thatMuch)

	local r = (resY * thatMuch) / 240

	thatMuch = math.floor(r)

	return thatMuch

end


function bullseyeHit(thisFrame)

	local k = 0
	local f1 = 0
	local x1 = 0
	local x2 = 0
	local y1 = 0
	local y2 = 0
	local bFound = false
	local bResult = false

	bResult = false

	if bNoMoreBonuses then return false end

	for k=1,hitmapTotal do

		if (hitmap[k][hitmapFrame] == thisFrame) then

			f1 = hitmap[k][hitmapBonus]

			if (f1 ~= 0) then

				bFound = true

			end
			break
		end

	end

	if bFound then

		x1 = ResHMx(powerup[f1][bbx1])
		y1 = ResHMy(powerup[f1][bby1])
		x2 = ResHMx(powerup[f1][bbx2])
		y2 = ResHMy(powerup[f1][bby2])

		if (mousex >= x1 and mousex <= x2) and (mousey >= y1 and mousey <= y2) then	-- Skull hit!


			playMe(sndTing)
			iBullets = 13
			bResult = true

		end

	end
	
	return bResult

end

function civillianHit(thisFrame)

	local k = 0
	local f1 = 0
	local f2 = 0
	local x1 = 0
	local x2 = 0
	local y1 = 0
	local y2 = 0
	local bResult = false
	local bFound = false

	bResult = false

	for k=1,hitmapTotal do

		if (hitmap[k][hitmapFrame] == thisFrame) then

			f1 = hitmap[k][hitmapCivStart]
			f2 = f1 + (hitmap[k][hitmapCivCount]-1)

			if f1 ~= 0 then

				bFound = true

			end

			break
		end

	end

	if bFound then

		for k=f1,f2 do

			x1 = ResHMx(civillian[k][bbx1])
			y1 = ResHMy(civillian[k][bby1])
			x2 = ResHMx(civillian[k][bbx2])
			y2 = ResHMy(civillian[k][bby2])

			if (mousex >= x1 and mousex <= x2) and (mousey >= y1 and mousey <= y2) then	-- Player hit!

				bResult = true
				break

			end

		end

	end

	return bResult

end

function doContinue()

	if (lvlState == lvlSetup) then


		if (iLives == 0) then

			bShowScore = false
			bShowCredits = true

		else

			bShowScore = true
			bShowCredits = false

		end

		bShowMouse = false
		discPause()
		discSearch(continueFrmStart)
		discPlay()
		p1START1 = false
		lvlState = lvlPlayClip



	elseif (lvlState == lvlPlayClip) then

		if (currentFrame == continueFrmEnd) then
			lvlState = lvlEnd

		else

			if (p1START1) then
				p1START1 = false
				if (iCredits > 0) then

					p1START1 = false
					iCredits = iCredits - 1
					lvlState = lvlSetup					-- Set state for said level
					iLives = dip_LivesPerCredit			-- Reset lives for new game
					iBullets = 6
					bShowMouse = true
					bShowCredits = false
					bShowScore = true
					iScore = 0
					curMazePos = 1
					meanx = 0
					meany = 0
					cx = 0
					cy = 0
					testShowdown(tempLevel)

				end

			elseif (bResetContinue) then

				bResetContinue = false
				discSkipToFrame(continueFrmStart)

			end

		end

	elseif (lvlState == lvlEnd) then

		lvlState = lvlSetup
		if newScore(iScore) == true then

			currentLevel = levelHighScore

		else

			currentLevel = levelGameOver

		end
		
	end

end

function doGameOver()

	if (lvlState == lvlSetup) then

		bShowCredits = true
		bShowScore = false
		discPause()
		discSearch(gameOverFrmStart)
		discPlay()

		lvlState = lvlPlayClip

	elseif (lvlState == lvlPlayClip) then

		if (currentFrame == gameOverFrmEnd) then
			lvlState = lvlEnd

		end

	elseif (lvlState == lvlEnd) then

		lvlState = lvlSetup
		currentLevel = lvlIntro
		
	end

end

function doHighScore()


	local k = 0

	if (lvlState == lvlSetup) then

		colorForeground(255, 0, 0)

		GetHighScoreArray()
		sName = ""
		bShowMouse = true
		bShowScore = false
		bShowCredits = false
		bHSMute = true
		bHSDone = false

		sprCursor = nil
		sprCursor  = spriteLoad(MYDIR .. "crosshaira.png")
		
		lvlFrameStart = offsetHighScore
		lvlFrameEnd = offsetHighScore + 1439

		discPause()
		discSearch(lvlFrameStart)
		discPlay()

		lvlState = lvlRunning


	elseif (lvlState == lvlRunning) then

		if (currentFrame == lvlFrameEnd) then

			if (sName == "") then

				doHighScoreGetName()

			end

			updateHS(sName, math.floor(iScore))
			writeConfig()
			bHSDone = true
			bShowMouse = false

			lvlState = levelHighScore
			discPause()
			discSearch(offsetIntro + 150)

		elseif (currentFrame <= offsetHighScore + 1370) then

			if (p1BUTTON3) then

				p1BUTTON3 = false
				k = letterScan()
				iBullets = 6

				if (k ~= LETTER_NONE) then

					if (k == HS_RUB) then

						letterSubtract()

					elseif (k == HS_END) then

						if (sName == "") then doHighScoreGetName() end

						updateHS(sName, math.floor(iScore))
						writeConfig()
						bHSDone = true
						bShowMouse = false

						discPause()
						discSearch(offsetHighScore + 1250)
						discPlay()
						soundPlay(sndGunshot)

					else

						letterAdd(k)
						soundPlay(sndGunshot)

					end

				end

			end

			if not bHSDone then drawName() end

		end

	elseif (lvlState == levelHighScore) then

		if (waitFor (9, false) == true) then

			discPause()
			discSearch(offsetIntro)
			discPlay()
			lvlState = lvlEnd

		else

			drawHStable()

		end

	elseif (lvlState == lvlEnd) then

		sprCursor = nil
		

		if (dip_Crosshair == 1) then

			sprCursor  = spriteLoad(MYDIR .. "crosshaira.png")
			
		elseif (dip_Crosshair == 2) then

			sprCursor  = spriteLoad(MYDIR .. "crosshairb.png")
			
		elseif (dip_Crosshair == 3) then

			sprCursor  = spriteLoad(MYDIR .. "crosshairc.png")
			
		elseif (dip_Crosshair == 4) then

			sprCursor  = spriteLoad(MYDIR .. "crosshaird.png")
			
		elseif (dip_Crosshair == 5) then

			sprCursor  = spriteLoad(MYDIR .. "crosshaire.png")
			
		end

		iScore = 0
		lvlState = lvlSetup
		bHSMute = false
		sNicks = nil
		currentLevel = levelGameOver
		bShowCredits = true

		
	end


end

function doHighScoreGetName()


		local sNicks = nil
		sNicks = {}; sNicks = {"KIM","ACE","DEX","BOR","DRK","BLU","RYC","JAS","DAF","KAY"}
		sName = sNicks[math.random(10)]

end

function doLivesLeft()

	if (lvlState == lvlSetup) then

		bShowMouse = false
		bReloadDisabled = true
		bShowScore = false
		bMute = true
		iBullets = 6

		waitFor(0,false,true)

		discPause()
		discSearch(offsetMenus + 438 + iLives)
		lvlState = lvlPlayClip


	elseif (lvlState == lvlPlayClip) then

		if (waitFor(3, false, false) == true) then

			lvlState = lvlEnd

		end

	elseif (lvlState == lvlEnd) then

		waitFor(0,false,true)
		bShowMouse = true
		bReloadDisabled = false
		bShowScore = true
		bMute = false
		lvlState = lvlSetup
		currentLevel = tempLevel

	end


end


function doIntro()

	if (lvlState == lvlSetup) then

		bMakeNoise = false
		bShowMouse = false
		bShowScore = false
		bShowCredits = true

		discPause()
		discSearch(offsetIntro)

		lvlState = lvlPlayClip
		discPlay()


	elseif (lvlState == lvlPlayClip) then	-- Play Mad Dog's main intro

		if (currentFrame == offsetIntro + 2016 or p1BUTTON3) then

			p1BUTTON3 = false
			discPause()
			discSearch(logoFrame)
			lvlState = lvlPlayPause

		end



	elseif (lvlState == lvlPlayPause) then	-- Play Singe Logo

		-- Show Game's logo

		if (waitFor (5, false) == true) then

			discPause()
			discSearch(offsetIntro2)
			discPlay()
			lvlState = lvlPlayClip2

		end

	elseif (lvlState == lvlPlayClip2) then	-- Play mayor's daughter clip

		if (currentFrame == offsetIntro2 + 750 or p1BUTTON3) then

			p1BUTTON3 = false
			discPause()

			--if (waitFor(1,false,false) == true) then

				discSearch(offsetlvlStart)
				discPlay()
				lvlState = lvlPlayClip3

			--end

		end

	elseif (lvlState == lvlPlayClip3) then  -- Play bit of start level with Prospector


		if (currentFrame == offsetlvlStart + 975 or p1BUTTON3) then

			p1BUTTON3 = false
			discPause()
			discSearch(offsetlvlSaloon + 558)
			discPlay()
			lvlState = lvlPlayClip4

		end

	elseif (lvlState == lvlPlayClip4) then  -- Play game credits

		if (currentFrame == offsetlvlSaloon + 985 or p1BUTTON3) then

			p1BUTTON3 = false
			discPause()
			discSearch(offsetIntro + 150)
			lvlState = lvlPlayClip5
			playMe (sndHorns)

		else

			drawCredits()

		end

	elseif (lvlState == lvlPlayClip5) then  -- Show High Score table

		if (waitFor (6, false) == true) then

			p1BUTTON3 = false
			discPause()
			discSearch(offsetHowToPlay+50)
			discPlay()
			lvlState = lvlPlayClip6

		else

			drawHStable()

		end

	elseif (lvlState == lvlPlayClip6) then	-- Show 'How to Play'


		if (currentFrame == offsetHowToPlay + 1125 or p1BUTTON3) then

			p1BUTTON3 = false
			discPause()
			discSearch(offsetIntro)
			discPlay()
			lvlState = lvlPlayClip

		end

	elseif (lvlState == lvlEnd) then

		-- No lvlEnd. Infinite loop until player insert credits or exits program.

	end

end

function doLevelBank()

if (lvlState == lvlSetup) then

		bShowMouse = true
		bMute = false
		bShowScore=true
		bLevelComplete = false
		bReloadDisabled = false
		bMakeNoise = true
		bNoMoreBonuses = false
		bLevelComplete = false
		setupLevel(levelBank)
		if iBullets < 6 then iBullets = 6 end
		
		singeRandomize()
		local t = math.random(2)

		if (t == 2) then

			iApproach = HIDEOUT_REAR
			lvlFrameEnd = offsetlvlBank + 2421

		else

			iApproach = HIDEOUT_FRONT
			lvlFrameEnd = offsetlvlBank + 2102

		end

		lvlState = lvlRunning
		if bBankFirstTime then

			lvlFrameStart = offsetlvlBank
			currentMove = 1

		else

			bBankFirstTime = false
			lvlFrameStart = offsetlvlBank + 468
			currentMove = 3

		end

		discPause()
		discSearch (lvlFrameStart)
		discPlay()

	elseif (lvlState == lvlPlayRest) then

		if (currentFrame == move[currentMove][endFrmRandom]) then

			if (currentMove == 9) then

				lvlState = lvlPlayAdviceSetup

			else

				currentMove = currentMove + 1
				lvlState = lvlPauseAction

				discPause()


			end


		else

			if (p1BUTTON3) then

				p1BUTTON3 = false

				if (iBullets > 0) then

					if (bullseyeHit((548)) == true) then

						bNoMoreBonuses = true

					end

				else

					playMe(sndEmpty)

				end

			end

		end

	elseif (lvlState == lvlPauseAction) then

		if (waitFor(3, false, false) == true) then

			waitFor(0,false,true)
			lvlState = lvlRunning
			discSearch(move[currentMove][frameShootStart])
			discPlay()

		else

			if (p1BUTTON3) then

				p1BUTTON3 = false

				if (iBullets > 0) then

					if (bullseyeHit(548) == true) then

						bNoMoreBonuses = true
					end

				elseif (civillianHit((currentFrame - offsetlvlBank)) == true) then
					
					iLives = iLives - 1

					if (currentMove <= 2) then

						getUndertakerClip(UNDERTKR_SHOTGUY)
					
					else
					
						getUndertakerClip(UNDERTKR_SHOTWOMAN)
					
					end
					lvlState = lvlUndertaker
					discPause()
					discSearch(undertkrFrmStart)
					discPlay()

				else

					playMe(sndGunshot)

				end

			end

		end

	elseif (lvlState == lvlPlayAdviceSetup) then

		discPause()

		if (iApproach == HIDEOUT_FRONT) then	-- show OPPOSITE clip to iApproach selection! This is to let video advice the wrong side to approach.

			discSearch(offsetlvlBank + 2102)
			lvlFrameEnd = offsetlvlBank + 2421

		else	-- HIDEOUT_FRONT

			discSearch(offsetlvlBank + 1749)
			lvlFrameEnd = offsetlvlBank + 2102

		end
		lvlState = lvlPlayAdvice
		discPlay()

	elseif (lvlState == lvlPlayAdvice) then

		if (currentFrame == lvlFrameEnd) then
			lvlState = lvlEnd
			bLevelComplete = true

		end

	elseif (lvlState == lvl2ndChance) then

		if (waitFor(iDelay, false, false) == true) then -- Death to player!

			shooterHit(currentFrame - thisOffset, move[currentMove][hitmapStart])
			discPause()
			discSearch(move[currentMove][frameDeathStart])
			discPlay()
			lvlState = lvlPlayDeath

		elseif (p1BUTTON3) then

			p1BUTTON3 = false

				if (iBullets > 0) then

					-- Baddie got hit?

					if (shooterHit((currentFrame - offsetlvlBank), move[currentMove][hitmapStart]) == true) then

						iScore = iScore + SCORE_BADGUY
						discPause()
						discSearch(move[currentMove][frameShootEnd]+1)
						drawScore()

						if (currentMove >= 3) and (currentMove <= 9) then

							lvlState = lvlPlayRest

						else

							if (currentMove == 2) then bBankFirstTime = false end
							currentMove = currentMove + 1
							lvlState = lvlRunning

						end

						discPlay()


					elseif (bullseyeHit((548)) == true) then

						bNoMoreBonuses = true

					elseif (civillianHit((currentFrame - offsetlvlBank)) == true) then

						iLives = iLives - 1

						if (currentMove <= 2) then
							getUndertakerClip(UNDERTKR_SHOTGUY)
						else
							getUndertakerClip(UNDERTKR_SHOTWOMAN)
						end
						lvlState = lvlUndertaker
						discPause()
						discSearch(undertkrFrmStart)
						discPlay()


					else

						playMe(sndGunshot)

					end

				else

					playMe(sndEmpty)

				end



		end

	elseif (lvlState == lvlRunning) then

		if (currentFrame == lvlFrameEnd) then

			lvlState = lvlEnd
			bLevelComplete = true

		elseif (currentFrame == offsetlvlBank + 530) then

			currentMove = 3
			lvlState = lvlRunning
			discSearch(move[currentMove][frameShootStart])
			discPlay()

		elseif (currentMove <= totalMoves) then

			if (currentFrame == move[currentMove][frameShootEnd]) then

				if (move[currentMove][frameShootStart] == (offsetlvlBank + 970)) then	-- innocent move, no death for this one. let player continue.

					discPause()
					discSearch(offsetlvlBank + 1021)
					move[currentMove][endFrmRandom] = offsetlvlBank + 1069
					drawScore()
					lvlState = lvlPlayRest
					discPlay()

				else

					lvlState = lvl2ndChance
					waitFor(0,false,true)	--Reset timer
					discPause()

				end

			elseif (currentFrame >= move[currentMove][frameShootStart] and currentFrame < move[currentMove][frameShootEnd]) then

				-- Is player firing gun?

				if (p1BUTTON3) then

					p1BUTTON3 = false

					if (iBullets > 0) then

						-- Baddie got hit?

						if (shooterHit((currentFrame - offsetlvlBank), move[currentMove][hitmapStart]) == true) then

							iScore = iScore + SCORE_BADGUY
							discPause()
							discSearch(move[currentMove][frameShootEnd]+1)
							drawScore()

							if (currentMove >= 3) and (currentMove <= 9) then

								lvlState = lvlPlayRest

							else

								if (currentMove == 2) then bBankFirstTime = false end
								currentMove = currentMove + 1

							end
							discPlay()


						elseif (bullseyeHit((548)) == true) then

							bNoMoreBonuses = true

						elseif (civillianHit((currentFrame - offsetlvlBank)) == true) then

							iLives = iLives - 1
							if (currentMove <= 2) then
								getUndertakerClip(UNDERTKR_SHOTGUY)
							else
								getUndertakerClip(UNDERTKR_SHOTWOMAN)
							end
							lvlState = lvlUndertaker
							discPause()
							discSearch(undertkrFrmStart)
							discPlay()


						else

							playMe(sndGunshot)

						end

					else

						playMe(sndEmpty)

					end

				end

			else

				if (currentFrame >= (offsetlvlBank + 530) and currentFrame <= (offsetlvlBank + 1270)) then

					if (p1BUTTON3) then

						p1BUTTON3 = false

						if (iBullets > 0) then

							if (bullseyeHit(548) == true) then

								bNoMoreBonuses = true
							end

						else

							playMe(sndGunshot)

						end

					end

				elseif (civillianHit((currentFrame - offsetlvlBank)) == true) then

					if (p1BUTTON3) then

						p1BUTTON3 = false
						iLives = iLives - 1
						getUndertakerClip(UNDERTKR_NOGENDER)
						lvlState = lvlUndertaker
						discPause()
						discSearch(undertkrFrmStart)
						discPlay()

					end

				end

			end

		end


	elseif (lvlState == lvlPlayDeath) then

		shotFrame = move[currentMove][frameDeathStart]
		if currentFrame - shotFrame > 3 then 

			cx = meanx - 252*UnX
			cy = meany - 240*UnY
			spriteDraw(cx, cy, sprShot) 

		end

		if (currentFrame == move[currentMove][frameDeathEnd]) then

			iLives = iLives - 1
			getUndertakerClip(UNDERTKR_NORMAL)
			lvlState = lvlUndertaker
			discPause()
			discSearch(undertkrFrmStart)
			discPlay()

		end

	elseif (lvlState == lvlUndertaker) then

		if (currentFrame == undertkrFrmEnd) then

			lvlState = lvlEnd

		elseif (p1BUTTON3) then

			p1BUTTON3 = false
			lvlState = lvlEnd

		end


	elseif (lvlState == lvlEnd) then

		lvlState = lvlSetup
		if (iLives == 0) then --Game Over

			tempLevel = levelTownSelect
			currentLevel = levelContinue

		elseif (iLives > 0 and dip_Undertaker == false and not bLevelComplete) then

			tempLevel = levelTownSelect
			currentLevel = levelLivesLeft

		else

			if (bLevelComplete) then
				stage[STAGE_BANK] = true
				currentLevel = levelTownSelect

			else
			
				testShowdown(levelTownSelect)	

			end

		end

	end

end

function doLevelCanyon()

	if (lvlState == lvlSetup) then

		bShowMouse = true
		bMute = false
		lvlState = lvlPauseAction
		currentMove = 1
		bShowScore=true
		bLevelComplete = false
		bReloadDisabled = false
		bMakeNoise = true
		bNoMoreBonuses = false
		if iBullets < 6 then iBullets = 6 end

		singeRandomize()
		local t = math.random(2)
		waitFor(0,false,true)	-- reset timer, just in case

		if t == 2 then

			bFlipCanyon = true

		else

			bFlipCanyon = false

		end

		setupLevel(levelCanyon)
		if (bFlipCanyon == true) then

			lvlFrameStart = 30543
			lvlFrameEnd = 30795


		else

			lvlFrameStart = 30907
			lvlFrameEnd = 31159


		end

		currentMove = 1

		discPause()
		discSearch (move[currentMove][endFrmRandom])
		--discPlay()

	elseif (lvlState == lvlPlayRest) then

		if (currentFrame == move[currentMove][endFrmRandom]) then

			currentMove = currentMove + 1

			if (currentMove <= totalMoves) then

				lvlState = lvlPauseAction
				discPause()

			else

				if (bFlipCanyon == true) then

					discSearch(30743)

				else
					discSearch(31106)

				end

				discPlay()
				lvlState = lvlPlayClip

			end

		end

	elseif (lvlState == lvlPlayClip) then

		if (currentFrame == lvlFrameEnd) then

			bLevelComplete = true
			lvlState = lvlEnd

		end

	elseif (lvlState == lvlPauseAction) then

		if (waitFor(3, false, false) == true) then

			waitFor(0,false,true)
			lvlState = lvlRunning
			discSearch(move[currentMove][frameShootStart])
			discPlay()

		end

	elseif (lvlState == lvl2ndChance) then

		if (waitFor(iDelay,false,false) == true) then

			shooterHit(currentFrame - thisOffset, move[currentMove][hitmapStart])
			discPause()
			discSearch(move[currentMove][frameDeathStart])
			discPlay()
			lvlState = lvlPlayDeath

		else

			if (p1BUTTON3) then

				p1BUTTON3 = false

				if (iBullets > 0) then

					-- Baddie got hit?

					if (shooterHit((currentFrame - offsetVTS10), move[currentMove][hitmapStart]) == true) then

						iScore = iScore + SCORE_BADGUY
						discPause()
						discSearch(move[currentMove][frameShootEnd]+1)
						drawScore()
						lvlState = lvlPlayRest
						bMakeNoise = true
						discPlay()

					else

						playMe(sndGunshot)

					end

				else

					playMe(sndEmpty)

				end

			end


		end

	elseif (lvlState == lvlRunning) then

		if (currentFrame == emptyPlateau and currentFrame >= move[currentMove][frameShootStart]) then

			discPause()
			waitFor(0,false,true)
			lvlState = lvlPauseAction

		elseif (currentMove <= totalMoves) then

			if (currentFrame == move[currentMove][frameShootEnd]) then

				discPause()
				lvlState = lvl2ndChance
				waitFor(0,false,true)

			elseif (currentFrame >= move[currentMove][frameShootStart] and currentFrame < move[currentMove][frameShootEnd]) then

				-- Is player firing gun?

				if (p1BUTTON3) then

					p1BUTTON3 = false

					if (iBullets > 0) then

						-- Baddie got hit?

						if (shooterHit((currentFrame - offsetVTS10), move[currentMove][hitmapStart]) == true) then

							iScore = iScore + SCORE_BADGUY
							discPause()
							discSearch(move[currentMove][frameShootEnd]+1)
							drawScore()
							lvlState = lvlPlayRest
							discPlay()

						else

							playMe(sndGunshot)

						end

					else

						playMe(sndEmpty)

					end

				end

			end

		end


	elseif (lvlState == lvlPlayDeath) then

		shotFrame = move[currentMove][frameDeathStart]
		if currentFrame - shotFrame > 3 then 

			cx = meanx - 252*UnX
			cy = meany - 240*UnY
			spriteDraw(cx, cy, sprShot) 

		end

		if (currentFrame == move[currentMove][frameDeathEnd]) then

			iLives = iLives - 1
			getUndertakerClip(UNDERTKR_NORMAL)
			lvlState = lvlUndertaker
			discPause()
			discSearch(undertkrFrmStart)
			discPlay()

		end

	elseif (lvlState == lvlUndertaker) then

		if (currentFrame == undertkrFrmEnd) then

			lvlState = lvlEnd

		elseif (p1BUTTON3) then

			p1BUTTON3 = false
			lvlState = lvlEnd

		end


	elseif (lvlState == lvlEnd) then


		lvlState = lvlSetup
		if (iLives == 0) then --Game Over

			tempLevel = currentLevel
			currentLevel = levelContinue

		elseif (iLives > 0 and dip_Undertaker == false and not bLevelComplete) then

			tempLevel = currentLevel
			currentLevel = levelLivesLeft

		else

			if (bLevelComplete) then
				stage[STAGE_CANYON] = true
			else
				
				curMazePos = 1
				testShowdown(levelMaze)
				
				
			end

		end

		
	end


end

function doLevelCliff()

	if (lvlState == lvlSetup) then

		bShowMouse = true
		bMute = false
		lvlState = lvlRunning
		currentMove = 1
		bShowScore=true
		bLevelComplete = false
		bReloadDisabled = false
		bMakeNoise = true
		bNoMoreBonuses = false
		if iBullets < 6 then iBullets = 6 end
		
		singeRandomize()
		local t = math.random(2)

		waitFor(0,false,true)	-- reset timer, just in case

		if t == 2 then


			bFlipCliff = true


		else

			bFlipCliff = false


		end

		setupLevel(levelCliff)
		if bFlipCliff then

			lvlFrameStart = 27752
			lvlFrameEnd = 28126

		else

			lvlFrameStart = 28416
			lvlFrameEnd = 28793

		end

		currentMove = 1

		discPause()
		discSearch (lvlFrameStart)
		discPlay()

	elseif (lvlState == lvlPlayClip) then

		if (currentFrame == lvlFrameEnd) then

			bLevelComplete = true
			lvlState = lvlEnd

		end

	elseif (lvlState == lvlPlayRest) then

		if (currentFrame == move[currentMove][endFrmRandom]) then

			currentMove = currentMove + 1

			if (currentMove <= totalMoves) then

				lvlState = lvlPauseAction

				discPause()

			else

				if bFlipCliff then

					discSkipToFrame(28102)

				else

					discSkipToFrame(28765)

				end

				lvlState = lvlPlayClip

			end

		end


	elseif (lvlState == lvlPauseAction) then

		if (waitFor(3, false, false) == true) then

			waitFor(0,false,true)
			lvlState = lvlRunning
			discSearch(move[currentMove][frameShootStart]-5)
			discPlay()
			lvlState = lvlRunning

		end

	elseif (lvlState == lvl2ndChance) then

		if (waitFor(iDelay,false,false) == true) then

			shooterHit(currentFrame - thisOffset, move[currentMove][hitmapStart])
			discPause()
			discSearch(move[currentMove][frameDeathStart])
			discPlay()
			lvlState = lvlPlayDeath

		else

			if (p1BUTTON3) then

				p1BUTTON3 = false

				if (iBullets > 0) then

					-- Baddie got hit?

					if (shooterHit((currentFrame - offsetVTS9 - 1), move[currentMove][hitmapStart]) == true) then

						iScore = iScore + SCORE_BADGUY
						waitFor(0,false,true)
						discPause()
						discSearch(move[currentMove][frameShootEnd]+1)
						drawScore()
						bMakeNoise = true
						discPlay()
						lvlState = lvlPlayRest
					else

						playMe(sndGunshot)

					end

				else

					playMe(sndEmpty)

				end

			end

		end

	elseif (lvlState == lvlRunning) then

		if (currentFrame == emptyPlateau and currentFrame >= move[currentMove][frameShootStart]) then

			discPause()
			lvlState = lvlPauseAction

		elseif (currentMove <= totalMoves) then

			if (currentFrame == move[currentMove][frameShootEnd]) then

				discPause()
				lvlState = lvl2ndChance
				waitFor(0,false,true)

			elseif (currentFrame >= move[currentMove][frameShootStart] and currentFrame < move[currentMove][frameShootEnd]) then

				-- Is player firing gun?

				if (p1BUTTON3) then

					p1BUTTON3 = false

					if (iBullets > 0) then

						-- Baddie got hit?

						if (shooterHit((currentFrame - offsetVTS9), move[currentMove][hitmapStart]) == true) then

							iScore = iScore + SCORE_BADGUY
							discPause()
							discSearch(move[currentMove][frameShootEnd]+1)
							drawScore()
							lvlState = lvlPlayRest
							discPlay()

						else

							playMe(sndGunshot)

						end

					else

						playMe(sndEmpty)

					end

				end

			end

		end


	elseif (lvlState == lvlPlayDeath) then

		shotFrame = move[currentMove][frameDeathStart]
		if currentFrame - shotFrame > 3 then 

			cx = meanx - 252*UnX
			cy = meany - 240*UnY
			spriteDraw(cx, cy, sprShot) 

		end

		if (currentFrame == move[currentMove][frameDeathEnd]) then

			iLives = iLives - 1
			getUndertakerClip(UNDERTKR_NORMAL)
			lvlState = lvlUndertaker
			discPause()
			discSearch(undertkrFrmStart)
			discPlay()

		end

	elseif (lvlState == lvlUndertaker) then

		if (currentFrame == undertkrFrmEnd) then

			lvlState = lvlEnd

		elseif (p1BUTTON3) then

			p1BUTTON3 = false
			lvlState = lvlEnd

		end


	elseif (lvlState == lvlEnd) then


		lvlState = lvlSetup
		if (iLives == 0) then --Game Over

			tempLevel = currentLevel
			currentLevel = levelContinue

		elseif (iLives > 0 and dip_Undertaker == false and not bLevelComplete) then

			tempLevel = currentLevel
			currentLevel = levelLivesLeft

		else

			if (bLevelComplete) then

				stage[STAGE_CLIFF] = true

			else
				
				curMazePos = 1
				testShowdown(levelMaze)		
								
			end

		end

	end


end

function doLevelCorral()

	if (lvlState == lvlSetup) then

		lvlFrameEnd = offsetlvlCorral + 1978

		bShowMouse = true
		bMute = false
		currentMove = 1
		bShowScore=true
		bLevelComplete = false
		bReloadDisabled = false
		bMakeNoise = true
		bNoMoreBonuses = false
		waitFor(0,false,true)
		setupLevel(levelCorral)
		if iBullets < 6 then iBullets = 6 end



		lvlState = lvlRunning
		if bCorralFirstTime then

			lvlFrameStart = offsetlvlCorral

		else

			lvlFrameStart = offsetlvlCorral + 338
			currentMove = 4

		end

		discPause()
		discSearch (lvlFrameStart)
		discPlay()

	elseif (lvlState == lvlPlayRest) then

		if (currentFrame == move[currentMove][endFrmRandom]) then

			currentMove = currentMove + 1
			lvlState = lvlPauseAction
			discPause()

		end

	elseif (lvlState == lvlPauseAction) then

		if (waitFor(3, false, false) == true) then

			waitFor(0,false,true)
			lvlState = lvlRunning
			discSearch(move[currentMove][frameShootStart])
			discPlay()

		else

			if (p1BUTTON3) then

				p1BUTTON3 = false

				if (iBullets > 0) then

					if (bullseyeHit(521) == true) then

						bNoMoreBonuses = true
					end

				else

					playMe(sndGunshot)

				end

			end



		end

	elseif (lvlState == lvl2ndChance) then

		if (waitFor(iDelay, false, false) == true) then

			shooterHit(currentFrame - thisOffset, move[currentMove][hitmapStart])
			discPause()
			discSearch(move[currentMove][frameDeathStart])
			discPlay()
			lvlState = lvlPlayDeath

		elseif (p1BUTTON3) then

			p1BUTTON3 = false

			if (iBullets > 0) then

				-- Baddie got hit?

				if (shooterHit((currentFrame - offsetlvlCorral), move[currentMove][hitmapStart]) == true) then

					iScore = iScore + SCORE_BADGUY
					discPause()
					discSearch(move[currentMove][frameShootEnd]+1)
					drawScore()

					if (currentMove >= 4) and (currentMove <= 9) then

						lvlState = lvlPlayRest

					else

						if (currentMove == 3) then bCorralFirstTime = false end
						currentMove = currentMove + 1
						lvlState = lvlRunning

					end

					discPlay()


				elseif (bullseyeHit((currentFrame - offsetlvlCorral)) == true) then

					bNoMoreBonuses = true

				elseif (civillianHit((currentFrame - offsetlvlCorral)) == true) then

					iLives = iLives - 1
					getUndertakerClip(UNDERTKR_NOGENDER)
					lvlState = lvlUndertaker
					discPause()
					discSearch(undertkrFrmStart)
					discPlay()


				else

					playMe(sndGunshot)

				end

			else

				playMe(sndEmpty)

			end

		end

	elseif (lvlState == lvlRunning) then

		if (currentFrame == lvlFrameEnd) then

			lvlState = lvlEnd
			bLevelComplete = true

		elseif (currentFrame == offsetlvlCorral + 404) then

			bCorralFirstTime = false
			currentMove = 4
			discPause()
			discSearch(move[currentMove][frameShootStart])
			discPlay()
			lvlState = lvlRunning

		elseif (currentMove <= totalMoves) then

			if (currentFrame == move[currentMove][frameShootEnd]) then

				lvlState = lvl2ndChance
				waitFor(iDelay, false, true)
				discPause()

			elseif (currentFrame >= move[currentMove][frameShootStart] and currentFrame < move[currentMove][frameShootEnd]) then

				-- Is player firing gun?

				if (p1BUTTON3) then

					p1BUTTON3 = false

					if (iBullets > 0) then

						-- Baddie got hit?

						if (shooterHit((currentFrame - offsetlvlCorral), move[currentMove][hitmapStart]) == true) then

							iScore = iScore + SCORE_BADGUY
							discPause()
							discSearch(move[currentMove][frameShootEnd]+1)
							drawScore()

							if (currentMove >= 4) and (currentMove <= 9) then

								lvlState = lvlPlayRest

							else

								if (currentMove == 3) then bCorralFirstTime = false end
								currentMove = currentMove + 1

							end

							discPlay()


						elseif (bullseyeHit((currentFrame - offsetlvlCorral)) == true) then

							bNoMoreBonuses = true

						elseif (civillianHit((currentFrame - offsetlvlCorral)) == true) then

							iLives = iLives - 1
							getUndertakerClip(UNDERTKR_NOGENDER)
							lvlState = lvlUndertaker
							discPause()
							discSearch(undertkrFrmStart)
							discPlay()


						else

							playMe(sndGunshot)

						end

					else

						playMe(sndEmpty)

					end

				end

			else

				if (currentFrame >= (offsetlvlCorral + 395) and currentFrame <= (offsetlvlCorral + 1484)) then

					if (p1BUTTON3) then

						p1BUTTON3 = false

						if (iBullets > 0) then

							if (bullseyeHit(521) == true) then

								bNoMoreBonuses = true
							end

						else

							playMe(sndGunshot)

						end

					end

				elseif (civillianHit((currentFrame - offsetlvlCorral)) == true) then
					if (p1BUTTON3) then

						p1BUTTON3 = false
						iLives = iLives - 1
						getUndertakerClip(UNDERTKR_NOGENDER)
						lvlState = lvlUndertaker
						discPause()
						discSearch(undertkrFrmStart)
						discPlay()

					end

				end

			end

		end


	elseif (lvlState == lvlPlayDeath) then

		shotFrame = move[currentMove][frameDeathStart]
		if currentFrame - shotFrame > 3 then 

			cx = meanx - 252*UnX
			cy = meany - 240*UnY
			spriteDraw(cx, cy, sprShot)

		end

		if (currentFrame == move[currentMove][frameDeathEnd]) then

			iLives = iLives - 1
			getUndertakerClip(UNDERTKR_NORMAL)
			lvlState = lvlUndertaker
			discPause()
			discSearch(undertkrFrmStart)
			discPlay()

		end

	elseif (lvlState == lvlUndertaker) then

		if (currentFrame == undertkrFrmEnd) then

			lvlState = lvlEnd

		elseif (p1BUTTON3) then

			p1BUTTON3 = false
			lvlState = lvlEnd

		end


	elseif (lvlState == lvlEnd) then

		lvlState = lvlSetup
		if (iLives == 0) then --Game Over

			tempLevel = levelTownSelect
			currentLevel = levelContinue

		elseif (iLives > 0 and dip_Undertaker == false and not bLevelComplete) then

			tempLevel = levelTownSelect
			currentLevel = levelLivesLeft


		else

			if (bLevelComplete) then

				stage[STAGE_CORRAL] = true
				currentLevel = levelTownSelect

			else

				testShowdown(levelTownSelect)

			end

		end
		
	end

end

function doLevelFuse()

	if (lvlState == lvlSetup) then

		lvlFrameStart = offsetVTS8
		lvlFrameEnd = offsetVTS8 + 926
		bShowMouse = true
		bMute = false
		bLevelComplete = false
		bMakeNoise = true
		bShowScore=true
		bReloadDisabled = false
		bFuse = true
		currentMove = 1
		setupLevel(levelFuse)

		if iBullets < 6 then iBullets = 6 end

		discPause()
		discSearch(lvlFrameStart)
		discPlay()

		lvlState = lvlRunning

	elseif (lvlState == lvlRunning) then

		if (currentFrame == lvlFrameEnd) then

			bLevelComplete = true
			bFuseNag = false

			local q = 0
			local r = 0
			q,r= math.modf(clockRnd()/3)

			if q == 0 then
				iWhatToHit = 1
			elseif q == 1 then
				iWhatToHit = 2
			else
				iWhatToHit = 3
			end

			lvlState = lvlEnd

		else

			if (currentMove <= totalMoves) then

				if (currentFrame > move[currentMove][frameShootEnd]) then

					discSearch(move[currentMove][frameDeathStart])
					discPlay()
					lvlState = lvlPlayDeath

				elseif (currentFrame >= move[currentMove][frameShootStart] and currentFrame <= move[currentMove][frameShootEnd]) then

					-- Is player firing gun?

					if (p1BUTTON3) then

						p1BUTTON3 = false

						if (iBullets > 0) then

							-- Baddie got hit?

							if (shooterHit((currentFrame - offsetVTS8), 1) == true) then

								iScore = iScore + SCORE_SIGN
								discPause()
								discSearch(move[currentMove][frameShootEnd]+1)

								drawScore()
								currentMove = currentMove + 1
								bFuse = false

								discPlay()

							elseif (mousex >= ResHMx(150) and mousex <= ResHMx(189)) and (mousey >= ResHMy(134) and mousey <= ResHMy(178)) then
								
								discSearch(offsetVTS8 + 1082)
								discPlay()
								lvlState = lvlPlayDeath
								bFuseNag = true


							elseif (civillianHit((currentFrame - offsetVTS8)) == true) then

								iLives = iLives - 1
								getUndertakerClip(UNDERTKR_GOODGUY)
								lvlState = lvlUndertaker
								discPause()
								discSearch(undertkrFrmStart)
								discPlay()

							else

								playMe(sndGunshot)

							end

						else

							playMe(sndEmpty)

						end

					end

				end

			end

		end

	elseif (lvlState == lvlUndertaker) then

		if (currentFrame == undertkrFrmEnd) then

			lvlState = lvlEnd

		elseif (p1BUTTON3) then

			p1BUTTON3 = false
			lvlState = lvlEnd

		end

	elseif (lvlState == lvlPlayDeath) then

		if (currentFrame == move[currentMove][frameDeathEnd]) then
			iLives = iLives - 1
		
			if bFuseNag then

				bFuseNag = false
				getUndertakerClip(UNDERTKR_NOGENDER)
				lvlState = lvlUndertaker
				discPause()
				discSearch(undertkrFrmStart)
				discPlay()
				lvlState = lvlUndertaker

			else

				lvlState = lvlEnd

			end

		end
	elseif (lvlState == lvlShowMineHint) then

		if (currentFrame == lvlFrameEnd) then

			lvlState = lvlEnd

		end

	elseif (lvlState == lvlEnd) then

		lvlState = lvlSetup
		if (iLives == 0) then --Game Over

			tempLevel = currentLevel
			currentLevel = levelContinue

		elseif (iLives > 0 and dip_Undertaker == false and not bLevelComplete) then

			tempLevel = currentLevel
			currentLevel = levelLivesLeft

		else

			if (bLevelComplete) then
				stage[STAGE_FUSE] = true
			end
			bFuse = false
			currentLevel = levelSignSelect

		end
		
	end

end

function doLevelHideout()

	if (lvlState == lvlSetup) then

		lvlFrameStart = offsetVTS11
		lvlFrameEnd = offsetVTS11 + 1470
		bShowMouse = true
		bMute = false
		lvlState = lvlRunning
		bShowScore=true
		bReloadDisabled = false
		bLevelComplete = false
		bNoMoreBonuses = false
		waitFor(0,false,true)
		currentMove = 1
		setupLevel(levelHideout)
		if iBullets < 6 then iBullets = 6 end
	
		discPause()
		discSearch (lvlFrameStart)
		discPlay()


	elseif (lvlState == lvl2ndChance) then

		if (waitFor(iDelay, false, false) == true) then

			shooterHit(currentFrame - thisOffset, move[currentMove][hitmapStart])
			discPause()
			discSearch(move[currentMove][frameDeathStart])
			discPlay()
			lvlState = lvlPlayDeath

		else

			if (p1BUTTON3) then

				p1BUTTON3 = false
				if (iBullets > 0) then

					-- Baddie got hit?

					if (shooterHit(currentFrame - offsetVTS11 - 1, move[currentMove][hitmapStart]) == true) then

						iScore = iScore + SCORE_BADGUY

						discPause()
						discSearch(move[currentMove][frameShootEnd]+1)
						waitFor(0,false,true)

						drawScore()
						currentMove = currentMove + 1

						discPlay()
						lvlState = lvlRunning

					elseif (bullseyeHit((currentFrame - offsetVTS11 - 1)) == true) then

						bNoMoreBonuses = true

					elseif (civillianHit((currentFrame - offsetVTS11 - 1)) == true) then

						iLives = iLives - 1
						waitFor(0,false,true)
						discSearch(move[currentMove][frameDeathStart])
						discPlay()
						lvlState = lvlPlayDeath

					else

						playMe(sndGunshot)

					end

				else

					playMe(sndEmpty)

				end

			end

		end

	elseif (lvlState == lvlRunning) then

		if (currentFrame == lvlFrameEnd) then

			bLevelComplete = true
			lvlState = lvlEnd

		else

			if (currentMove <= totalMoves) then

				if (currentFrame == move[currentMove][frameShootEnd]) then

					discPause()
					if (currentMove == 9) then

						discSearch(move[currentMove][frameShootEnd]+1)
						discPlay()
						currentMove = currentMove + 1
						bMakeNoise = true

					else

						lvlState = lvl2ndChance
						waitFor(0,false,true)

					end

				elseif (currentFrame >= move[currentMove][frameShootStart] and currentFrame < move[currentMove][frameShootEnd]) then

					-- Is player firing gun?

					if (p1BUTTON3) then

						p1BUTTON3 = false

						if (iBullets > 0) then

							-- Baddie got hit?

							if (shooterHit(currentFrame - offsetVTS11, move[currentMove][hitmapStart]) == true) then

								iScore = iScore + SCORE_BADGUY
								discPause()
								discSearch(move[currentMove][frameShootEnd]+1)

								drawScore()
								currentMove = currentMove + 1

								discPlay()

							elseif (bullseyeHit((currentFrame - offsetVTS11)) == true) then

								bNoMoreBonuses = true

							elseif (civillianHit((currentFrame - offsetVTS11)) == true) then


								iLives = iLives - 1

								discSearch(move[currentMove][frameDeathStart])
								discPlay()
								lvlState = lvlPlayDeath

							else

								playMe(sndGunshot)

							end

						else

							playMe(sndEmpty)

						end

					end

				else

					if (iBullets > 0 and p1BUTTON3) then

						p1BUTTON3 = false

						if (currentFrame >= (offsetVTS11 + 270) and currentFrame <= (offsetVTS11 + 460)) then
							if (bullseyeHit(350) == true) then

								bNoMoreBonuses = true

							end

						else

							if (bullseyeHit((currentFrame - offsetVTS11)) == true) then

								bNoMoreBonuses = true

							end
						end

					end

				end

			end

		end

	elseif (lvlState == lvlPlayDeath) then

		shotFrame = move[currentMove][frameDeathStart]
		if currentFrame - shotFrame > 3 then 

			cx = meanx - 252*UnX
			cy = meany - 240*UnY
			spriteDraw(cx, cy, sprShot) 

		end

		if (currentFrame == move[currentMove][frameDeathEnd]) then

			iLives = iLives - 1
			getUndertakerClip(UNDERTKR_NORMAL)
			lvlState = lvlUndertaker
			discPause()
			discSearch(undertkrFrmStart)
			discPlay()

		end

	elseif (lvlState == lvlUndertaker) then

		if (currentFrame == undertkrFrmEnd) then

			lvlState = lvlEnd

		elseif (p1BUTTON3) then

			p1BUTTON3 = false
			lvlState = lvlEnd

		end

	elseif (lvlState == lvlEnd) then

		lvlState = lvlSetup
		if (iLives == 0) then --Game Over

			tempLevel = currentLevel
			currentLevel = levelContinue

		elseif (iLives > 0 and dip_Undertaker == false and not bLevelComplete) then

			tempLevel = currentLevel
			currentLevel = levelLivesLeft

		else

			if (bLevelComplete) then
				stage[STAGE_HIDEOUT] = true
				currentLevel = levelHouse

			else

				testShowdown(levelHideout)

			end

		end

		
	end

end

function doLevelHouse()
	
	if (lvlState == lvlSetup) then

		lvlState = lvlPauseAction
		currentMove = 1
		bShowMouse = true
		bMute = false
		bShowScore=true
		bLevelComplete = false
		bReloadDisabled = false
		bMakeNoise = true
		bNoMoreBonuses = false
		setupLevel(levelHouse)
		waitFor(0,false,true)
		if iBullets < 6 then iBullets = 6 end
		
		lvlFrameStart = 35905
		lvlFrameEnd = 36660

		currentMove = 1

		discPause()
		discSearch (move[currentMove][endFrmRandom])
		--discPlay()

	elseif (lvlState == lvlPlayRest) then

		if (currentFrame == move[currentMove][endFrmRandom]) then

			currentMove = currentMove + 1

			if (currentMove <= totalMoves) then

				lvlState = lvlPauseAction

				discPause()

			else

				--discSearch(36660)
				--discPlay()
				bLevelComplete = true
				lvlState = lvlEnd

			end

		elseif (p1BUTTON3) then


			p1BUTTON3 = false
			if (bullseyeHit(4525) == true) then

				bNoMoreBonuses = true

			end

		end

	elseif (lvlState == lvlPlayClip) then

		if (currentFrame == lvlFrameEnd) then

			bLevelComplete = true
			lvlState = lvlEnd

		elseif (p1BUTTON3) then


			p1BUTTON3 = false
			if (bullseyeHit(4525) == true) then

				bNoMoreBonuses = true

			end

		end

	elseif (lvlState == lvlPauseAction) then

		if (waitFor(3, false, false) == true) then

			waitFor(0,false,true)
			lvlState = lvlRunning
			discSearch(move[currentMove][frameShootStart])
			discPlay()

		elseif (p1BUTTON3) then

			p1BUTTON3 = false
			if (bullseyeHit(4525) == true) then

				bNoMoreBonuses = true

			end

		end

	elseif (lvlState == lvl2ndChance) then


		if waitFor(iDelay, false, false) == true then

			shooterHit(currentFrame - thisOffset, move[currentMove][hitmapStart])
			discPause()
			discSearch(move[currentMove][frameDeathStart])
			discPlay()
			lvlState = lvlPlayDeath

		else

			if (p1BUTTON3) then

				p1BUTTON3 = false

				if (iBullets > 0) then

					-- Baddie got hit?

					if (shooterHit((currentFrame - offsetVTS11 - 1), move[currentMove][hitmapStart]) == true) then

						iScore = iScore + SCORE_BADGUY
						waitFor(0,false,true)
						discPause()
						discSearch(move[currentMove][frameShootEnd]+1)
						drawScore()
						lvlState = lvlPlayRest

						discPlay()

					elseif (p1BUTTON3) then

						p1BUTTON3 = false
						if (bullseyeHit(move[currentMove][frameShootEnd]+1) == true) then

							bNoMoreBonuses = true

						end

					else

						playMe(sndGunshot)

					end

				else

					playMe(sndEmpty)

				end

			end

		end

	elseif (lvlState == lvlRunning) then

		if (currentMove <= totalMoves) then

			if (currentFrame == move[currentMove][frameShootEnd]) then

				lvlState = lvl2ndChance
				waitFor(0,false,true)
				discPause()

			elseif (currentFrame >= move[currentMove][frameShootStart] and currentFrame < move[currentMove][frameShootEnd]) then

				-- Is player firing gun?

				if (p1BUTTON3) then

					p1BUTTON3 = false

					if (iBullets > 0) then

						-- Baddie got hit?

						if (shooterHit((currentFrame - offsetVTS11), move[currentMove][hitmapStart]) == true) then

							iScore = iScore + SCORE_BADGUY
							discPause()
							discSearch(move[currentMove][frameShootEnd]+1)
							drawScore()

							lvlState = lvlPlayRest
							discPlay()

						elseif (p1BUTTON3) then

							p1BUTTON3 = false
							if (bullseyeHit(4525) == true) then

								bNoMoreBonuses = true

							end

						else

							playMe(sndGunshot)

						end

					else

						playMe(sndEmpty)

					end

				end

			end

		end

	elseif (lvlState == lvlPlayDeath) then

		shotFrame = move[currentMove][frameDeathStart]
		if currentFrame - shotFrame > 3 then 

			cx = meanx - 252*UnX
			cy = meany - 240*UnY
			spriteDraw(cx, cy, sprShot)

		end

		if (currentFrame == move[currentMove][frameDeathEnd]) then

			iLives = iLives - 1
			getUndertakerClip(UNDERTKR_NORMAL)
			lvlState = lvlUndertaker
			discPause()
			discSearch(undertkrFrmStart)
			discPlay()

		end

	elseif (lvlState == lvlUndertaker) then

		if (currentFrame == undertkrFrmEnd) then

			lvlState = lvlEnd

		elseif (p1BUTTON3) then

			p1BUTTON3 = false
			lvlState = lvlEnd

		end


	elseif (lvlState == lvlEnd) then


		lvlState = lvlSetup
		if (iLives == 0) then --Game Over

			tempLevel = currentLevel
			currentLevel = levelContinue

		elseif (iLives > 0 and dip_Undertaker == false and not bLevelComplete) then

			tempLevel = currentLevel
			currentLevel = levelLivesLeft

		else

			lvlState = lvlSetup
			if (bLevelComplete) then
				
				stage[STAGE_HOUSE] = true
				currentLevel = levelMaddog

			else

				currentLevel = levelHouse
				
			end

			
					    
		end

		
	end

end

function doLevelMaddog()

	if (lvlState == lvlSetup) then

		lvlFrameStart = offsetVTS11 + 1470
		lvlFrameEnd = offsetVTS11 + 3400
		bShowMouse = true
		bMute = false
		lvlState = lvlRunning
		bShowScore=true
		bReloadDisabled = true
		iBullets = 0
		bLevelComplete = false

		currentMove = 1
		setupLevel(levelMaddog)
		waitFor(0,false,true)
		discPause()
		discSearch (lvlFrameStart)
		discPlay()

	elseif (lvlState == lvl2ndChance) then

		if (waitFor(iDelay,false,false) == true) then
			shooterHit(currentFrame - thisOffset, move[currentMove][hitmapStart])
			discSearch(move[currentMove][frameDeathStart])
			discPlay()
			lvlState = lvlPlayDeath

		else

			if (p1BUTTON3) then

				p1BUTTON3 = false

				if (iBullets > 0) then

					-- Baddie got hit?

					if (shooterHit(currentFrame - offsetVTS11 - 1, 1) == true) then

						if (currentMove == 1) then
							iScore = iScore + SCORE_BADGUY

						else
							iScore = iScore + SCORE_MADDOG

						end

						discPause()
						discSearch(move[currentMove][frameShootEnd]+1)
						drawScore()
						currentMove = currentMove + 1

						bMakeNoise = true
						discPlay()
						lvlState = lvlRunning

					else

						playMe(sndGunshot)

					end

				else

					playMe(sndEmpty)

				end

			end

		end

	elseif (lvlState == lvlRunning) then

		if (currentFrame == lvlFrameEnd) then

			bLevelComplete = true
			lvlState = lvlEnd


		elseif (currentFrame >= offsetVTS11 and currentFrame <= offsetVTS11 + 1770) then	-- Skip prospector

			if (p1BUTTON3) then

				p1BUTTON3 = false
				discPause()
				discSearch(offsetVTS11 + 1771)
				discPlay()

			end

		elseif (currentFrame == offsetVTS11 + 2378) then  -- Show finale

			bReloadDisabled = false
			bShowScore = true
			bShowMouse = false
			bGunMute = true
			bPlaySound = false
			stage[STAGE_MADDOG] = true


		else

			if (currentMove <= totalMoves) then

				if (currentFrame == move[currentMove][frameShootEnd]) then

					discPause()
					lvlState = lvl2ndChance
					waitFor(0,false,true)

				elseif (currentFrame == (move[currentMove][frameShootStart] - 5)) then
					bReloadDisabled = false

				elseif (currentFrame >= move[currentMove][frameShootStart] and currentFrame < move[currentMove][frameShootEnd]) then

					if (p1BUTTON3) then

						p1BUTTON3 = false

						if (iBullets > 0) then

							-- Baddie got hit?

							if (shooterHit(currentFrame - offsetVTS11, 1) == true) then

								if (currentMove == 1) then
									iScore = iScore + SCORE_BADGUY

								else
									iScore = iScore + SCORE_MADDOG

								end

								discPause()
								discSearch(move[currentMove][frameShootEnd]+1)

								drawScore()
								currentMove = currentMove + 1

								discPlay()

							else

								playMe(sndGunshot)

							end

						else

							playMe(sndEmpty)

						end

					end


				end

			end

		end

	elseif (lvlState == lvlPlayDeath) then

		shotFrame = move[currentMove][frameDeathStart]
		if currentFrame - shotFrame > 3 then 

			cx = meanx - 252*UnX
			cy = meany - 240*UnY
			spriteDraw(cx, cy, sprShot) 

		end

		if (currentFrame == move[currentMove][frameDeathEnd]) then

			bShowMouse = false
			iLives = iLives - 1
			getUndertakerClip(UNDERTKR_NORMAL)
			lvlState = lvlUndertaker
			discPause()
			discSearch(undertkrFrmStart)
			discPlay()

		end

	elseif (lvlState == lvlUndertaker) then

		if (currentFrame == undertkrFrmEnd) then

			lvlState = lvlEnd

		elseif (p1BUTTON3) then

			p1BUTTON3 = false
			lvlState = lvlEnd

		end

	elseif (lvlState == lvlEnd) then

		lvlState = lvlSetup
		if (iLives == 0) then --Game Over

			tempLevel = currentLevel
			currentLevel = levelContinue

		elseif (iLives > 0 and dip_Undertaker == false and not bLevelComplete) then

			tempLevel = currentLevel
			currentLevel = levelLivesLeft

		else

			if (bLevelComplete) then

				if (newScore(iScore) == false) then

					currentLevel = levelGameOver

				else

					currentLevel = levelHighScore

				end

			end


		end
		bPlaySound = true
		
	end

end

function doLevelMaze()

	if (mazeState == lvlSetup) then

		if iBullets < 6 then iBullets = 6 end

		setupMazeArray()

		bMazeComplete = false
		curMazePos = 1
		mazeState = lvlRunning

	elseif (mazeState == lvlRunning) then

		if (maze[curMazePos][mazeType] > 0) then	-- time to do a sign

			doMazeSign(maze[curMazePos][signType], maze[curMazePos][signDirection])

		elseif (maze[curMazePos][mazeLevel] == DOPOND) then

			if (stage[STAGE_POND]) then

				curMazePos = curMazePos + 1

			else

				doLevelPond()

			end

		elseif (maze[curMazePos][mazeLevel] == DOPLATEAU) then


			if (stage[STAGE_PLATEAU]) then

				curMazePos = curMazePos + 1

			else

				doLevelPlateau()

			end

		elseif (maze[curMazePos][mazeLevel] == DOCLIFF) then

			if (stage[STAGE_CLIFF]) then

				curMazePos = curMazePos + 1

			else

				doLevelCliff()

			end

		elseif (maze[curMazePos][mazeLevel] == DOCANYON) then

			if (stage[STAGE_CANYON]) then

				curMazePos = curMazePos + 1

			else

				doLevelCanyon()

			end

		end

		if (curMazePos > mazeSize) then

			bMazeComplete = true
			mazeState = lvlEnd

		end


	elseif (mazeState == lvlEnd) then


		if bMazeComplete then

			lvlState = lvlSetup
			currentLevel = levelHideout

		else

			lvlState = lvlSetup
			currentLevel = levelSignSelect

		end

		
	end


end

function doLevelMine()

	if (lvlState == lvlSetup) then

		lvlFrameStart = offsetVTS8
		lvlFrameEnd = offsetVTS8 + 2122
		GetMineArray()
		bShowMouse = true
		bMute = false
		bLevelComplete = false
		bMakeNoise = true
		bShowScore=true
		bReloadDisabled = false
		currentMove = 1
		bNoMoreBonuses = false
		bLanternHit = false
		bItemHit = false
		if iBullets < 6 then iBullets = 6 end

		if (iWhatToHit == MINE_SIGN) then

			lvlFrameStart = offsetVTS8 + 1388
			lvlFrameEnd = offsetVTS8 + 1610

		elseif (iWhatToHit == MINE_PAN) then

			lvlFrameStart = offsetVTS8 + 1612
			lvlFrameEnd = offsetVTS8 + 1826

		elseif (iWhatToHit == MINE_PITCHFORK) then

			lvlFrameStart = offsetVTS8 + 1828
			lvlFrameEnd = offsetVTS8 + 2036

		end

		discPause()
		discSearch(lvlFrameStart)
		discPlay()

		lvlState = lvlPlayClip

	elseif (lvlState == lvlPlayClip) then

		if (currentFrame == lvlFrameEnd) then

			discPause()
			lvlFrameEnd = lvlFrameStart + 25
			discSearch(lvlFrameEnd)
			waitFor(0,false,true)
			lvlState = lvlRunning

		end

	elseif (lvlState == lvlRunning) then

		if (currentFrame == lvlFrameEnd) then
			
			discPause()

			if (waitFor(10, false, false) == true) then

				discSearch(offsetVTS8 + 2123)
				discPlay()
				iLives = iLives - 1
				lvlState = lvlPlayDeath

			else
				
				if (p1BUTTON3) then

					p1BUTTON3 = false

					if (mineHit(MINE_LANTERN) == true) then

						bLanternHit = true
						playMe(sndTing)

					elseif (mineHit(iWhatToHit) == true) then

						bItemHit = true
						playMe(sndTing)

					elseif mineHit(MINE_SKULL) == true then

						if (bNoMoreBonuses == false) then

							noMoreBonuses = true
							iBullets = 13
							playMe(sndTing)

						end

					end

				end

				if (bItemHit and bLanternHit) then

					waitFor(0,false,true)	-- turn off timer
					bLevelComplete = true
					lvlState = lvlEnd

				end

			end

		end

	elseif (lvlState == lvlPlayDeath) then

		if (currentFrame == offsetVTS8 + 2352) then

			lvlState = lvlEnd

		end

	elseif (lvlState == lvlEnd) then

		if (iLives == 0) then --Game Over

			lvlState = lvlSetup
			tempLevel = currentLevel
			currentLevel = levelContinue

		elseif (iLives > 0 and dip_Undertaker == false and not bLevelComplete) then

			lvlState = lvlSetup
			tempLevel = currentLevel
			currentLevel = levelLivesLeft

		else
						
			lvlState = lvlSetup
			if (bLevelComplete) then
				
				discPause()
				if (stage[STAGE_FUSE] == false) then stage[STAGE_FUSE] = true end
				stage[STAGE_MINE] = true
				currentLevel = levelBottle

			else
			
				currentLevel = levelSignSelect
			
			end

		end
		discPlay()
		
	end


end

function doLevelPlateau()

	if (lvlState == lvlSetup) then

		bShowMouse = true
		bMute = false
		lvlState = lvlRunning
		currentMove = 1
		bShowScore=true
		bLevelComplete = false
		bReloadDisabled = false
		bMakeNoise = true
		bNoMoreBonuses = false
		if iBullets < 6 then iBullets = 6 end
		
		waitFor(0,false,true)	-- reset timer, just in case
		singeRandomize()

		local t = math.random(2)

		if t == 2 then

			bFlipPlateau = true

		else

			bFlipPlateau = false

		end

		setupLevel(levelPlateau)

		if bFlipPlateau then

			lvlFrameStart = offsetVTS10
			lvlFrameEnd = offsetVTS10 + 230

		else

			lvlFrameStart = offsetVTS10 + 339
			lvlFrameEnd = offsetVTS10 + 571
			
		end

		currentMove = 1

		discPause()
		discSearch (move[currentMove][frameShootStart])
		discPlay()

	elseif (lvlState == lvlPlayRest) then

		if (currentFrame == move[currentMove][endFrmRandom]) then

			currentMove = currentMove + 1

			if (currentMove <= totalMoves) then

				lvlState = lvlPauseAction
				discPause()

			else

				if bFlipPlateau then

					discSearch(offsetVTS10 + 206)

				else
					discSearch(offsetVTS10 + 547)

				end

				discPlay()
				lvlState = lvlPlayClip

			end

		end

	elseif (lvlState == lvlPlayClip) then

		if (currentFrame == lvlFrameEnd) then

			bLevelComplete = true
			lvlState = lvlEnd

		end

	elseif (lvlState == lvlPauseAction) then

		if (waitFor(3, false, false) == true) then

			waitFor(0,false,true)
			lvlState = lvlRunning
			discSearch(move[currentMove][frameShootStart])
			discPlay()

		end


	elseif (lvlState == lvl2ndChance) then

		if (waitFor(iDelay, false, false) == true) then

			shooterHit(currentFrame - thisOffset, move[currentMove][hitmapStart])
			discSearch(move[currentMove][frameDeathStart])
			discPlay()
			lvlState = lvlPlayDeath

		else

			if (p1BUTTON3) then

				p1BUTTON3 = false

				if (iBullets > 0) then

					-- Baddie got hit?

					if (shooterHit((currentFrame - offsetVTS10), move[currentMove][hitmapStart]) == true) then

						iScore = iScore + SCORE_BADGUY
						waitFor(0,false,true)
						discPause()
						discSearch(move[currentMove][frameShootEnd]+1)

						drawScore()

						lvlState = lvlPlayRest


						discPlay()

					else

						playMe(sndGunshot)

					end

				else

					playMe(sndEmpty)

				end

			end

		end

	elseif (lvlState == lvlRunning) then

		if (currentFrame == emptyPlateau and currentFrame >= move[currentMove][frameShootStart]) then

			discPause()
			lvlState = lvlPauseAction

		elseif (currentMove <= totalMoves) then

			if (currentFrame == move[currentMove][frameShootEnd]) then

				discPause()
				lvlState = lvl2ndChance
				waitFor(0,false,true)


			elseif (currentFrame >= move[currentMove][frameShootStart] and currentFrame < move[currentMove][frameShootEnd]) then

				-- Is player firing gun?

				if (p1BUTTON3) then

					p1BUTTON3 = false

					if (iBullets > 0) then

						-- Baddie got hit?

						if (shooterHit((currentFrame - offsetVTS10), move[currentMove][hitmapStart]) == true) then

							iScore = iScore + SCORE_BADGUY
							discPause()
							discSearch(move[currentMove][frameShootEnd]+1)
							drawScore()
							lvlState = lvlPlayRest
							discPlay()

						else

							playMe(sndGunshot)

						end

					else

						playMe(sndEmpty)

					end

				end

			end

		end


	elseif (lvlState == lvlPlayDeath) then


		shotFrame = move[currentMove][frameDeathStart]
		if currentFrame - shotFrame > 3 then 

			cx = meanx - 252*UnX
			cy = meany - 240*UnY
			spriteDraw(cx, cy, sprShot)

		end

		if (currentFrame == move[currentMove][frameDeathEnd]) then

			iLives = iLives - 1
			getUndertakerClip(UNDERTKR_NORMAL)
			lvlState = lvlUndertaker
			discPause()
			discSearch(undertkrFrmStart)
			discPlay()

		end

	elseif (lvlState == lvlUndertaker) then

		if (currentFrame == undertkrFrmEnd) then

			lvlState = lvlEnd

		elseif (p1BUTTON3) then

			p1BUTTON3 = false
			lvlState = lvlEnd

		end


	elseif (lvlState == lvlEnd) then


		lvlState = lvlSetup
		if (iLives == 0) then --Game Over

			tempLevel = currentLevel
			currentLevel = levelContinue

		elseif (iLives > 0 and dip_Undertaker == false and not bLevelComplete) then

			tempLevel = currentLevel
			currentLevel = levelLivesLeft

		else

			if (bLevelComplete) then
				stage[STAGE_PLATEAU] = true

			else

				curMazePos = 1
				testShowdown(levelMaze)
				
			end

		end

		
	end



end

function doLevelPond()

	if (lvlState == lvlSetup) then

		lvlFrameStart = offsetVTS10 + 677
		lvlFrameEnd = offsetVTS10 + 1105
		bShowMouse = true
		bMute = false
		bLevelComplete = false
		bMakeNoise = true
		bShowScore=true
		bReloadDisabled = false
		currentMove = 1
		setupLevel(levelPond)
		waitFor(0,false,true)
		discPause()
		discSearch(lvlFrameStart)
		discPlay()
		waitFor(0,false,true)	-- reset timer, just in case
		if iBullets < 6 then iBullets = 6 end
		lvlState = lvlRunning
		
	elseif (lvlState == lvl2ndChance) then

		if (waitFor(iDelay, false, false) == true) then

			discPause()
			discSearch(move[currentMove][frameDeathStart])
			discPlay()
			lvlState = lvlPlayDeath

		else

			if (p1BUTTON3) then

				p1BUTTON3 = false

				if (iBullets > 0) then

					-- Baddie got hit?

					if (shooterHit((currentFrame - offsetVTS10 - 1), 1) == true) then

						iScore = iScore + SCORE_BADGUY
						waitFor(0,false,true)
						discPause()
						discSearch(move[currentMove][frameShootEnd]+1)
						drawScore()
						currentMove = currentMove + 1
						bMakeNoise = true
						discPlay()
						lvlState = lvlRunning

					else

						playMe(sndGunshot)

					end

				else

					playMe(sndEmpty)

				end

			end

		end


	elseif (lvlState == lvlRunning) then

		if (currentFrame == lvlFrameEnd) then

			bLevelComplete = true
			lvlState = lvlEnd

		elseif (currentFrame >= (offsetVTS10 + 820) and currentFrame <= lvlFrameEnd) then

			if (p1BUTTON3) then

				p1BUTTON3 = false
				bLevelComplete = true
				lvlState = lvlEnd
			end

		else

			if (currentMove <= totalMoves) then

				if (currentFrame == move[currentMove][frameShootEnd]) then

					lvlState = lvl2ndChance
					waitFor(0,false,true)
					discPause()


				elseif (currentFrame >= move[currentMove][frameShootStart] and currentFrame < move[currentMove][frameShootEnd]) then

					-- Is player firing gun?

					if (p1BUTTON3) then

						p1BUTTON3 = false

						if (iBullets > 0) then

							-- Baddie got hit?

							if (shooterHit((currentFrame - offsetVTS10), 1) == true) then

								iScore = iScore + SCORE_BADGUY

								discPause()
								discSearch(move[currentMove][frameShootEnd]+1)
								drawScore()
								currentMove = currentMove + 1
								discPlay()

							else

								playMe(sndGunshot)

							end

						else

							playMe(sndEmpty)

						end

					end

				end

			end

		end

	elseif (lvlState == lvlUndertaker) then

		if (currentFrame == undertkrFrmEnd) then

			lvlState = lvlEnd

		elseif (p1BUTTON3) then

			p1BUTTON3 = false
			lvlState = lvlEnd

		end

	elseif (lvlState == lvlPlayDeath) then

		shotFrame = move[currentMove][frameDeathStart]
		if currentFrame - shotFrame > 3 then 

			spriteDraw(shotX, shotY, sprShot)
			
		end

		if (currentFrame == move[currentMove][frameDeathEnd]) then

			iLives = iLives - 1
			getUndertakerClip(UNDERTKR_NORMAL)
			lvlState = lvlUndertaker
			discPause()
			discSearch(undertkrFrmStart)
			discPlay()


		end


	elseif (lvlState == lvlShowMineHint) then

		if (currentFrame == lvlFrameEnd) then

			lvlState = lvlEnd

		end

	elseif (lvlState == lvlEnd) then

		lvlState = lvlSetup
		if (iLives == 0) then --Game Over

			tempLevel = currentLevel
			currentLevel = levelContinue

		elseif (iLives > 0 and dip_Undertaker == false and not bLevelComplete) then

			tempLevel = currentLevel
			currentLevel = levelLivesLeft

		else

			if (bLevelComplete) then
				stage[STAGE_POND] = true
			else
				curMazePos = 1
			end

		end
		
	end

end

function doLevelSheriff()


	if (lvlState == lvlSetup) then

		bShowMouse = true
		bMute = false
		lvlFrameStart = offsetlvlSheriff
		lvlFrameEnd = offsetlvlSheriff + 1960
		lvlState = lvlRunning
		bShowScore=true
		bLevelComplete = false
		bReloadDisabled = false
		bNoMoreBonuses = false
		bMakeNoise = true
		if iBullets < 6 then iBullets = 6 end

		currentMove = 1
		setupLevel(levelSheriff)
		discPause()
		discSearch (lvlFrameStart)
		discPlay()

	elseif (lvlState == lvl2ndChance) then

		if (waitFor(iDelay, false, false) == true) then

			discSearch(move[currentMove][frameDeathStart])
			discPlay()
			lvlState = lvlPlayDeath

		else

			if (p1BUTTON3) then

				p1BUTTON3 = false

				if (iBullets > 0) then

					-- Baddie got hit?

					if (shooterHit((currentFrame - offsetlvlSheriff), move[currentMove][hitmapStart]) == true) then

						iScore = iScore + SCORE_BADGUY
						discPause()
						discSearch(move[currentMove][frameShootEnd]+1)
						drawScore()
						currentMove = currentMove + 1

						bNoMoreBonuses = false

						discPlay()
						lvlState = lvlRunning

					elseif (bullseyeHit((currentFrame - offsetlvlSheriff)) == true) then

						bNoMoreBonuses = true

					else

						playMe(sndGunshot)

					end

				else

					playMe(sndEmpty)

				end

			end


		end

	elseif (lvlState == lvlRunning) then

		if (currentFrame >= (offsetlvlSheriff+22)) and (currentFrame <= (offsetlvlSheriff + 141)) then -- Kill the civillian?

			if (p1BUTTON3) then

				p1BUTTON3 = false
				if (civillianHit((currentFrame - offsetlvlSheriff)) == true) then

					iLives = iLives - 1
					getUndertakerClip(UNDERTKR_SHOTWOMAN)
					lvlState = lvlUndertaker
					discPause()
					discSearch(undertkrFrmStart)
					discPlay()

				end

			end

		elseif (currentFrame >= (offsetlvlSheriff+245) and currentFrame <= (offsetlvlSheriff+355)) then


				if (p1BUTTON3) then

					p1BUTTON3 = false

					if (bullseyeHit(1999) == true) then  -- Hit skull?

						bNoMoreBonuses = true

					end

				end

		elseif (currentFrame == (offsetlvlSheriff + 201)) then	-- Move the game flow!

			currentMove = 2
			discPause()
			discSearch(offsetlvlSheriff + 1962)
			discPlay()

		elseif (currentFrame == (offsetlvlSheriff + 1379)) then

			discPause()

			if (waitFor(iDelay, false, false) == true) then

				shooterHit(currentFrame - offsetlvlSheriff, move[currentMove][hitmapStart])	
				discPlay()

			else

				if (p1BUTTON3) then

					p1BUTTON3 = false

					if (iBullets > 0) then

						-- Baddie got hit?

						if (shooterHit((currentFrame - offsetlvlSheriff), move[currentMove][hitmapStart]) == true) then

							waitFor(0,false,true)
							iScore = iScore + SCORE_BADGUY

							discPause()
							discSearch(offsetlvlSheriff + 1380)
							currentMove = 6
							discPlay()
						
						else

							playMe(sndGunshot)

						end

					else

						playMe(sndEmpty)

					end

				end


			end

		elseif (currentFrame == (offsetlvlSheriff + 1973)) then

			discPause()

			if (waitFor(iDelay, false, false) == true) then

				shooterHit(currentFrame - offsetlvlSheriff, move[currentMove][hitmapStart])
				discPlay()

			else

				if (p1BUTTON3) then

					p1BUTTON3 = false

					if (iBullets > 0) then

						-- Baddie got hit?

						if (shooterHit((currentFrame - offsetlvlSheriff), move[currentMove][hitmapStart]) == true) then

							waitFor(0,false,true)
							iScore = iScore + SCORE_BADGUY

							discPause()
							discSearch(offsetlvlSheriff + 245)

							currentMove = 3
							bNoMoreBonuses = false

							discPlay()

						elseif (bullseyeHit(1999) == true) then  -- Hit skull?

							bNoMoreBonuses = true

						else

							playMe(sndGunshot)

						end

					else

						playMe(sndEmpty)

					end

				end


			end

		elseif (bGotKey == false and currentFrame == (offsetlvlSheriff + 372)) then	-- Player has no key, skip to appropriate scene

			lvlFrameEnd = offsetlvlSheriff + 2878
			currentMove = 5
			discPause()
			discSearch(offsetlvlSheriff + 2195)
			discPlay()

		elseif (currentFrame == lvlFrameEnd) then

			lvlState = lvlEnd
			bLevelComplete = bGotKey
				
		else

			if (currentMove <= totalMoves) then

				if (currentFrame > move[currentMove][frameShootEnd]) then

					if currentMove == 1 then

												
					else
					
						shooterHit(currentFrame - 1 - offsetlvlSheriff, move[currentMove][hitmapStart])
						discSearch(move[currentMove][frameDeathStart])
						discPlay()
						lvlState = lvlPlayDeath
					
					end
						
				elseif (currentFrame >= move[currentMove][frameShootStart] and currentFrame <= move[currentMove][frameShootEnd]) then

					-- Is player firing gun?

					if (p1BUTTON3) then

						p1BUTTON3 = false

						if (iBullets > 0) then

							-- Baddie got hit?

							if (shooterHit((currentFrame - offsetlvlSheriff), move[currentMove][hitmapStart]) == true) then

								iScore = iScore + SCORE_BADGUY

								if currentMove == 1 then

									discPause()
									discSearch(offsetlvlSheriff + 241)
									drawScore()
									currentMove = 3
									bNoMoreBonuses = false
									discPlay()

								else

									discPause()
									discSearch(move[currentMove][frameShootEnd]+1)
									drawScore()
									currentMove = currentMove + 1

									bNoMoreBonuses = false

									discPlay()

								end

							elseif (bullseyeHit((currentFrame - offsetlvlSheriff)) == true) then

								bNoMoreBonuses = true

							elseif (civillianHit((currentFrame - offsetlvlSheriff)) == true) then


								iLives = iLives - 1
								getUndertakerClip(UNDERTKR_SHOTWOMAN)
								lvlState = lvlUndertaker
								discPause()
								discSearch(undertkrFrmStart)
								discPlay()


							else

								playMe(sndGunshot)

							end

						else

							playMe(sndEmpty)

						end

					end


				end

			end

		end

	elseif (lvlState == lvlPlayDeath) then

		shotFrame = move[currentMove][frameDeathStart]
		
		if currentFrame - shotFrame > 3 then 

			
			if currentMove == 5 then

				cx = shotX
				cy = shotY

			else	

				cx = meanx - 252*UnX
				cy = meany - 240*UnY

			end
			
			spriteDraw(cx, cy, sprShot)

		end

		if (currentFrame == move[currentMove][frameDeathEnd]) then

			iLives = iLives - 1
			getUndertakerClip(UNDERTKR_NORMAL)
			lvlState = lvlUndertaker
			discPause()
			discSearch(undertkrFrmStart)
			discPlay()
			
		end

	elseif (lvlState == lvlUndertaker) then

		if (currentFrame == undertkrFrmEnd) then

			lvlState = lvlEnd

		elseif (p1BUTTON3) then

			p1BUTTON3 = false
			lvlState = lvlEnd

		end


	elseif (lvlState == lvlEnd) then


		lvlState = lvlSetup
		
		if (iLives == 0) then --Game Over

			tempLevel = levelTownSelect
			currentLevel = levelContinue

		elseif (iLives > 0 and dip_Undertaker == false and not bLevelComplete) then

			tempLevel = levelTownSelect
			currentLevel = levelLivesLeft

		else

			if (bLevelComplete) then
				
				stage[STAGE_SHERIFF] = true
				currentLevel = levelTownSelect
				
			else

				testShowdown(levelTownSelect)
							
			end
			
		end

		
	end


end

function testShowdown(orHere) -- test to decide if Showdown or continue

	singeRandomize()

	local r = math.random(10)
				
	if r > 7 and (dip_Showdown == 1 or dip_Showdown == 3) and iLives > 0 then

		afterShow = orHere
		currentLevel = levelShowdown

	else

		currentLevel = orHere

	end

end

function doLevelShowdown()

	if (lvlState == lvlSetup) then

		bShowMouse = true
		bMute = false

		singeRandomize()

		local t = math.random(3)

		if t == 1 then

			lvlFrameStart = 8564
			lvlFrameEnd = 8923

		elseif t == 2 then

			lvlFrameStart = 8925
			lvlFrameEnd = 9250

		else

			lvlFrameStart = 9256
			lvlFrameEnd = 9461

		end

		lvlState = lvlPlayClip
		bShowScore=true
		bReloadDisabled = true
		bLevelComplete = false

		currentMove = 1
		setupLevel(levelShowdown)

		discPause()
		discSearch (lvlFrameStart)
		discPlay()

	elseif (lvlState == lvlPlayClip) then

		if (currentFrame == lvlFrameEnd) then

			lvlState = lvlRunning
			lvlFrameStart = move[currentMove][5]
			lvlFrameEnd = move[currentMove][6]
			discPause()
			discSearch(lvlFrameStart)
			discPlay()
			iBullets = 0

		else

			if (p1BUTTON3) then

				p1BUTTON3 = false
				lvlState = lvlRunning
				lvlFrameStart = move[currentMove][5]
				lvlFrameEnd = move[currentMove][6]
				discPause()
				discSearch(lvlFrameStart)
				discPlay()

			end

		end

	elseif (lvlState == lvl2ndChance) then

		if (waitFor(iDelay,false,false) == true) then

			discSearch(move[currentMove][frameDeathStart])
			discPlay()
			lvlState = lvlPlayDeath

		else

			if bRealShow == true then

					if mousey <= resY-10 then 

						if (iBullets == 0) then	-- Reload if there is less than max (avoid emptying bonus bullets)
							
							iBullets = 6
							playMe(sndReload)
						
						end

					end

			end

			if (p1BUTTON3) then

				p1BUTTON3 = false

				if (iBullets > 0) then

					-- Baddie got hit?

					if (shooterHit(currentFrame - offsetVTS4 - 1, 1) == true) then

						iScore = iScore + SCORE_SHOWDOWN
						discPause()
						discSearch(move[currentMove][frameShootEnd]-1)

						drawScore()
						currentMove = currentMove + 1

						discPlay()
						lvlState = lvlRunning

					end
					playMe(sndGunshot)

				else

					playMe(sndEmpty)

				end

			end

		end

	elseif (lvlState == lvlRunning) then

		if dip_Showdown == 3 then bRealShow = true end

		if (currentFrame == lvlFrameEnd) then

			bLevelComplete = true
			lvlState = lvlEnd

		else

			if (currentMove <= totalMoves) then

				if (currentFrame < (move[currentMove][moveFrameStart] - 6)) then

					if (bRealShow == true and mousey < resY-10) then 

						fontSelect(fontOldWestBig)
						colorForeground(255, 0, 0)
						blinkTimer(0.2)
						if heartbeat then fontPrint(getMiddle("LOWER YOUR GUN!!!"), 400*UnY, "LOWER YOUR GUN!!!") end
						
					end	

				elseif (currentFrame == (move[currentMove][moveFrameStart] - 5)) then

					if bRealShow == true then

						if mousey <= resY-10 then

							bReloadDisabled = false
							discSkipToFrame(move[currentMove][frameDeathStart])
							lvlState = lvlPlayDeath

						end

					else

						bReloadDisabled = false

					end

				elseif (currentFrame == (move[currentMove][moveFrameStart])) then
		
					bReloadDisabled = false

					if bRealShow == true then

						if mousey <= resY-10 then 

							if (iBullets == 0) then	-- Reload if there is less than max (avoid emptying bonus bullets)
								
								iBullets = 6
								playMe(sndReload)
							
							end

						end

					end
								
				elseif (currentFrame == move[currentMove][frameShootEnd]) then
					
					discPause()
					lvlState = lvl2ndChance
					waitFor(0,false,true)


				elseif (currentFrame >= move[currentMove][frameShootStart] and currentFrame < move[currentMove][frameShootEnd]) then

					if (p1BUTTON3) then

						p1BUTTON3 = false

						if (iBullets > 0) then

							-- Baddie got hit?

							if (shooterHit(currentFrame - offsetVTS4, 1) == true) then

								iScore = iScore + SCORE_SHOWDOWN
								discPause()
								discSearch(move[currentMove][frameShootEnd]+1)
								drawScore()
								currentMove = currentMove + 1

								bMakeNoise = true
								discPlay()

							end
							playMe(sndGunshot)

						else

							playMe(sndEmpty)

						end

					end

				end

			end

		end

	elseif (lvlState == lvlPlayDeath) then

		shotFrame = move[currentMove][frameDeathStart]
		
		if currentFrame - shotFrame > 3 then 

			spriteDraw(shotX, shotY, sprShot) 

		end
		
		if (currentFrame == move[currentMove][frameDeathEnd]) then

			iLives = iLives - 1
			getUndertakerClip(UNDERTKR_NORMAL)
			discPause()
			discSearch(undertkrFrmStart)
			discPlay()
			lvlState = lvlUndertaker
						
		end

	elseif (lvlState == lvlUndertaker) then
		
		if (currentFrame == undertkrFrmEnd) then

			lvlState = lvlEnd

		elseif (p1BUTTON3) then

			p1BUTTON3 = false
			lvlState = lvlEnd

		end
	
	elseif (lvlState == lvlEnd) then

		lvlState = lvlSetup
		if (iLives == 0) then --Game Over

			tempLevel = afterShow
			currentLevel = levelContinue

		elseif (iLives > 0 and dip_Undertaker == false and not bLevelComplete) then

			tempLevel = afterShow
			currentLevel = levelLivesLeft

		else
		
			currentLevel = afterShow
	
		end

		bRealShow = false
			
	end

end

function doLevelStart()

	if (lvlState == lvlSetup) then

		lvlFrameStart = offsetlvlStart
		lvlFrameEnd = offsetlvlStart + 1828
		bShowMouse = true
		bMute = false
		lvlState = lvlRunning
		bShowScore=true
		bReloadDisabled = false
		bLevelComplete = false
		currentMove = 1
		setupLevel(levelStart)
		if iBullets < 6 then iBullets = 6 end
		
		discPause()
		discSearch(lvlFrameStart)
		discPlay()

	elseif (lvlState == lvlRunning) then

		if (currentFrame == lvlFrameEnd) then

			lvlState = lvlEnd
			bLevelComplete = true

		elseif ((currentFrame >= offsetlvlStart) and (currentFrame <= (offsetlvlStart + 600))) then -- Skip to the prospector

			if (p1BUTTON3) then

				bAmmo = true
				p1BUTTON3 = false
				discPause()
				discSearch (offsetlvlStart + 1001)
				discPlay()

			end

		else

			if (currentMove <= totalMoves) then

				if (currentFrame > move[currentMove][frameShootEnd]) then

					discPause()
					discSearch(move[currentMove][frameDeathStart])
					discPlay()
					lvlState = lvlPlayDeath

				elseif (currentFrame >= move[currentMove][frameShootStart] and currentFrame <= move[currentMove][frameShootEnd]) then

					-- Is player firing gun?

					if (p1BUTTON3) then

						p1BUTTON3 = false

						if (iBullets > 0) then

							-- Baddie got hit?

							if (shooterHit(currentFrame, 1) == true) then

								iScore = iScore + SCORE_BADGUY

								discPause()
								discSearch(move[currentMove][frameShootEnd]+1)

								drawScore()
								currentMove = currentMove + 1

								discPlay()

							else

								playMe(sndGunshot)

							end

						else

							playMe(sndEmpty)

						end

					end


				end

			end

		end

	elseif (lvlState == lvlPlayDeath) then

		shotFrame = move[currentMove][frameDeathStart]
		if currentMove > 1 and currentFrame - shotFrame > 3 then 

			cx = meanx - 252*UnX
			cy = meany - 240*UnY
			spriteDraw(cx, cy, sprShot) 

		end

		if (currentFrame == move[currentMove][frameDeathEnd]) then

			iLives = iLives - 1
			getUndertakerClip(UNDERTKR_NORMAL)
			lvlState = lvlUndertaker
			discPause()
			discSearch(undertkrFrmStart)
			discPlay()

		end

	elseif (lvlState == lvlUndertaker) then

		if (currentFrame == undertkrFrmEnd) then

			lvlState = lvlEnd

		elseif (p1BUTTON3) then

			p1BUTTON3 = false
			lvlState = lvlEnd

		end

	elseif (lvlState == lvlEnd) then

		lvlState = lvlSetup
		if (iLives == 0) then --Game Over

			tempLevel = currentLevel
			currentLevel = levelContinue

		elseif (iLives > 0 and dip_Undertaker == false and not bLevelComplete) then

			tempLevel = currentLevel
			currentLevel = levelLivesLeft

		else

			if bLevelComplete then

				currentLevel = levelTownSelect

			else

				currentLevel = levelStart

			end

		end
		
	end

end

function doLevelTut()

	if (lvlState == lvlSetup) then

		lvlFrameStart = offsetHowToPlay + 1132
		lvlFrameEnd = offsetHowToPlay + 1664
		bShowMouse = true
		bMute = false
		bShowScore = true
		bShowCredits = false
		bReloadDisabled = false
		currentMove = 1
		setupLevel (levelTut)
		waitFor(0,false,true)
		setupLevel(levelTut)
		lvlState = lvlPlayClip
		if iBullets < 6 then iBullets = 6 end

		discPause()
		discSearch(lvlFrameStart)
		discPlay()

	elseif (lvlState == lvlPlayClip) then	-- "Let's see what kind of a shooter you are pilgrim."

		if (currentFrame == offsetHowToPlay + 1242) then

			discPause ()
			discSearch(move[currentMove][frameShootStart])
			lvlState = lvlRunning

		end

	elseif (lvlState == lvlPlayClip2) then	-- "Nice shooting. Try another!"

		if (currentFrame == offsetHowToPlay + 1320) then

			currentMove = currentMove + 1
			if (currentMove <= totalMoves) then
				discPause()
				discSearch(move[currentMove][frameShootStart])

				lvlState = lvlRunning

			else

				discPause()
				discSearch(offsetHowToPlay + 1662)
				discPlay()
				lvlState = lvlEnd

			end

		end

	elseif (lvlState == lvlPlayClip3) then	-- "You missed that one. Try another!"

		if (currentFrame == offsetHowToPlay + 1410) then

			currentMove = currentMove + 1
			if (currentMove <= totalMoves) then
				discPause()
				discSearch(move[currentMove][frameShootStart])

				lvlState = lvlRunning

			else

				discPause()
				discSearch(offsetHowToPlay + 1662)
				discPlay()
				lvlState = lvlEnd

			end

		end

	elseif (lvlState == lvlPlayClip4) then	-- "Try another!"

		if (currentFrame == offsetHowToPlay + 1450) then

			currentMove = currentMove + 1
			if (currentMove <= totalMoves) then
				discPause()
				discSearch(move[currentMove][frameShootStart])

				lvlState = lvlRunning

			else

				discPause()
				discSearch(offsetHowToPlay + 1662)
				discPlay()
				lvlState = lvlEnd

			end

		end

	elseif (lvlState == lvlPlayClip5) then	-- End of level

		if (currentFrame == offsetHowToPlay + 1664) then

			lvlState = lvlEnd

		end

	elseif (lvlState == lvlPlayRest) then

		if (currentFrame == move[currentMove][endFrmRandom]) then

			discPause()
			if (currentMove < totalMoves) then

				discSearch(offsetHowToPlay + 1242)	-- Play "Nice shooting!" clip
				lvlState = lvlPlayClip2

			else

				discSearch(offsetHowToPlay + 1662)
				lvlState = lvlPlayClip5

			end
			discPlay()

		end

	elseif (lvlState == lvlRunning) then

		if (currentMove <= totalMoves) then

			if (currentFrame == move[currentMove][frameShootEnd]) then

				if (waitFor(3, false, false) == true) then

					discPause()
					if (currentMove < totalMoves) then

						singeRandomize()

						local t = math.random(2)

						if t == 2 then

							discSearch(offsetHowToPlay + 1320)
							lvlState = lvlPlayClip3

						else

							discSearch(offsetHowToPlay + 1410)
							lvlState = lvlPlayClip4

						end

					else

						discSearch(offsetHowToPlay + 1662)

						lvlState = lvlEnd

					end
					discPlay()


				else

					if (p1BUTTON3) then

						p1BUTTON3 = false

						if (iBullets > 0) then

							-- Baddie got hit?

							if (shooterHit(currentFrame - offsetHowToPlay, 1) == true) then

								iScore = iScore + SCORE_BOTTLE
								waitFor(0,false,true)

								discPause()
								discSearch(move[currentMove][frameShootEnd]+1)
								drawScore()

								lvlState = lvlPlayRest
								discPlay()

							else

								playMe(sndGunshot)

							end

						else

							playMe(sndEmpty)

						end

					end

				end


			end

		end

	elseif (lvlState == lvlEnd) then

		bShowScore = false

		lvlState = lvlSetup
		currentLevel = levelStart
		
	end

end

function doMazeSign(thisFrame, thisDir)

	iBullets = 6

	if (lvlState == lvlSetup) then
		bShowMouse = true
		bMute = false
		bShowScore = false
		bMakeNoise = true
		bLevelComplete = false
		waitFor(0,false,true)
		if soundStop ~= nil then
			sndHandle = soundPlay(sndSign)
		end
		if iBullets < 6 then iBullets = 6 end

		GetSignArray(thisFrame)

		discPause()

		if (thisFrame == SIGN_ENTRANCE) then

			discSearch(offsetMenus + thisFrame)

		else

			discSearch(offsetVTS9 + thisFrame)

		end

		lvlState = lvlRunning

	elseif (lvlState == lvlPlayClip2) then

		discPause()
		if (thisFrame == SIGN_POST32 or thisFrame == SIGN_POST175) then

			lvlFrameStart = 29080
			lvlFrameEnd = 29364
			shotFrame = 29194

		elseif (thisFrame == SIGN_ENTRANCE) then

			lvlFrameStart = 35123
			lvlFrameEnd = 35420
			shotFrame = 35187

		else

			lvlFrameStart = 27491
			lvlFrameEnd = 27752
			shotFrame = 27575

		end

		discSearch(lvlFrameStart)
		discPlay()

		lvlState = lvlPlayDeath

	elseif (lvlState == lvlRunning) then

		if waitFor(10, false, false) == true then

			if soundStop ~= nil then
				soundStop(sndHandle)
			end
			
			lvlState = lvlPlayClip2

		elseif (p1BUTTON3) then

			p1BUTTON3 = false

			if soundStop ~= nil then
				soundStop(sndHandle)
			end
			
			if (mazeHit(thisFrame, thisDir) == true) then

				bLevelComplete = true
				lvlState = lvlEnd

			else	-- Wrong sign shot, death to player!

				lvlState = lvlPlayClip2

			end

		end

	elseif (lvlState == lvlPlayDeath) then

		
		if currentFrame >= shotFrame then 

			spriteDraw(shotX, shotY, sprShot) 

		end

		if (currentFrame == lvlFrameEnd or p1BUTTON3) then

			iLives = iLives - 1
			p1BUTTON3 = false
			getUndertakerClip(UNDERTKR_NORMAL)
			discPause()
			discSearch(undertkrFrmStart)
			discPlay()
			lvlState = lvlUndertaker

		end

	elseif (lvlState == lvlUndertaker) then

		if (currentFrame == undertkrFrmEnd) then

			lvlState = lvlEnd

		elseif (p1BUTTON3) then

			p1BUTTON3 = false
			lvlState = lvlEnd

		end

	elseif (lvlState == lvlEnd) then

		bShowScore = true
		bAmmo = true
		lvlState = lvlSetup
		if (iLives == 0) then --Game Over

			tempLevel = currentLevel
			currentLevel = levelContinue

		elseif (iLives > 0 and dip_Undertaker == false and not bLevelComplete) then

			tempLevel = currentLevel
			currentLevel = levelLivesLeft

		else

			if bLevelComplete then

				curMazePos = curMazePos + 1

			else

				curMazePos = 1
				currentLevel = levelMaze

			end

		end
		
	end

end

function doShootTheBottle()

	if (lvlState == lvlSetup) then

		lvlFrameStart = offsetVTS8 + 2900
		lvlFrameEnd = offsetVTS8 + 4713
		bShowMouse = true
		bMute = false
		bLevelComplete = false
		bMakeNoise = true
		bShowScore=true
		bReloadDisabled = false
		bFuse = false
		currentMove = 1
		lastMove = 0
		setupLevel(levelBottle)
		waitFor(0,false,true)
		discPause()
		discSearch(lvlFrameStart)
		discPlay()
		if iBullets < 6 then iBullets = 6 end
		
		lvlState = lvlRunning

	elseif (lvlState == lvlShowMap) then

		if (waitFor(8, false, false) == true) then

			waitFor(0,false,true)
			--discSearch(lvlFrameStart)
			discPlay()

			lvlState = lvlEnd
					
		end

	elseif (lvlState == lvlPlayExplosion) then

		if (currentFrame == iFrameEnd) then

			if (currentMove < totalMoves) then

				discPause()
				discSearch(offsetVTS8 + 3395)
				iFrameEnd = offsetVTS8 + 3482
				discPlay()


				lvlState = lvlPlayNiceShooting

			else

				discPause()
				discSearch(offsetVTS8 + 4568)
				discPlay()
				lvlState = lvlUndertaker


			end


		end

	elseif (lvlState == lvlPlayNiceShooting) then

		if (currentFrame == iFrameEnd) then

			currentMove = currentMove + 1
			if (currentMove <= totalMoves) then

				discPause()
				discSearch(move[currentMove][frameShootStart])
				discPlay()


			end

			lvlState = lvlRunning

		end

	elseif (lvlState == lvlRunning) then

		if (currentFrame == lvlFrameEnd) then

			lvlState = lvlEnd

		elseif (currentFrame == (offsetVTS8 + 3146)) then	--Skip to first bottle clip

			if currentMove == lastMove then currentMove = currentMove + 1 end

			if currentMove ~= nil then
				if move[currentMove][frameShootStart] then
					discPause()
					discSearch(move[currentMove][frameShootStart])
					discPlay()
				end

				lastMove = currentMove
			end

		else

			if (currentMove <= totalMoves) then

				if (currentFrame > move[currentMove][frameShootEnd]) then

					if (currentMove < totalMoves) then

						discSearch(offsetVTS8 + 3780)	-- Bottle Miss
						discPlay()
						lvlState = lvlPlayDeath

					else
						discPause()
						discSearch(offsetVTS8 + 4568)	-- Bottle End
						discPlay()
						lvlState = lvlUndertaker

					end


				elseif (currentFrame >= move[currentMove][frameShootStart] and currentFrame <= move[currentMove][frameShootEnd]) then

					-- Is player firing gun?

					if (p1BUTTON3) then

						p1BUTTON3 = false

						if (iBullets > 0) then

							-- Baddie got hit?

							if (shooterHitB((currentFrame - offsetVTS8), 1) == true) then

								iScore = iScore + SCORE_BOTTLE

								discPause()
								discSearch(move[currentMove][frameDeathStart])

								drawScore()
								iFrameEnd = move[currentMove][frameDeathEnd]

								lvlState = lvlPlayExplosion
								discPlay()


							end

						else

							playMe(sndEmpty)

						end

					end


				end

			else

				discPause()
				discSearch(offsetVTS8 + 4713)
				discPlay()
				lvlState = lvlUndertaker


			end

		end

	elseif (lvlState == lvlUndertaker) then

		if (currentFrame == lvlFrameEnd) then

			singeRandomize()

			iPosHideout = math.random (6)

			if (iPosHideout == 1) then

				discSearch(offsetVTS8 + 2354)

			elseif (iPosHideout == 2) then

				discSearch(offsetVTS8 + 2445)

			elseif (iPosHideout == 3) then

				discSearch(offsetVTS8 + 2536)

			elseif (iPosHideout == 4) then

				discSearch(offsetVTS8 + 2627)

			elseif (iPosHideout == 5) then

				discSearch(offsetVTS8 + 2718)

			elseif (iPosHideout == 6) then

				discSearch(offsetVTS8 + 2809)

			end

			discPause()
			bLevelComplete = true
			lvlState = lvlShowMap

		end

	elseif (lvlState == lvlPlayDeath) then	-- "You missed that one. Try another"

		if (currentFrame == (offsetVTS8 + 3870)) then

			currentMove = currentMove + 1

			if (currentMove <= totalMoves) then

				discPause()
				discSearch(move[currentMove][frameShootStart])
				discPlay()

			end

			lvlState = lvlRunning


		end

	elseif (lvlState == lvlEnd) then

		lvlState = lvlSetup
		if (bLevelComplete) then
			stage[STAGE_BOTTLE] = true
		end
		currentLevel = levelSignSelect

		
	end

end

function doSignSelect()

	if (lvlState == lvlSetup) then

		bShowMouse = true
		bMute = false
		bReloadDisabled = false
		bLevelComplete = false
		bShowScore = false
		bMakeNoise = true
		if soundStop ~= nil then
			sndHandle = soundPlay(sndSign)
		end
		GetSignPostArray()
		discPause()
		discSearch(signFrame)
		waitFor(0,false,true)
		lvlState = lvlRunning
		if iBullets < 6 then iBullets = 6 end

	elseif (lvlState == lvlRunning) then

		if (waitFor(10,false,false) == true) then
			
			tempMem = levelSignSelect
			lvlState = lvlPlayClip

		else

			if (p1BUTTON3) then

				p1BUTTON3 = false
				
				if (signHit(SIGN_PROSPECTOR) == true and stage[STAGE_FUSE] == false) then
					
					bLevelComplete = true
					tempMem = levelFuse
					lvlState = lvlEnd

				elseif (signHit(SIGN_MINE) == true and stage[STAGE_MINE] == false and stage[STAGE_FUSE] == true) then
					
					bLevelComplete = true
					tempMem = levelMine
					lvlState = lvlEnd

				elseif (signHit(SIGN_HIDEOUT) == true and stage[STAGE_MINE] == true and stage[STAGE_FUSE] == true) then
					
					bLevelComplete = true
					tempMem = levelMaze
					mazeState = lvlSetup
					lvlState = lvlEnd

				else

					tempMem = levelSignSelect
					lvlState = lvlPlayClip

				end

			end

		end

	elseif (lvlState == lvlPlayClip) then

		if soundStop ~= nil then
			soundStop(sndHandle)
		end

		discPause()
		lvlFrameStart = 35627
		lvlFrameEnd = 35756
		shotFrame = 35683
		discSearch(lvlFrameStart)
		discPlay()

		lvlState = lvlPlayDeath



	elseif (lvlState == lvlPlayDeath) then

		
		if currentFrame >= shotFrame then 

			cx = meanx - 252*UnX
			cy = meany - 240*UnY
			spriteDraw(shotX, shotY, sprShot) 

		end

		if (currentFrame == lvlFrameEnd or p1BUTTON3) then

			iLives = iLives - 1
			p1BUTTON3 = false
			getUndertakerClip(UNDERTKR_NORMAL)
			discPause()
			discSearch(undertkrFrmStart)
			discPlay()
			lvlState = lvlUndertaker

		end

	elseif (lvlState == lvlUndertaker) then

		if (currentFrame == undertkrFrmEnd) then

			lvlState = lvlEnd

		elseif (p1BUTTON3) then

			p1BUTTON3 = false
			lvlState = lvlEnd

		end

	elseif (lvlState == lvlEnd) then

		if soundStop ~= nil then
			soundStop(sndHandle)
		end
		bShowScore = true
		bAmmo = true
		lvlState = lvlSetup
		

		if (iLives == 0) then --Game Over

			tempLevel = currentLevel
			currentLevel = levelContinue

		elseif (iLives > 0 and dip_Undertaker == false and not bLevelComplete) then

			tempLevel = currentLevel
			currentLevel = levelLivesLeft

		else

			currentLevel = tempMem

		end
		
	end


end

function doTownSelect()

	if (lvlState == lvlSetup) then

		bShowMouse = true
		bMute = false
		bReloadDisabled = false
		if iBullets < 6 then iBullets = 6 end
		
		bShowScore = false; bMakeNoise = true
		
		if (stage[STAGE_CORRAL] == true and stage[STAGE_SHERIFF] == true and stage[STAGE_SALOON] == true and stage[STAGE_BANK] == true) then

			currentLevel = levelSignSelect

		else
			if soundStop ~= nil then
				sndHandle = soundPlay(sndSign)
			end
			selectMenuFrame()
			discPause()
			discSearch(menuFrame)
			waitFor(0,false,true)
			lvlState = lvlRunning

		end

	elseif (lvlState == lvlRunning) then

		if (waitFor(24,false,false) == true) then

			if (stage[STAGE_CORRAL] == false) then

				tempMem = levelCorral

			elseif (stage[STAGE_SALOON] == false) then

				tempMem = levelSaloon

			elseif (stage[STAGE_SHERIFF] == false) then

				tempMem = levelSheriff

			else

				tempMem = levelBank

			end

			lvlState = lvlEnd

		else


			if (p1BUTTON3) then

				p1BUTTON3 = false


				if (mousex <= resX*0.5) and (mousey <= resY*0.5) then

					if (stage[STAGE_CORRAL] == false) then

						tempMem = levelCorral
						lvlState = lvlEnd

					end

				elseif (mousex <= resX*0.5) and (mousey > resY*0.5) then

					if (stage[STAGE_SHERIFF] == false) then

						tempMem = levelSheriff
						lvlState = lvlEnd

					end

				elseif (mousex > resX*0.5) and (mousey <= resY*0.5) then

					if (stage[STAGE_SALOON] == false) then

						tempMem = levelSaloon
						lvlState = lvlEnd

					end

				elseif (mousex > resX*0.5) and (mousey > resY*0.5) then

					if (stage[STAGE_BANK] == false) then

						tempMem = levelBank
						lvlState = lvlEnd

					end

				end

			end

		end

	elseif (lvlState == lvlEnd) then

		if soundStop ~= nil then
			soundStop(sndHandle)
		end
		bAmmo = true
		lvlState = lvlSetup
		currentLevel = tempMem
		waitFor(0,false,true)

		
	end

end

function drawBullets()

	local k
	local j=0

	if iBullets == 0 and bRealShow == false then

		blinkTimer(0.5)

		if heartbeat then

			if dip_HUD == 1 then

				spriteDraw(bulletSprtX, bulletSprtY, sprReload)

			else

				spriteDraw(650*UnX, bulletSprtY, sprReload)

			end	
		end


	else

		if dip_HUD == 1 then

			j = 0

			for k=0,iBullets-1 do

				if (k <= 5) then

					spriteDraw (bulletSprtX + (k*40*UnX), bulletSprtY, sprBullet)

				elseif k > 5 and k < 12 then

					spriteDraw ((bulletSprtX + j), bulletSprtY2, sprBullet)
					j = j + (40*UnX)

				end

			end

		else

			for k=0,iBullets-1 do

				if (k <= 5) then

					spriteDraw (bulletSprtX + (k*26*UnX), 800*UnY, sprBulletSM)

				elseif k > 5 and k < 12 then

					spriteDraw ((bulletSprtX + j), 745*UnY, sprBulletSM)
					j = j + (26*UnX)
					
				end

			end

		end

	end

end

function drawCredits()

	fontSelect(fontOldWest)
	colorForeground(255, 255, 255)

	if (currentFrame >= offsetlvlSaloon + 575 and currentFrame <= offsetlvlSaloon + 700) then

		fontPrint(300*UnX, 110*UnY, "P R O D U C E R")
		fontPrint(350*UnX, 180*UnY, "R O B E R T  G R E B E")
		fontPrint(300*UnX, 300*UnY, "D I R E C T O R")
		fontPrint(350*UnX, 370*UnY, "D A V I D   O.  R O B E R T S")
		fontPrint(300*UnX, 490*UnY, "C I N E M A T O G R A P H Y")
		fontPrint(350*UnX, 560*UnY, "B A R R Y   K I R K")
		fontPrint(300*UnX, 680*UnY, "S T O R Y   B Y")
		fontPrint(350*UnX, 750*UnY, "J I M   P A T T I S O N")

	elseif (currentFrame >= offsetlvlSaloon + 701 and currentFrame <= offsetlvlSaloon + 842) then

		fontPrint(300*UnX, 110*UnY, "S O F T W A R E")
		fontPrint(350*UnX, 180*UnY, "P I E R R E   M A L O K A")
		fontPrint(300*UnX, 300*UnY, "S P E C I A L   T H A N K S   T O")
		fontPrint(350*UnX, 370*UnY, "T H E   C R E W   A T")
		fontPrint(350*UnX, 440*UnY, "S O U T H W E S T   P R O D U C T I O N S")

	elseif (currentFrame >= offsetlvlSaloon + 843 and currentFrame <= offsetlvlSaloon + 985) then

		fontPrint(300*UnX, 110*UnY, "P R O G R A M  B Y")
		fontPrint(350*UnX, 180*UnY, "R D G  2 0 1 0")
		fontPrint(300*UnX, 300*UnY, "S I N G E  2  P O R T")
		fontPrint(350*UnX, 370*UnY, "P O I U  2 0 2 0")
		fontPrint(300*UnX, 490*UnY, "S I N G E  2  B U I L D")
		fontPrint(350*UnX, 560*UnY, "S C O T T  D U E N S I N G")
		fontPrint(300*UnX, 680*UnY, "H D  P O R T")
		fontPrint(350*UnX, 750*UnY, "K A R I S")

	end


end

function drawHStable()

	local k = 0
	local posy = 250*UnY
	local s1 = ""
	local s2 = ""

	colorForeground(255, 0, 0)
	fontSelect(fontOldWest)
	fontPrint(820*UnX, 120*UnY, "T O P  S H O O T E R S")
	fontSelect(fontScore)
	
	for k=1,6 do

		s1 = tostring(k) .. ". " .. highscore[k][1]
		s2 = highscore[k][2]
		fontPrint(820*UnX,posy, s1)
		fontPrint(1170*UnX,posy, s2)
		posy = posy + (80*UnY)

	end

end

function drawLives()

local k

	if dip_HUD == 1 then

		for k=1,iLives do

			if k<=6 then

				spriteDraw (starPos[k][POSX], starPos[k][POSY], sprStar)

			end

		end

	else

		for k=0,iLives-1 do

			if k<=6 then

				spriteDraw (bulletSprtX + (k*40*UnX), 860*UnY, sprStarSM)

			end

		end

	end

end

function drawName()

	local k = 0
	local posx = 238*UnX
	local p = string.len(sName)

	fontSelect(fontOldWestBig)
	colorForeground(94, 18, 0)


	for k=1,p do

		sprName = nil
		sprName = fontToSprite(string.sub(sName,k,k))
		spriteDraw(posx, 324*UnY, sprName)
		posx = posx + (132*UnX)


	end

end

function drawScore()

	if dip_HUD == 1 then

		drawSpriteNumber(sx, sy, iScore)

	else

		drawSpriteNumber(sx, 928*UnY, iScore)

	end	

end

function getUndertakerClip(thisClip)

	bShowMouse = false
	bReloadDisabled = true
	bShowScore = false
	bMute = true
	iBullets = 6
	bAmmo = true
	
	if iLives < 0 then iLives = 0 end

	if dip_Undertaker then

		if (thisClip == UNDERTKR_SHOTWOMAN) then

			undertkrFrmStart = 12651
			undertkrFrmEnd = 12961

		elseif (thisClip == UNDERTKR_SHOTGUY) then

			undertkrFrmStart = 12962
			undertkrFrmEnd = 13224

		elseif (thisClip == UNDERTKR_NOGENDER) then

			singeRandomize()

			local t = math.random(2)

			if t == 2 then

				undertkrFrmStart = 13225
				undertkrFrmEnd = 13504

			else

				undertkrFrmStart = 13505
				undertkrFrmEnd = 13881

			end

		elseif (thisClip == UNDERTKR_GOODGUY) then

			undertkrFrmStart = 13504
			undertkrFrmEnd = 13881

		elseif (iLives == 0) then
			
			undertkrFrmStart = 12292
			undertkrFrmEnd = 12651

		elseif (iLives == 1) then

			undertkrFrmStart = 12045
			undertkrFrmEnd = 12291

		elseif (iLives == 2) then

			undertkrFrmStart = 11291
			undertkrFrmEnd = 11542

		else

			singeRandomize()
			local t = math.random(2)

			if t == 2 then

				undertkrFrmStart = 10661
				undertkrFrmEnd = 10915

			else

				undertkrFrmStart = 10916
				undertkrFrmEnd = 11290

			end

		end

	else

		undertkrFrmStart = 0
		undertkrFrmEnd = 2

	end
	
end

function letterScan()

	local k = 0
	local f1 = 0
	local f2 = 0
	local x1 = 0
	local x2 = 0
	local y2 = 0
	local y3 = 0
	local thisLetter = LETTER_NONE

	f1 = hitmap[1][hitmapIndex]
	f2 = f1 + (hitmap[1][hitmapCount]-1)

	for k=f1,f2 do

		x1 = ResHMx(hitbox[k][bbx1])
		y1 = ResHMy(hitbox[k][bby1])
		x2 = ResHMx(hitbox[k][bbx2])
		y2 = ResHMy(hitbox[k][bby2])

		if (mousex >= x1 and mousex <= x2) and (mousey >= y1 and mousey <= y2) then	-- Player hit!

			thisLetter = k
			break

		end

	end

	return thisLetter


end

function letterAdd(thisLetter)

	local sAlph = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

	if (string.len(sName) < 8) then

		s1 = string.sub(sAlph, thisLetter, thisLetter)

		sName = string.format("%s%s", sName, s1)
		soundPlay(sndGunshot)

	end

end

function letterSubtract()

	local k = string.len(sName)

	if (k >= 1) then

		sName = string.sub(sName,1,(k-1))
		soundPlay(sndBreak)

	end

end

function mazeHit(thisSign, signIndex)

	local k = 0
	local x1 = 0
	local x2 = 0
	local yy = 0
	local arrayMax = 0
	local bResult = false
	local bFound = true

	bResult = false

	if (thisSign == SIGN_POST32) then

		if (signIndex == GOLEFT) then

			arrayMax = 51

		else

			arrayMax = 49

		end

	elseif (thisSign == SIGN_POST175) then

		if (signIndex == GOLEFT) then

			arrayMax = 59

		else

			arrayMax = 17

		end

	elseif (thisSign == SIGN_POST340) then

		if (signIndex == GOLEFT) then

			arrayMax = 67

		else

			arrayMax = 90

		end

	elseif (thisSign == SIGN_POST500) then

		if (signIndex == GOLEFT) then

			arrayMax = 24

		else

			arrayMax = 42

		end

	elseif (thisSign == SIGN_POST630) then

		if (signIndex == GOLEFT) then

			arrayMax = 11

		else

			arrayMax = 30

		end

	elseif (thisSign == SIGN_ENTRANCE) then

		if (signIndex == GOFRONT) then

			arrayMax = 59

		else

			arrayMax = 64

		end

	else

		bFound = false

	end

	if bFound then


		for k=1, arrayMax do

			x1 = ResHMx(sign[signIndex][k][lineStartX])
			x2 = ResHMx(sign[signIndex][k][lineEndX])
			yy = ResHMy(sign[signIndex][k][lineY])

			if (mousey > yy -5) and (mousey < yy +5) then

				if (mousex >= x1 and mousex <= x2) then

					bResult = true
					break
				end

			elseif (mousey <= yy-5) then -- Cursor is not near the vinicity for sure. Skip checking and save some cpu cycles.

				break

			end

		end

	end

	return bResult

end

function mineHit(thisItem)

	local k = 0
	local x1 = 0
	local x2 = 0
	local yy = 0
	local arrayMax = 0
	local bResult = false

	bResult = false

	if (thisItem == MINE_SIGN) then

		arrayMax = 21

	elseif (thisItem == MINE_LANTERN) then

		arrayMax = 20

	elseif (thisItem == MINE_PAN) then

		arrayMax = 12

	elseif (thisItem == MINE_PITCHFORK) then

		arrayMax = 23

	elseif (thisItem == MINE_SKULL) then

		arrayMax = 25

	else

		bFound = false

	end

	for k=1, arrayMax do

		x1 = ResHMx(mine[thisItem][k][lineStartX])
		x2 = ResHMx(mine[thisItem][k][lineEndX])
		yy = ResHMy(mine[thisItem][k][lineY])
		
		if (mousey > yy -5) and (mousey < yy +5) then

			if (mousex >= x1 and mousex <= x2) then

				bResult = true
				break
			end

		elseif (mousey <= yy-5) then

			break

		end

	end

	return bResult

end

function onInputPressed(intWhat)

	if not bPause then

		if (intWhat == SWITCH_BUTTON3) then

			p1BUTTON3 = true

			if (iBullets > 0) then
				if not ((dip_ReloadTrigger == DOPT_LIGHTGUN) and ((mousex <=0 or mousex >= resX) or (mousey <=0 or mousey >= resY))) then
					if bAmmo then

						blinkRev()
						playMe(sndGunshot)
						bAmmo = false

					elseif not (currentLevel == levelHighScore or currentLevel == lvlIntro or currentLevel == levelService) then

						iBullets = iBullets - 1
						blinkRev()
						playMe(sndGunshot)
					end
				end
				
			else

				playMe(sndEmpty)
			end
			

			

		elseif (intWhat == SWITCH_BUTTON1) then

			p1BUTTON1 = true

		elseif (intWhat == SWITCH_SERVICE) then

			p1SERVICE = true

		elseif (intWhat == SWITCH_START1) then

			p1START1 = true

		elseif (intWhat == SWITCH_COIN1) then

			p1COIN1 = true

		elseif (intWhat == SWITCH_COIN2) then

			p1COIN2 = true

		end

	end

end

function onInputReleased(intWhat)

	if (currentState == stateInit) then return true end

	if (intWhat == SWITCH_PAUSE) then

		bPause = not bPause
		if not (currentLevel == lvlIntro or currentLevel == levelService) then bShowMouse = not bPause end

	elseif (intWhat == SWITCH_QUIT) then	-- if user pressed ESC then quit program.
			gameflow = stateQuit

	elseif (bPause == false) then


		if (intWhat == SWITCH_START1) then

			-- If user presses 1up on their cab then start a new game.

			if (iCredits > 0 and (currentLevel == lvlIntro)) then

				
				if dip_StartAtPart == 1 then

					p1START1 = false
					iCredits = iCredits - 1
					iScore = 0
					
					if not dip_Practice then
						
						currentLevel = levelStart
						
					else

						currentLevel = levelTut
						
					end
					
					lvlState = lvlSetup
					iLives = dip_LivesPerCredit
					iBullets = dip_MaxBullets
					bMakeNoise	= true
					bShowMouse = true
					bGotKey = false
					bReloadDisabled = false
					bBarKeeperDead = false
					bSaloonFirstTime = false
					bCorralFirstTime = true
					bBankFirstTime = true
					bPondFirstTime = false
					bLanternHit = false
					bItemHit = false
					bFuse = false
					bFuseNag = false
					bMazeComplete = false
					bHSMute = false
					bShowCredits = false
					bResetContinue = false
					p1COIN1 = false
					meanx = 0
					meany = 0
					cx = 0
					cy = 0
					bAmmo = false

					stage = nil; stage = {false, false, false, false, false, false, false, false, false, false, false, false, false, false}  -- All levels accessible
					showdown = nil; showdown = {false, false, false}

				elseif dip_StartAtPart == 2 then

					p1START1 = false
					iCredits = iCredits - 1
					iScore = 0
					currentLevel = levelSignSelect
					lvlState = lvlSetup
					iLives = dip_LivesPerCredit
					iBullets = dip_MaxBullets
					bMakeNoise	= true
					bShowMouse = true
					bGotKey = true
					bReloadDisabled = false
					bBarKeeperDead = false
					bSaloonFirstTime = false
					bCorralFirstTime = true
					bBankFirstTime = true
					bPondFirstTime = false
					bLanternHit = false
					bItemHit = false
					bFuse = false
					bFuseNag = false
					bMazeComplete = false
					bHSMute = false
					bShowCredits = false
					bResetContinue = false
					p1COIN1 = false
					meanx = 0
					meany = 0
					cx = 0
					cy = 0
					bAmmo = false

					stage = nil; stage = {true, true, true, true, false, false, false, false, false, false, false, false, false, false} 
					showdown = nil; showdown = {false, false, false}

				end

			end

		elseif (intWhat == SWITCH_BUTTON3) then

			p1BUTTON3 = false

			if (bReloadDisabled == false) then

				if bRealShow == false then

					if(dip_ReloadTrigger == DOPT_ONEMPTY) then

						if (iBullets == 0) then
							iBullets = 6
							playMe(sndReload)
						end

					elseif(dip_ReloadTrigger == DOPT_IMMEDIATE) then

						if (iBullets < 6) then	-- Reload if there is less than max (avoid emptying bonus bullets)
							iBullets = 6
							playMe(sndReload)
						end

					elseif(dip_ReloadTrigger == DOPT_BORDERS) then

						if (mousex <= 10 or mousex >= resX-10) or (mousey <= 10 or mousey >= resY-10) then

							if (iBullets < 6) then	-- Reload is there is less than max (avoid emptying bonus bullets)
								iBullets = 6
								playMe(sndReload)

							end

						end

					elseif(dip_ReloadTrigger == DOPT_LIGHTGUN) then

						if (mousex <=0 or mousex >= resX) or (mousey <=0 or mousey >= resY) then

							if (iBullets < 6) then	-- Reload is there is less than max (avoid emptying bonus bullets)
								iBullets = 6
								playMe(sndReload)

							end

						end

					end

				end

			else

				if currentLevel ~= lvlIntro then playMe(sndEmpty) end

			end


		elseif (intWhat == SWITCH_BUTTON1) then

			p1BUTTON1 = false

			if bRealShow == false then

				if (bReloadDisabled == false) then

					if (iBullets < 6) then	-- Reload if there is less than max (avoid emptying bonus bullets)
						iBullets = 6
						playMe(sndReload)
					end
				
				end

			end

	

		elseif (intWhat == SWITCH_COIN1 or intWhat == SWITCH_COIN2) then

			p1COIN1 = false
			p1COIN2 = false

			if (iCredits < 9) then

				iCoins = iCoins + 1

				if (iCoins >= dip_CoinsPerCredit) then

					iCoins = iCoins - dip_CoinsPerCredit
					iCredits = iCredits + 1
					playMe(sndCredit)

				else

					playMe(sndCoin)

				end
				if currentLevel == levelContinue then bResetContinue = true end

			end

		elseif (intWhat == SWITCH_SERVICE) then

			p1SERVICE = false
			bShowScore = false
			bShowMouse = true
			iScore = 0
			waitFor(0,false,true)
			if (currentLevel ~= levelService) then

				currentLevel = levelService
				lvlState = lvlSetup

			end

		end

	end

end

function onMouseMoved(intX, intY, intXrel, intYrel)

	mousex = intX * ratiox - ratioxOffset
	mousey = intY * ratioy - ratioyOffset
	cursorx = (intX - cursoroffsetx) * ratiox - ratioxOffset
	cursory = (intY - cursoroffsety) * ratioy - ratioyOffset
	revsetx = (intX - cursoroffsetx) * ratiox - ratioxOffset
	revsety = (intY - cursoroffsety) * ratioy - ratioyOffset

end


function initVLDP()

	if lvlState == lvlSetup then
	singeSetGameName("Maddog Mccree singe 2")
		discSkipToFrame(41540)
		lvlState = lvlRunning

	elseif lvlState == lvlRunning then

		if (currentFrame == 41650) then

			lvlState = lvlEnd

		end

	elseif lvlState == lvlEnd then

		currentState = stateStartup
	end

end

function onOverlayUpdate()

	-- The main game loop.

	overlayClear()

	currentFrame = discGetFrame()

	if (currentState == stateInit) then

		initVLDP()
				
	elseif (currentState == stateStartup) then

		singeRandomize()
	
		lvlState = lvlSetup
		currentLevel = lvlIntro
		currentState = statePlaying
		setShootDelay()
		bShowMouse = true
		currentState = statePlaying
		stage = nil; stage = {false, false, false, false, false, false, false, false, false, false, false, false, false, false}  -- All levels accessible

	elseif (currentState == statePlaying) then

		if (currentLevel == lvlIntro) then

			doIntro()

		elseif (currentLevel == levelShowdown) then

			doLevelShowdown()

		elseif (currentLevel == levelTownSelect) then

			doTownSelect()

		elseif (currentLevel == levelSignSelect) then

			doSignSelect()

		elseif (currentLevel == levelStart) then

			doLevelStart()

		elseif (currentLevel == levelSheriff) then

			doLevelSheriff()

		elseif (currentLevel == levelSaloon) then

			doLevelSaloon()

		elseif (currentLevel == levelCorral) then

			doLevelCorral()

		elseif (currentLevel == levelBank) then

			doLevelBank()

		elseif (currentLevel == levelFuse) then

			doLevelFuse()

		elseif (currentLevel == levelMine) then

			doLevelMine()

		elseif (currentLevel == levelBottle) then

			doShootTheBottle()

		elseif (currentLevel == levelMaze) then

			doLevelMaze()

		elseif (currentLevel == levelHideout) then

			doLevelHideout()

		elseif (currentLevel == levelHouse) then

			doLevelHouse()

		elseif (currentLevel == levelMaddog) then

			doLevelMaddog()

		elseif (currentLevel == levelHighScore) then

			doHighScore()

		elseif (currentLevel == levelService) then

			doServiceMenu()

		elseif (currentLevel == levelContinue) then

			doContinue()

		elseif (currentLevel == levelGameOver) then

			doGameOver()

		elseif (currentLevel == levelLivesLeft) then

			doLivesLeft()

		elseif (currentLevel == levelTut) then

			doLevelTut()

		end

	elseif (currentState == stateQuit) then

		discStop()

	end

	if (bShowMouse and singeWantsCrosshairs()) then
		
		spriteDraw(cursorx, cursory, sprCursor)
		
		if (bReversePointer) then
			if (iRevFrames == 0) then
				freezex=revsetx
				freezey=revsety
			end
			iRevFrames = iRevFrames + 1
			if  (dip_Crosshair == 5) then
				if (iRevFrames == 1) or (iRevFrames == 2) then
					spriteDraw(freezex, freezey, sprRev1)
				elseif (iRevFrames == 3) or (iRevFrames == 4) then
					spriteDraw(freezex, freezey, sprRev2)
				elseif (iRevFrames == 5) or (iRevFrames == 6) then
					spriteDraw(freezex, freezey, sprRev3)
				elseif (iRevFrames == 7) or (iRevFrames == 8) then
					spriteDraw(freezex, freezey, sprRev4)
				elseif (iRevFrames == 9) or (iRevFrames == 10) then
					spriteDraw(freezex, freezey, sprRev5)
				else
					bReversePointer = false
				end

			elseif (dip_ShowHit) then

				singeWantsCrosshairs()
				spriteDraw(freezex, freezey, sprRev)

				if (iRevFrames == REV_DELAY) then
					bReversePointer = false
				end
			end
		end
	
	end

	if (bShowScore) then
		drawLives()
		if not bFuse then drawScore() end
		drawBullets()

	elseif bShowCredits then

		blinkTimer(1)

		if heartbeat then

			if (iCredits > 0) then

				spriteDraw(tx, ty-10, sprCredits)
				spriteDraw(tx2, ty-10, sprNUM[iCredits])

			end

		end

	end

	if (bGunMute) then

		iMuteFrames = iMuteFrames + 1
		if (iMuteFrames == MUTE_DELAY) then

			bGunMute = false

		end

	end

	return(OVERLAY_UPDATED)

end

function onShutdown()


	hitbox=nil
	move=nil
	hitmap=nil
	powerup=nil
	civillian=nil
	starPos=nil
	sprNUM = nil
	poporder = nil
	sign = nil
	mine = nil
	maze = nil
	showdown = nil
	highscore = nil
	qx = nil
	qy = nil
	discStop()

	
end

function playMe(thisSound)

	if (bPlaySound == true and bGunMute == false) then -- and not bGunMute) then

		soundPlay(thisSound)

		return true

	else

		return false

	end

end

function selectMenuFrame()

	if (stage[STAGE_CORRAL] == false and stage[STAGE_SALOON] == false and stage[STAGE_SHERIFF] == false and stage[STAGE_BANK] == false) then

		menuFrame = offsetMenus +  0

	elseif (stage[STAGE_CORRAL] == false and stage[STAGE_SALOON] == true and stage[STAGE_SHERIFF] == false and stage[STAGE_BANK] == false) then

		menuFrame = offsetMenus +  1

	elseif (stage[STAGE_CORRAL] == true and stage[STAGE_SALOON] == false and stage[STAGE_SHERIFF] == false and stage[STAGE_BANK] == false) then

		menuFrame = offsetMenus +  2

	elseif (stage[STAGE_CORRAL] == true and stage[STAGE_SALOON] == true and stage[STAGE_SHERIFF] == false and stage[STAGE_BANK] == false) then

		menuFrame = offsetMenus +  3

	elseif (stage[STAGE_CORRAL] == false and stage[STAGE_SALOON] == false and stage[STAGE_SHERIFF] == false and stage[STAGE_BANK] == true) then

		menuFrame = offsetMenus +  4

	elseif (stage[STAGE_CORRAL] == false and stage[STAGE_SALOON] == true and stage[STAGE_SHERIFF] == false and stage[STAGE_BANK] == true) then

		menuFrame = offsetMenus +  5

	elseif (stage[STAGE_CORRAL] == true and stage[STAGE_SALOON] == false and stage[STAGE_SHERIFF] == false and stage[STAGE_BANK] == true) then

		menuFrame = offsetMenus +  6

	elseif (stage[STAGE_CORRAL] == true and stage[STAGE_SALOON] == true and stage[STAGE_SHERIFF] == false and stage[STAGE_BANK] == true) then

		menuFrame = offsetMenus +  7

	elseif (stage[STAGE_CORRAL] == false and stage[STAGE_SALOON] == false and stage[STAGE_SHERIFF] == true and stage[STAGE_BANK] == false) then

		menuFrame = offsetMenus +  8

	elseif (stage[STAGE_CORRAL] == false and stage[STAGE_SALOON] == true and stage[STAGE_SHERIFF] == true and stage[STAGE_BANK] == false) then

		menuFrame = offsetMenus +  9

	elseif (stage[STAGE_CORRAL] == true and stage[STAGE_SALOON] == false and stage[STAGE_SHERIFF] == true and stage[STAGE_BANK] == false) then

		menuFrame = offsetMenus +  10

	elseif (stage[STAGE_CORRAL] == true and stage[STAGE_SALOON] == true and stage[STAGE_SHERIFF] == true and stage[STAGE_BANK] == false) then

		menuFrame = offsetMenus +  11

	elseif (stage[STAGE_CORRAL] == false and stage[STAGE_SALOON] == false and stage[STAGE_SHERIFF] == true and stage[STAGE_BANK] == true) then

		menuFrame = offsetMenus +  12

	elseif (stage[STAGE_CORRAL] == false and stage[STAGE_SALOON] == true and stage[STAGE_SHERIFF] == true and stage[STAGE_BANK] == true) then

		menuFrame = offsetMenus +  13

	elseif (stage[STAGE_CORRAL] == true and stage[STAGE_SALOON] == false and stage[STAGE_SHERIFF] == true and stage[STAGE_BANK] == true) then

		menuFrame = offsetMenus +  14

	elseif (stage[STAGE_CORRAL] == true and stage[STAGE_SALOON] == true and stage[STAGE_SHERIFF] == true and stage[STAGE_BANK] == true) then

		menuFrame = offsetMenus +  15

	end

end

function setShootDelay()

	if (dip_Difficulty == DOPT_EASY) then

		iDelay = 0.8
		SCORE_BADGUY = 100
		SCORE_BOTTLE = 50
		SCORE_MADDOG = 500
		SCORE_SHOWDOWN = 500
		SCORE_SIGN = 100

	elseif (dip_Difficulty == DOPT_MEDIUM) then

		iDelay = 0.6
		SCORE_BADGUY = 200
		SCORE_BOTTLE = 100
		SCORE_MADDOG = 1000
		SCORE_SHOWDOWN = 600
		SCORE_SIGN = 200

	elseif (dip_Difficulty == DOPT_HARD) then

		iDelay = 0.3
		SCORE_BADGUY = 300
		SCORE_BOTTLE = 150
		SCORE_MADDOG = 1500
		SCORE_SHOWDOWN = 700
		SCORE_SIGN = 300

	end

end

function setupLevel(thisLevel)

	local k

	move = nil; move = {}

	--move indexes: start frame, end frame, deathFrmStartm, deathFrmEnd, where in hitmap index to start looking, where to end the whack-a-mole sequence

	if (thisLevel == levelStart) then

		move[1] = {}; move[1] = {1110, 1119, 1830, 2148}
		move[2] = {}; move[2] = {1225, 1243, 2150, 2443}
		totalMoves = 2
		hitmapTotal = 39
		thisOffset = offsetlvlStart
		GetStartArray()
	
	elseif (thisLevel == levelSheriff) then

		move[1] = {}; move[1] = {158, 178, 1973, 2040, 1}
		move[2] = {}; move[2] = {1969, 1974, 1973, 2040, 1}
		move[3] = {}; move[3] = { 450,  475, 2043, 2113, 1}
		move[4] = {}; move[4] = {1370, 1379, 2116, 2192, 1}
		move[5] = {}; move[5] = {2707, 2726, 2880, 3004, 1}

		totalMoves = 5
		hitmapTotal = 203
		thisOffset = offsetlvlSheriff
		GetSheriffArray()

	elseif (thisLevel == levelFuse) then

		move[1] = {}; move[1] = {222, 439, 927, 1388, 1}

		totalMoves = 1
		hitmapTotal = 216
		thisOffset = offsetVTS8
		GetFuseArray()

	elseif (thisLevel == levelPond) then

		move[1] = {}; move[1]   = {697, 753, 1107, 1179, 1, 0}

		totalMoves = 1
		hitmapTotal = 58
		thisOffset = offsetVTS10
		GetPondArray()

	elseif (thisLevel == levelMaddog) then

		move[1] = {}; move[1] = {2136, 2149, 3403, 3646, 1}
		move[2] = {}; move[2] = {2253, 2267, 3650, 3705, 1}

		totalMoves = 2
		hitmapTotal = 29
		thisOffset = offsetVTS11
		GetMadArray()

	elseif (thisLevel == levelHideout) then

		move[1] = {}; move[1] 	= {66, 80, 4008, 4065, 1}
		move[2] = {}; move[2] 	= {144, 154, 4129, 4161, 1}
		move[3] = {}; move[3] 	= {348, 357, 4168, 4201, 1}
		move[4] = {}; move[4] 	= {495, 694, 4204, 4344, 1}
		move[5] = {}; move[5] 	= {813, 822, 823, 950, 1}
		move[6] = {}; move[6] 	= {862, 873, 874, 950, 1}
		move[7] = {}; move[7] 	= {880, 890, 891, 950, 1}
		move[8] = {}; move[8] 	= {916, 930, 932, 950, 1}
		move[9] = {}; move[9] 	= {954, 976, 4345, 4442, 1}
		move[10] = {}; move[10] = {1143, 1171, 4447, 4486, 1}


		totalMoves = 10
		hitmapTotal = 342
		thisOffset = offsetVTS11
		GetHideoutArray()

	elseif (thisLevel == levelBottle) then

		setupLevelBottle()

	elseif (thisLevel == levelCorral) then

		setupLevelCorral()

	elseif (thisLevel == levelBank) then

		setupLevelBank()

	elseif (thisLevel == levelPlateau) then

		setupLevelPlateau()

	elseif (thisLevel == levelCanyon) then

		setupLevelCanyon()

	elseif (thisLevel == levelCliff) then

		setupLevelCliff()

	elseif (thisLevel == levelHouse) then

		setupLevelHouse()

	elseif (thisLevel == levelShowdown) then

		setupLevelShowdown()

	elseif (thisLevel == levelTut) then

		setupLevelTut()

	end

	for k=1,totalMoves do

		move[k][1] = move[k][1] + thisOffset
		move[k][2] = move[k][2] + thisOffset
		move[k][3] = move[k][3] + thisOffset
		move[k][4] = move[k][4] + thisOffset

		if ((thisLevel == levelCorral) or (thisLevel == levelBank) or (thisLevel == levelPlateau) or (thisLevel == levelCanyon) or (thisLevel == levelCliff) or (thisLevel == levelHouse) or (thisLevel == levelTut)) then

			move[k][6] = move[k][6] + thisOffset

		elseif (thisLevel == levelShowdown) then

			move[k][5] = move[k][5] + thisOffset
			move[k][6] = move[k][6] + thisOffset

		end

	end

	
end

function setupLevelBank()

		move[1] = {}; move[1]   = {  70,   99, 1333, 1396, 1,    0}
		move[2] = {}; move[2]   = { 152,  174, 1401, 1457, 1,    0}

		poporder = nil; poporder = {}
		poporder = {"345678","435678","567384","583467","568374","637485","865743","658347","348756","584367","674358","583674","678534","543867","476853","876543"}

		singeRandomize()
		
		local t = math.random (16)
		local d = 0
		local j = 3

		for k=1,6 do

			d = tonumber(string.sub(poporder[t],k,k))
			if (d == 3) then

				move[j]={}; move[j] = { 532,  583, 1459, 1509, 1,  626}

			elseif (d == 4) then

				move[j]={}; move[j] = { 627,  659, 1511, 1558, 1,  703}

			elseif (d == 5) then

				move[j]={}; move[j] = { 731,  771, 1560, 1616, 1,  820}

			elseif (d == 6) then

				move[j]={}; move[j] = { 825,  847, 1620, 1653, 1,  879}

			elseif (d == 7) then

				move[j]={}; move[j] = { 880,  919, 1655, 1696, 1, 956}

			elseif (d == 8) then

				move[j]={}; move[j] = {970, 1020, 1130, 1173, 1, 1175}

			end
			j = j + 1

		end

		move[9] = {}; move[9]   = {1245, 1279, 1698, 1747, 1, 1332}

		totalMoves = 9
		hitmapTotal = 423
		thisOffset = offsetlvlBank

		GetBankArray()

end

function setupLevelBottle()

	poporder = nil; poporder = {}
	poporder = {"1356", "2465", "1423", "5624", "1234", "6521", "3641", "2145"}

	singeRandomize()

	local t = math.random (8)
	local d = 0
	local j = 1

	for k=1,4 do

		d = tonumber(string.sub(poporder[t],k,k))

		if (d == 1) then

			move[j]={}; move[j] = {3146, 3178, 4041, 4103, 1}

		elseif (d == 2) then

			move[j]={}; move[j] = {3217, 3251, 3632, 3699, 1}

		elseif (d == 3) then

			move[j]={}; move[j] = {3503, 3538, 4041, 4103, 1}

		elseif (d == 4) then

			move[j]={}; move[j] = {3570, 3601, 3632, 3699, 1}

		elseif (d == 5) then

			move[j]={}; move[j] = {3886, 3927, 4041, 4103, 1}

		elseif (d == 6) then

			move[j]={}; move[j] = {3971, 4010, 3632, 3699, 1}

		end
		j = j + 1

	end

	totalMoves = 4
	hitmapTotal = 218
	thisOffset = offsetVTS8

	GetBottleArray()

end

function setupLevelCanyon()



		poporder = nil; poporder = {}
		poporder = {"12312","32123","31212","21321","13212","23123"}

		singeRandomize()

			local t = math.random (6)
			local d = 0
			local j = 1

			for k=1,5 do
				d = tonumber(string.sub(poporder[t],k,k))

				if bFlipCanyon then

					if (d == 1) then

						move[j]={}; move[j] = {1245, 1258, 1434, 1469, 1, 1294}

					elseif (d == 2) then

						move[j]={}; move[j] = {1313, 1316, 1475, 1500, 1, 1339}

					elseif (d == 3) then

						move[j]={}; move[j] = {1355, 1358, 1506, 1541, 1, 1374}

					end


				else

					if (d == 1) then

						move[j]={}; move[j] = {1607, 1620, 1798, 1832, 1, 1657}

					elseif (d == 2) then

						move[j]={}; move[j] = {1676, 1679, 1839, 1864, 1, 1702}

					elseif (d == 3) then

						move[j]={}; move[j] = {1720, 1723, 1868, 1903, 1, 1737}

					end

				end

				j = j + 1

			end

		if dip_Difficulty == DOPT_EASY then

			totalMoves = 3

		elseif dip_Difficulty == DOPT_MEDIUM then

			totalMoves = 4

		else
			totalMoves = 5
		end
		hitmapTotal = 45
		thisOffset = offsetVTS10

		GetCanyonArray()

end

function setupLevelCliff()

		singeRandomize()

		poporder = nil; poporder = {}
		poporder = {"1234567","1654327","1423657","1632547","1524637","1643527","1564237","1543267","1653427","1362547"}


			local t = math.random (10)
			local d = 0
			local j = 1

			for k=1,7 do

				d = tonumber(string.sub(poporder[t],k,k))

				if bFlipCliff then

					if (d == 1) then

						move[j]={}; move[j] = {1076, 1085, 1386, 1406, 1, 1105}

					elseif (d == 2) then

						move[j]={}; move[j] = {1107, 1118, 1413, 1438, 1, 1134}

					elseif (d == 3) then

						move[j]={}; move[j] = {1144, 1152, 1442, 1470, 1, 1179}

					elseif (d == 4) then

						move[j]={}; move[j] = {1184, 1206, 1473, 1520, 1, 1241}

					elseif (d == 5) then

						move[j]={}; move[j] = {1242, 1254, 1524, 1590, 1, 1289}

					elseif (d == 6) then

						move[j]={}; move[j] = {1293, 1297, 1595, 1630, 1, 1324}

					elseif (d == 7) then

						move[j]={}; move[j] = {1330, 1341, 1636, 1670, 1, 1364}

					end



				else

					if (d == 1) then

						move[j]={}; move[j] = {1741, 1750, 2052, 2072, 83, 1772}

					elseif (d == 2) then

						move[j]={}; move[j] = {1774, 1784, 2076, 2100, 83, 1797}

					elseif (d == 3) then

						move[j]={}; move[j] = {1811, 1818, 2105, 2133, 83, 1842}

					elseif (d == 4) then

						move[j]={}; move[j] = {1853, 1872, 2137, 2184, 83, 1904}

					elseif (d == 5) then

						move[j]={}; move[j] = {1909, 1920, 2189, 2255, 83, 1952}

					elseif (d == 6) then

						move[j]={}; move[j] = {1959, 1964, 2260, 2295, 83, 1992}

					elseif (d == 7) then

						move[j]={}; move[j] = {1998, 2007, 2302, 2336, 83, 2027}

					end

				end

				j = j + 1

			end

		totalMoves = 7
		hitmapTotal = 158
		thisOffset = offsetVTS9

		GetCliffArray()

end

function setupLevelCorral()

		poporder = nil; poporder = {}
		poporder = {"456789","546789","678495","694578","679485","748596","976854","769458","459867","695478","785469","694785","789645","654978","587964","987654"}

		move[1] = {}; move[1]   = {  85,  114, 1980, 2126, 1, 0}
		move[2] = {}; move[2]   = { 120,  143, 2130, 2188, 1, 0}
		move[3] = {}; move[3]   = { 193,  242, 2190, 2278, 1, 0}

		singeRandomize()

		local t = math.random (16)
		local d = 0
		local j = 4

		for k=1,6 do

			d = tonumber(string.sub(poporder[t],k,k))

			if (d == 4) then

				move[j]={}; move[j] = { 507,  541, 2281, 2322, 225, 579}

			elseif (d == 5) then

				move[j]={}; move[j] = { 570,  593, 2324, 2359, 260, 651}

			elseif (d == 6) then

				move[j]={}; move[j] = { 652,  693, 2364, 2400, 302, 710}

			elseif (d == 7) then

				move[j]={}; move[j] = { 713,  739, 2408, 2439, 344, 776}

			elseif (d == 8) then

				move[j]={}; move[j] = { 777,  818, 2448, 2475, 382, 922}

			elseif (d == 9) then

				move[j]={}; move[j] = { 923,  963, 2488, 2535, 424, 1002}

			end
			j = j + 1

		end

		move[10] = {}; move[10] = {1003, 1040, 2553, 2573, 464, 0}
		move[11] = {}; move[11] = {1238, 1267, 1268, 1481, 502, 0}
		move[12] = {}; move[12] = {1666, 1701, 2575, 2715,   1, 0}

		totalMoves = 12
		hitmapTotal = 567
		thisOffset = offsetlvlCorral

		GetCorralArray()

end

function setupLevelHouse()

		singeRandomize()

		poporder = nil; poporder = {}
		poporder = {"AEYKIDTQLR", "LRIDQOAJWS", "RYDEIKOTUA", "KIJQDEUTAY", "OQDULRYWSI", "LDOEYQAUTS"}

			local t = math.random (6)
			local d = ""
			local j = 1

			for k=1,10 do

				d = (string.sub(poporder[t],k,k))

				if (d == "A") then

					move[j]={}; move[j] = {4525, 4534, 5256, 5280, 1, 4560}

				elseif (d == "S") then

					move[j]={}; move[j] = {4565, 4575, 5285, 5316, 1, 4607}

				elseif (d == "D") then

					move[j]={}; move[j] = {4611, 4628, 5320, 5358, 1, 4656}

				elseif (d == "J") then

					move[j]={}; move[j] = {4664, 4678, 5362, 5386, 1, 4700}

				elseif (d == "K") then

					move[j]={}; move[j] = {4705, 4717, 5391, 5420, 1, 4750}

				elseif (d == "L") then

					move[j]={}; move[j] = {4754, 4770, 5425, 5462, 1, 4801}

				elseif (d == "Q") then

					move[j]={}; move[j] = {4806, 4820, 5467, 5491, 1, 4845}

				elseif (d == "W") then

					move[j]={}; move[j] = {4848, 4860, 5496, 5524, 1, 4890}

				elseif (d == "E") then

					move[j]={}; move[j] = {4892, 4914, 5529, 5565, 1, 4946}

				elseif (d == "R") then

					move[j]={}; move[j] = {4951, 4965, 5570, 5593, 1, 4992}

				elseif (d == "T") then

					move[j]={}; move[j] = {4996, 5005, 5598, 5626, 1, 5039}

				elseif (d == "Y") then

					move[j]={}; move[j] = {5042, 5058, 5631, 5668, 1, 5091}

				elseif (d == "U") then

					move[j]={}; move[j] = {5093, 5108, 5673, 5702, 1, 5134}

				elseif (d == "I") then

					move[j]={}; move[j] = {5136, 5147, 5702, 5736, 1, 5180}

				elseif (d == "O") then

					move[j]={}; move[j] = {5184, 5200, 5736, 5778, 1, 5241}

				end

				j = j + 1

			end

		if dip_Difficulty == DOPT_EASY then

			totalMoves = 4

		elseif dip_Difficulty == DOPT_MEDIUM then

			totalMoves = 7

		else

			totalMoves = 10
		
		end
			
		hitmapTotal = 194
		thisOffset = offsetVTS11

		GetHouseArray()

end

function setupLevelPlateau()


		poporder = nil; poporder = {}
		poporder = {"123","321","312","213","132","231"}

		singeRandomize()

			local t = math.random (6)
			local d = 0
			local j = 1

			for k=1,3 do
				d = tonumber(string.sub(poporder[t],k,k))

				if bFlipPlateau then
					
					if (d == 1) then

						move[j]={}; move[j] = {48, 60, 232, 263, 1, 84}

					elseif (d == 2) then

						move[j]={}; move[j] = {110, 122, 268, 308, 1, 148}

					elseif (d == 3) then

						move[j]={}; move[j] = {155, 179, 314, 337, 1, 205}

					end


				else
					
					if (d == 1) then

						move[j]={}; move[j] = {387, 398, 573, 604, 24, 421}

					elseif (d == 2) then

						move[j]={}; move[j] = {450, 462, 608, 648, 24, 487}

					elseif (d == 3) then

						move[j]={}; move[j] = {496, 520, 652, 675, 24, 546}

					end

				end

				j = j + 1

			end

		totalMoves = 3
		hitmapTotal = 101
		thisOffset = offsetVTS10

		GetPlateauArray()

end

function setupLevelShowdown()


	local u = 0
	local k = 0
	local bFlag = true

	if (showdown[1] and showdown[2] and showdown[3]) then

		for k=1,3 do

			showdown[k] = false

		end

	end

	while bFlag do

		singeRandomize()

		u = math.random(3)

		if (u == 1 and showdown[1] == false) then

			bFlag = false
			move[1] = {}; move[1] = {1020, 1039, 1910, 1967, 898, 1149}
			showdown [1]=true
			totalMoves = 1

		elseif (u == 2 and showdown[2] == false) then

			bFlag = false
			move[1] = {}; move[1] = {1285, 1299, 1969, 2023, 1149, 1417}
			showdown [2]=true
			totalMoves = 1

		elseif (showdown[3] == false) then

			bFlag = false
			move[1] = {}; move[1] = {1597, 1613, 2025, 2097, 1417, 1908}
			move[2] = {}; move[2] = {1712, 1739, 1741, 1907, 1710, 1908}


			totalMoves = 2
			showdown [3]=true
			
		end

	end


	hitmapTotal = 80
	thisOffset = offsetVTS4
	GetShowdownArray()

end

function setupLevelTut()

	poporder = nil; poporder = {}
	poporder = {"1356", "2436", "3415", "4623", "5231", "6524", "3124", "1436"}

	singeRandomize()

	local t = math.random (8)
	local d = 0
	local j = 1

	for k=1,4 do

		d = tonumber(string.sub(poporder[t],k,k))

		if (d == 1) then

			move[j]={}; move[j] = {1454, 1454, 1325, 1410, 1, 1485}

		elseif (d == 2) then

			move[j]={}; move[j] = {1487, 1487, 1325, 1410, 1, 1519}

		elseif (d == 3) then

			move[j]={}; move[j] = {1521, 1521, 1325, 1410, 1, 1553}

		elseif (d == 4) then

			move[j]={}; move[j] = {1555, 1555, 1325, 1410, 1, 1587}

		elseif (d == 5) then

			move[j]={}; move[j] = {1589, 1589, 1325, 1410, 1, 1621}

		elseif (d == 6) then

			move[j]={}; move[j] = {1623, 1623, 1325, 1410, 1, 1661}

		end
		j = j + 1

	end

	totalMoves = 4
	hitmapTotal = 6
	thisOffset = offsetHowToPlay

	GetTutorialArray()

end

function setupMazeArray()

		maze = nil; maze = {}
		if (iPosHideout == 1) then

			maze[1] = {}; maze[1] = {SIGN_POST32, GOLEFT}
			maze[2] = {}; maze[2] = {  0, DOPOND}
			maze[3] = {}; maze[3] = {  0, DOPLATEAU}
			maze[4] = {}; maze[4] = {SIGN_POST500, GOLEFT}
			maze[5] = {}; maze[5] = {  0, DOCLIFF}

			mazeSize = 5


		elseif (iPosHideout == 2) then

			maze[1] = {}; maze[1] = {SIGN_POST32, GOLEFT}
			maze[2] = {}; maze[2] = {  0, DOPOND}
			maze[3] = {}; maze[3] = {  0, DOPLATEAU}
			maze[4] = {}; maze[4] = {SIGN_POST500, GORIGHT}
			maze[5] = {}; maze[5] = {  0, DOCLIFF}

			mazeSize = 5

		elseif (iPosHideout == 3) then

			maze[1] = {}; maze[1] = {SIGN_POST32, GORIGHT}
			maze[2] = {}; maze[2] = {  0, DOPOND}
			maze[3] = {}; maze[3] = {  0, DOPLATEAU}
			maze[4] = {}; maze[4] = {SIGN_POST175, GOLEFT}
			maze[5] = {}; maze[5] = {  0, DOCLIFF}
			maze[6] = {}; maze[6] = {SIGN_POST630, GOLEFT}
			maze[7] = {}; maze[7] = {  0, DOCANYON}

			mazeSize = 7

		elseif (iPosHideout == 4) then

			maze[1] = {}; maze[1] = {SIGN_POST32, GORIGHT}
			maze[2] = {}; maze[2] = {  0, DOPOND}
			maze[3] = {}; maze[3] = {  0, DOPLATEAU}
			maze[4] = {}; maze[4] = {SIGN_POST175, GOLEFT}
			maze[5] = {}; maze[5] = {  0, DOCLIFF}
			maze[6] = {}; maze[6] = {SIGN_POST630, GORIGHT}
			maze[7] = {}; maze[7] = {  0, DOCANYON}

			mazeSize = 7

		elseif (iPosHideout == 5) then

			maze[1] = {}; maze[1] = {SIGN_POST32, GORIGHT}
			maze[2] = {}; maze[2] = {  0, DOPOND}
			maze[3] = {}; maze[3] = {  0, DOPLATEAU}
			maze[4] = {}; maze[4] = {SIGN_POST175, GORIGHT}
			maze[5] = {}; maze[5] = {  0, DOCLIFF}
			maze[6] = {}; maze[6] = {SIGN_POST340, GOLEFT}
			maze[7] = {}; maze[7] = {  0, DOCANYON}

			mazeSize = 7


		elseif (iPosHideout == 6) then

			maze[1] = {}; maze[1] = {SIGN_POST32, GORIGHT}
			maze[2] = {}; maze[2] = {  0, DOPOND}
			maze[3] = {}; maze[3] = {  0, DOPLATEAU}
			maze[4] = {}; maze[4] = {SIGN_POST175, GORIGHT}
			maze[5] = {}; maze[5] = {  0, DOCLIFF}
			maze[6] = {}; maze[6] = {SIGN_POST340, GORIGHT}
			maze[7] = {}; maze[7] = {  0, DOCANYON}

			mazeSize = 7

		end

		mazeSize = mazeSize + 1

		if (iApproach == HIDEOUT_REAR) then

			maze[mazeSize] = {}; maze[mazeSize] = {SIGN_ENTRANCE, GOFRONT}
		else

			maze[mazeSize] = {}; maze[mazeSize] = {SIGN_ENTRANCE, GOREAR}
		end

		
end

function shooterHit(thisFrame, loopStart)

	local k = 0
	local f1 = 0
	local f2 = 0
	local x1 = 0
	local x2 = 0
	local y1 = 0
	local y2 = 0
	local j = 1
	local bResult = false
	local bFound = false

	bResult = false

	for k=loopStart,hitmapTotal do

		if (hitmap[k][hitmapFrame] == thisFrame) then

			f1 = hitmap[k][hitmapIndex]
			f2 = f1 + (hitmap[k][hitmapCount]-1)
			bFound = true

			break
		end

	end

	if bFound then

		for k=f1,f2 do

			x1 = ResHMx(hitbox[k][bbx1])
			y1 = ResHMy(hitbox[k][bby1])
			x2 = ResHMx(hitbox[k][bbx2])
			y2 = ResHMy(hitbox[k][bby2])
			
			if k == f1 then

				meanx = (x1+x2)/2
				meany = (y1+y2)/2
			
			end

			--debugPrint(mousex)
			--debugPrint(mousey)
			--debugPrint("x1 "..x1)
			--debugPrint("x2 "..x2)
			--debugPrint("y1 "..y1)
			--debugPrint("y2 "..y2)
			--debugPrint("")
			--debugPrint(meanx)
			--debugPrint(meany)

			
			if (mousex >= x1 and mousex <= x2) and (mousey >= y1 and mousey <= y2) then	-- Player hit!

				if j == 1 then

					if f1 ~= f2 then

						if currentLevel ~= levelTut and currentLevel ~= levelBottle and currentLevel ~= levelMine then -- Headshot!

							iScore = iScore + (SCORE_BADGUY * 0.25)

						end

					end

				end

				--debugPrint("  OK")
				bResult = true
				break

			end
			j = j + 1

		end

	end

	return bResult

end

function shooterHitB(thisFrame, loopStart)

	local k = 0
	local f1 = 0
	local f2 = 0
	local x1 = 0
	local x2 = 0
	local y1 = 0
	local y2 = 0
	local j = 1
	local bResult = false
	local bFound = false

	bResult = false

	for k=loopStart,hitmapTotal do

		if (hitmap[k][hitmapFrame] == thisFrame) then

			f1 = hitmap[k][hitmapIndex]
			f2 = f1 + (hitmap[k][hitmapCount]-1)
			bFound = true

			break
		end

	end

	if bFound then

		for k=f1,f2 do

			x1 = ResHMx(hitbox[k][bbx1]-3)
			y1 = ResHMy(hitbox[k][bby1]-3)
			x2 = ResHMx(hitbox[k][bbx2]+2)
			y2 = ResHMy(hitbox[k][bby2]+2)
			
			if k == f1 then

				meanx = (x1+x2)/2
				meany = (y1+y2)/2
			
			end

						
			if (mousex >= x1 and mousex <= x2) and (mousey >= y1 and mousey <= y2) then	-- Player hit!

				if j == 1 then

					if f1 ~= f2 then

						if currentLevel ~= levelTut and currentLevel ~= levelBottle and currentLevel ~= levelMine then -- Headshot!

							iScore = iScore + (SCORE_BADGUY * 0.25)

						end

					end

				end

				bResult = true
				break

			end
			j = j + 1

		end

	end

	return bResult

end

function showDebugInfo()

end

function signHit(thisSign)

	local k = 0
	local x1 = 0
	local x2 = 0
	local yy = 0
	local arrayMax = 0
	local bResult = false
	local bFound = true

	bResult = false

	if (thisSign == SIGN_PROSPECTOR) then

		arrayMax = 48

	elseif (thisSign == SIGN_MINE) then

		arrayMax = 28

	elseif (thisSign == SIGN_HIDEOUT) then

		arrayMax = 58

	else

		bFound = false

	end

	if bFound then


		for k=1, arrayMax do

			x1 = ResHMx(sign[thisSign][k][lineStartX])
			x2 = ResHMx(sign[thisSign][k][lineEndX])
			yy = ResHMy(sign[thisSign][k][lineY])

			if (mousey > yy-5) and (mousey < yy +5) then

				if (mousex >= x1 and mousex <= x2) then

					bResult = true
					break
				end

			elseif (mousey <= yy-5) then

				break

			end

		end

	end

	return bResult


end

function newScore(thisScore)

	local bResult = false
	local k = 0

	for k=1,6 do

		if (tonumber(thisScore) >= tonumber(highscore[k][2])) then

			bResult = true
			break

		end

	end

	return bResult

end

function updateHS(thisName, thisScore)

	local k = 0
	local tempName = ""
	local tempScore = ""
	local tempHS = nil
	local bFound = false
	local fromHere = 0

	tempHS = {}

	for k=1,6 do

		tempHS[k] = {}
		tempHS[k] = {highscore[k][1], highscore[k][2]}

	end

	for k=1,6 do

		tempName = highscore[k][1]
		tempScore = highscore[k][2]

		if (tonumber(thisScore) >= tonumber(highscore[k][2])) then

			bFound = true
			highscore[k][1] = thisName
			highscore[k][2] = thisScore
			fromHere = k
			break

		end


	end

	if bFound then

		for k=fromHere,5 do

			highscore[k+1][1] = tempHS[k][1]
			highscore[k+1][2] = tempHS[k][2]

		end

	end

end

moveFrameStart = 1
moveFrameEnd = 2
frameDeathStart = 3
frameDeathEnd = 4
rndMoveStart = 7
rndMoveEnd = 8
rndMoveType = 9
BADGUY = 1
GOODGUY = 2

function setupLevelSaloon()

	move = nil; move={}

	move[1] = {}; move[1] = {64, 82, 3540, 3594, 889, 907, 50, 90, BADGUY}	
	move[2] = {}; move[2] = {118,  147, 3540, 3594,   1,  30, 110,  987, BADGUY}
	move[3] = {}; move[3] = {1100, 1134,    0,    0,  31, 239, 988, 1136, GOODGUY}
	move[4] = {}; move[4] = {1139, 1305,    0,    0,  31, 239, 1137, 1307, GOODGUY}
	move[5] = {}; move[5] = {1310, 1384,    0,    0, 240, 314, 1308, 1386, GOODGUY}
	move[6] = {}; move[6] = {1389, 1509,    0,    0, 315, 438, 1387, 1511, GOODGUY}
	move[7] = {}; move[7] = {1513, 1689,    0,    0, 439, 617, 1512, 1691, GOODGUY}
	move[8] = {}; move[8] = {1730, 1743, 3596, 3856, 618, 631, 1692, 1765, BADGUY}
	move[9] = {}; move[9] = {1770, 1799, 3858, 3916, 632, 661, 1766, 1810, BADGUY}
	move[10] = {}; move[10] = {1830, 1879, 3918, 3970, 662, 711, 1811, 1882, BADGUY}
	move[11] = {}; move[11] = {1900, 1970, 3972, 4032, 712, 786, 1883, 1975, BADGUY}
	move[12] = {}; move[12] = {2000, 2090, 4034, 4104, 787, 878, 1976, 2280, BADGUY}
	move[13] = {}; move[13] = {3604, 3612, 3596, 3856, 879, 887, 3596, 3616, BADGUY}
	
	totalMoves = 13
	hitmapTotal = 907
	thisOffset = offsetlvlSaloon
	GetSaloonArray()

	local k = 0
	for k=1,totalMoves do

		move[k][1] = move[k][1] + thisOffset
		move[k][2] = move[k][2] + thisOffset
		move[k][3] = move[k][3] + thisOffset
		move[k][4] = move[k][4] + thisOffset
		move[k][7] = move[k][7] + thisOffset
		move[k][8] = move[k][8] + thisOffset

	end


end

function doLevelSaloon()

	if (lvlState == lvlSetup) then

		lvlFrameStart = offsetlvlSaloon
		lvlFrameEnd = offsetlvlSaloon + 3006
		bShowMouse = true
		bMute = false
		bShowScore=true
		bReloadDisabled = false
		bLevelComplete = false
		currentMove = 1
		setupLevelSaloon()
		bNoMoreBonuses = false
		if iBullets < 6 then iBullets = 6 end

		if bSaloonFirstTime then

			discSkipToFrame(offsetlvlSaloon + 1010)
			currentMove = 3
			lvlState = lvlRunning

		else

			currentMove = 1
			discSkipToFrame(lvlFrameStart)
			lvlState = lvlRunning

		end

	elseif (lvlState == lvlPlayClip2) then
		
		if (currentFrame == move[currentMove][rndMoveEnd]) then
			
			if (currentMove <= totalMoves) then

				currentMove = currentMove + 1

				if currentMove == 13 then -- Special case. Player kills Jacko after killing bartender.

					currentMove = 14

				end

			end
			
			if currentMove == 3 then

				bSaloonFirstTime = true
				discPause()
				timerON(3)
				lvlState = lvlPlayClip3

			else

				lvlState = lvlRunning

			end

		elseif (p1BUTTON3) then

			p1BUTTON3 = false
			if (iBullets > 0) then

				if (civillianHit(currentFrame - thisOffset) == true) then

					discSearch(move[currentMove][frameDeathStart])
					move[currentMove][rndMoveType] = GOODGUY
					lvlState = lvlPlayDeath

				end

			end

		end

	elseif (lvlState == lvlPlayClip3) then

		if timerDue() then

			discPlay()
			lvlState = lvlRunning

		elseif p1BUTTON3 then

			p1BUTTON3 = false
			if mousex >= ResHMx(85) and mousex <= ResHMx(99) and mousey >= ResHMy(115) and mousey <= ResHMy(135) then


				playMe(sndTing)
				iBullets = 13
				discPlay()
				lvlState = lvlRunning

			end

		end

	elseif (lvlState == lvlPlayClip4) then

		if currentFrame == iFrameEnd then

			bLevelComplete = true
			lvlState = lvlEnd

		end

	elseif (lvlState == lvl2ndChance) then

		if timerDue() then

			shooterHit(currentFrame - thisOffset, move[currentMove][hitmapStart])
			discSkipToFrame(move[currentMove][frameDeathStart])
			lvlState = lvlPlayDeath

		else

			if (p1BUTTON3) then

				p1BUTTON3 = false
				if (iBullets > 0) then

					if (shooterHit(currentFrame - thisOffset, move[currentMove][hitmapStart]) == true) then -- Bad guy Hit!

						iScore = iScore + SCORE_BADGUY

						if currentMove == 13 then

							currentMove = 8
							lvlState = lvlPlayClip2
							discSkipToFrame(move[currentMove][moveFrameEnd]+1)

						else

							lvlState = lvlPlayClip2
							discSkipToFrame(move[currentMove][moveFrameEnd]+1)

						end

						

					end

				end

			end

		end

	elseif (lvlState == lvlRunning) then

		if (currentMove > totalMoves) then

				if bBarKeeperDead then

					setupClip(7467, 7999)

				else

					setupClip(offsetlvlSaloon + 2280, offsetlvlSaloon + 3006)

				end

				lvlState = lvlPlayClip4

		elseif (currentFrame == move[currentMove][moveFrameEnd]) then -- Death to player!

			if (move[currentMove][rndMoveType] == GOODGUY) then

				lvlState = lvlPlayClip2

			elseif currentMove == 1 then


				lvlState = lvlPlayClip2


			elseif currentMove == 8 then -- Special case. Jacko fires, kills bartender.

				currentMove = 13
				bBarKeeperDead = true
				discSkipToFrame(move[currentMove][rndMoveStart])

			else

				discSkipToFrame(move[currentMove][moveFrameEnd])
				discPause()
				timerON(iDelay)
				lvlState = lvl2ndChance
				
			end

		elseif (currentFrame >= move[currentMove][moveFrameStart] and currentFrame < move[currentMove][moveFrameEnd]) then

			if (p1BUTTON3) then

				p1BUTTON3 = false
				if (iBullets > 0) then

					if (shooterHit(currentFrame - thisOffset, move[currentMove][hitmapStart]) == true) then -- Bad guy Hit!

						iScore = iScore + SCORE_BADGUY
						if currentMove == 13 then

							currentMove = 8
							lvlState = lvlPlayClip2

						elseif currentMove == 1 then

							currentMove = 2
							discSkipToFrame(offsetlvlSaloon + 148)
							lvlState = lvlPlayClip2
							
						else

							lvlState = lvlPlayClip2

						end
						discSkipToFrame(move[currentMove][moveFrameEnd]+1)

					elseif (civillianHit(currentFrame - thisOffset) == true) then

						discSearch(move[currentMove][frameDeathStart])
						move[currentMove][rndMoveType] = GOODGUY
						lvlState = lvlPlayDeath

					end

				end

			end

		elseif (p1BUTTON3) then

			p1BUTTON3 = false
			if (civillianHit(currentFrame - thisOffset) == true) then

				discSearch(move[currentMove][frameDeathStart])
				move[currentMove][rndMoveType] = GOODGUY
				lvlState = lvlPlayDeath

			end

		end

	elseif (lvlState == lvlPlayDeath) then
		
		if currentMove ~= 13 or (currentMove == 13 and currentFrame > 8096) then  

			shotFrame = move[currentMove][frameDeathStart]
			if currentFrame - shotFrame > 3 then 

				cx = meanx - 252*UnX
				cy = meany - 240*UnY
				spriteDraw(cx, cy, sprShot) 

			end 

		end

		if (currentFrame == move[currentMove][frameDeathEnd]) then

			iLives = iLives - 1

			if move[currentMove][rndMoveType] == GOODGUY then

				if currentMove == 4 or currentMove == 8 then
				
					getUndertakerClip(UNDERTKR_SHOTGUY)
				
				else
					
					getUndertakerClip(UNDERTKR_SHOTWOMAN)

				end
			
			else
			
				getUndertakerClip(UNDERTKR_NORMAL)
			
			end


			lvlState = lvlUndertaker
			discPause()
			discSearch(undertkrFrmStart)
			discPlay()

		end

	elseif (lvlState == lvlUndertaker) then

		if (currentFrame == undertkrFrmEnd) then

			lvlState = lvlEnd

		elseif (p1BUTTON3) then

			
			p1BUTTON3 = false
			lvlState = lvlEnd

		end


	elseif (lvlState == lvlEnd) then

		lvlState = lvlSetup
		if (iLives == 0) then --Game Over

			tempLevel = levelTownSelect
			currentLevel = levelContinue

		elseif (iLives > 0 and dip_Undertaker == false and not bLevelComplete) then

			tempLevel = levelTownSelect
			currentLevel = levelLivesLeft

		else

			if (bLevelComplete) then

				stage[STAGE_SALOON] = true
				bGotKey = true
				currentLevel = levelTownSelect

			else

				testShowdown(levelTownSelect)

			end

		end
		
	end

end

function drawSpriteNumber(thisx, thisy, thisAmt)       -- Draw the numbers as sprites

	local j = 0
	local k = 0
	local s1 = ""
	
	s1 = tostring(string.format('%.0f',thisAmt))
		
	for k=1,(string.len(s1)) do
		
		j = tonumber(string.sub(s1,k,k))	
		spriteDraw((thisx + ((k-1) * 40*UnX)), thisy, sprNUM[j])
	
	end

end
