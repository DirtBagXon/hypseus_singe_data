--[[

PROGRAM NAME:	MAD DOG MCCREE (SINGE EDITION)
AUTHOR:			RDG2010
CONVERTED FOR SINGE 2: POIU2020
This file is part of MAD DOG MCCREE (SINGE EDITION)

    MAD DOG MCCREE (SINGE EDITION) is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation.

    MAD DOG MCCREE (SINGE EDITION) is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

    Read COPYING.TXT for more info.


]]--



bLock = false
bTurnOff = false
iSecs = 0
lastSeconds = 0
thisSeconds = 0
iLimit = 0

bGunMute = false
iMuteFrames = 0
MUTE_DELAY = 35

heartbeat = false
blinkSecs = 0
lastBlinkSecs = 0
iSecs = 0

iRevFrames = 0
REV_DELAY = 10
bReversePointer = false
revsetx = 0; revsety = 0

function singeRandomize()

	local k = 0
	for k=1,100 do
		math.randomseed(k * os.clock())
	end

end

function blinkTimer(thisMS)

	-- Function blinks every second.

	blinkSecs = os.clock()
	
	if bPause then
	
		lastBlinkSecs = blinkSecs
		
	else

		if (blinkSecs - lastBlinkSecs > thisMS) then
			heartbeat = not heartbeat
			lastBlinkSecs = blinkSecs

		end
		
	end		
	
end

function clockRnd()

	local j = os.clock()
	local q = 0
	local w = 0	

	q, w = math.modf(j)

	s2 = tostring(w)
	s2 = string.sub(s2,string.len(s2),string.len(s2))

	w = tonumber(s2)
	
	return w

end

function waitFor(thisLong, bReset, bTurnOff)

	-- Function counts seconds.
	-- When seconds accumulate to match thisLong then function returns true
	-- If bReset is set to true then timer is reset.
	-- Function returns TRUE when timer elapses, FALSE if it is still counting.
	
	thisSeconds = os.clock()
	if bPause then
		
		lastSeconds = thisSeconds 		
		return false
		
	else
	
		if (bTurnOff) then
		
			bLock = false
			bTurnOff = false
			iSecs = 0
			--return -100
		
		else
		
			if bLock == false or bReset == true then 
			
				iSecs = 0
				iLimit = thisLong
				lastSeconds = os.clock()
				bLock = true
				bReset = false
			
			end					
			
			if (thisSeconds ~= lastSeconds) then			
				
				iSecs = iSecs + thisSeconds - lastSeconds
				lastSeconds = thisSeconds 		

			end
			
			if (iSecs >= iLimit) then
						
				bLock = false
				iSecs = 0
				iLimit = 0
				return true
				
			else		
			
				return false
			
			end				
			
		end
		
	end

end

function timerOFF()

	iSecs = 0
	iLimit = 0

end

function timerON(thisLong)

	iSecs = 0
	iLimit = thisLong
	lastSeconds = os.clock()
	
end

function timerDue()
	thisSeconds = os.clock()
	
	if bPause then
		
		lastSeconds = thisSeconds 
		
	else
		
		if (thisSeconds ~= lastSeconds) then		
			
			iSecs = iSecs + thisSeconds - lastSeconds
			lastSeconds = thisSeconds 		
			
			--if (bDebug) then debugPrint ("Timer count " .. iSecs) end

		end
		
		if (iSecs >= iLimit) then

			timerOFF()
			return true
			
		else		
			--if bDebug then debugPrint("Amount to wait: " .. iLimit .. " iSecs so far: " .. iSecs) end
			return false
		
		end	
	
	end

end

function muteSound()
	
	iMuteFrames = 0
	bGunMute = true

end

function blinkRev()

	iRevFrames = 0
	bReversePointer = true

end


function setupClip(thisA, thisB)

	iFrameStart = thisA
	iFrameEnd = thisB
	discSkipToFrame(thisA)
	discChangeSpeed(1,1)

end

function getMiddle(thisPhrase)

	local x = 0
	
	x = resX/2 - spriteGetWidth(fontToSprite(thisPhrase)) * 0.5
	
	return x

end
