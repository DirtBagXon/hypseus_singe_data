--[[

PROGRAM NAME:	WHO SHOT JOHNNY ROCK? (SINGE EDITION)
AUTHOR:			RDG2010
CONVERTED FOR SINGE 2: POIU2020
This file is part of WHO SHOT JOHNNY ROCK? (SINGE EDITION)

    WHO SHOT JOHNNY ROCK? (SINGE EDITION) is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation.

    WHO SHOT JOHNNY ROCK? (SINGE EDITION) is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

    Read COPYING.TXT for more info.


]]--


sprLine1 = nil
sprLine2 = nil
sprLine3 = nil
qx = {}
qy = {}
--highscore = nil

sprmsg = nil
sprmsg2 = nil
sprmsg3 = nil
ssx = 0
ssy = 0	
dx = 0
dy = 0	
fx = 0
fy = 0
gx = 0
gy = 0

function readConfig()

	local s1
	local hsName = ""
	local hdScore = ""
	local k = 0
	local h1 = io.input(MYDIR .. "johnnyrock.cfg")	

	if (bDebug) then debugPrint ("Entering readConfig()") end

		local s1 = io.read("*line")		

		if (s1 ~= nil) then

			dip_CoinsPerCredit = tonumber(string.sub(s1,string.find(s1,"=")+1))			
			
		end
		
		s1 = io.read("*line")
		
		if (s1 ~= nil) then

			dip_CoinsPerContinue = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end
		
		s1 = io.read("*line")
		
		if (s1 ~= nil) then
		
			dip_LivesPerCredit = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end
		
		s1 = io.read("*line")
		
		if (s1 ~= nil) then

			dip_Difficulty = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end
		
		s1 = io.read("*line")
		
		if (s1 ~= nil) then

			dip_MaxBullets = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
		end
		
		s1 = io.read("*line")
		
		if (s1 ~= nil) then

			dip_Crosshair = tonumber(string.sub(s1,string.find(s1,"=")+1))
			
			if dip_Crosshair == 5 then
				bReversePointer = true
				
			else
			
				bReversePointer = false
			end
			
		end
		
		s1 = io.read("*line")
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))	
		
		if (s1 ~= nil) then
		
			if (s1 == 1) then
				dip_Undertaker = true
			else
				dip_Undertaker = false
			end
		end
		
		s1 = io.read("*line")
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))	
		
		if (s1 ~= nil) then

			if (s1 == 1) then
				dip_Showdown = true
			else
				dip_Showdown = false
			end
		end
		
		s1 = io.read("*line")
		s1 = tonumber(string.sub(s1,string.find(s1,"=")+1))	
		
		if (s1 ~= nil) then

			dip_PoolIndex = s1
		end
		
		s1 = io.read("*line")
		
		highscore = nil; highscore = {}
		for k=1,6 do
			s1 = io.read("*line")
			
			hsName = string.sub(s1,1,string.find(s1,",")-1)
			hsScore = string.sub(s1,string.find(s1,",")+1, string.len(s1))
			
			highscore[k] = {}
			highscore[k] = {hsName, hsScore}			
		
		end
		
		io.close(h1)
		
		if (bDebug) then debugPrint ("Leaving readConfig()") end

end

function writeConfig()

	-- This function writes the values of the dip variables
	-- into an external data file.

	local sNewLine = "\n"
	local s1 = ""

	local h1 = io.output(MYDIR .. "johnnyrock.cfg")
	
	io.write("dip_CoinsPerCredit = " .. dip_CoinsPerCredit .. sNewLine)
	io.write("dip_CoinsPerContinue = " .. dip_CoinsPerContinue .. sNewLine)
	io.write("dip_LivesPerCredit = " .. dip_LivesPerCredit .. sNewLine)
	io.write("dip_Difficulty = " .. dip_Difficulty .. sNewLine)	
	io.write("dip_MaxBullets = " .. dip_MaxBullets .. sNewLine) 
	io.write("dip_Crosshair = " .. dip_Crosshair .. sNewLine)
	
	if (dip_Undertaker == true) then
		io.write("dip_Undertaker = 1" .. sNewLine)
	else
		io.write("dip_Undertaker = 0" .. sNewLine)
	end	
	
	if (dip_Showdown == true) then
		io.write("dip_Showdown = 1" .. sNewLine)
	else
		io.write("dip_Showdown = 0" .. sNewLine)
	end
	
	io.write("dip_PoolIndex = " .. dip_PoolIndex .. sNewLine)
	io.write(sNewLine)
	
	for k=1,6 do
		
		
		s1 = highscore[k][1] .. "," .. highscore[k][2]
		io.write(s1 .. sNewLine)
	
	end
	
	io.close(h1)

end

function updateOpts(thisIndex)

	if (thisIndex == 1) then
	
		dip_CoinsPerCredit = dip_CoinsPerCredit + 1
		
		if (dip_CoinsPerCredit > 4) then
		
			dip_CoinsPerCredit = 1
		
		end

	elseif (thisIndex == 2) then
	
		dip_CoinsPerContinue = dip_CoinsPerContinue + 1
		
		if (dip_CoinsPerContinue > 4) then
		
			dip_CoinsPerContinue = 1
		
		end

	elseif (thisIndex == 3) then
	
		dip_LivesPerCredit = dip_LivesPerCredit + 200
	
		if (dip_LivesPerCredit > 2000) then
		
			dip_LivesPerCredit = 200
			
		end
		

	elseif (thisIndex == 4) then
	
		if (dip_Difficulty == DOPT_EASY) then
		
			dip_Difficulty = DOPT_MEDIUM
		
		elseif (dip_Difficulty == DOPT_MEDIUM) then
		
			dip_Difficulty = DOPT_HARD
			
		elseif (dip_Difficulty == DOPT_HARD) then
		
			dip_Difficulty = DOPT_EXTREME
		
		else	
		
			dip_Difficulty = DOPT_EASY
		
		end

	elseif (thisIndex == 5) then
	
		dip_MaxBullets = dip_MaxBullets + 100
	
		if (dip_MaxBullets > 500) then
		
			dip_MaxBullets = 100
			
		end
	
	elseif (thisIndex == 6) then
	
		dip_Undertaker = not dip_Undertaker
		
	elseif (thisIndex == 7) then	
		
		dip_Showdown = not dip_Showdown
		
	elseif (thisIndex == 8) then
	
		if (dip_Crosshair == 1) then
		
			dip_Crosshair = 2
			
		elseif (dip_Crosshair == 2) then
		
			dip_Crosshair = 3
			
		elseif (dip_Crosshair == 3) then
		
			dip_Crosshair = 4
			
		elseif (dip_Crosshair == 4) then
		
			dip_Crosshair = 5
			
		elseif (dip_Crosshair == 5) then
		
			dip_Crosshair = 1
			
		end
		
	elseif (thisIndex == 9) then
		

		lvlState = lvlEnd
		
	end

end

function printOpts()

	-- This function writes the options on the service menu screen.
	local k = 0
	local smenu = {}; 
	
	smenu[1] = "Coins per Credit  "
	smenu[2] = "Coins per Continue"
	smenu[3] = "Money per Credit  "
	smenu[4] = "Difficulty        "
	smenu[5] = "Starting Bullets  "
	smenu[6] = "Show Nag Clips    "
	smenu[7] = "Show Secretary    "
	smenu[8] = "Crosshair         "
	
	colorForeground(192, 192, 192)
	
	spriteDraw(sxmsg, symsg - 30, sprmsg)
	
	
	for k=1,8 do
	
		fontSelect(fontOpt)
		fontPrint(370*UnX, 59*UnY + k*99*UnY + 10, smenu[k])

	end

	fontSelect(font72)
	

	fontPrint(getMiddle("EXIT"),949*UnY, "EXIT")
	
	for k=1,9 do
		
		if (k == 1) then
		
			if (dip_CoinsPerCredit == DOPT_FREEPLAY) then
				
				fontPrint(1045*UnX, 158*UnY, "FREE PLAY")
				
			else
			
				fontPrint(1045*UnX, 158*UnY, dip_CoinsPerCredit)

			end
	
		elseif (k == 2) then
		
			fontPrint(1045*UnX, 256*UnY, dip_CoinsPerContinue)			
	
		elseif (k == 3) then
		
			fontPrint(1045*UnX, 355*UnY, dip_LivesPerCredit)			
	
		elseif (k == 4) then
	
			if (dip_Difficulty == DOPT_EASY) then
			
				fontPrint(1045*UnX, 454*UnY, "EASY")	
			
			elseif (dip_Difficulty == DOPT_MEDIUM) then
			
				fontPrint(1045*UnX, 454*UnY, "MEDIUM")	
			
			elseif (dip_Difficulty == DOPT_HARD) then
			
				fontPrint(1045*UnX, 454*UnY, "HARD")	
				
			else	
			
				fontPrint(1045*UnX, 454*UnY, "VERY HARD")	
			
			end
	
		elseif (k == 5) then
		
			fontPrint(1045*UnX, 553*UnY, dip_MaxBullets)				
	
		elseif (k == 6) then
		
			if dip_Undertaker then			
			
				fontPrint(1045*UnX, 652*UnY, "YES")	
				
			
			else
			
				fontPrint(1045*UnX, 652*UnY, "NO")	
				
			
			end
		
		elseif (k == 7) then		
			
			if dip_Showdown then
			
				fontPrint(1045*UnX, 751*UnY, "YES")	
				
			
			else
			
				fontPrint(1045*UnX, 751*UnY, "NO")
				
			
			end
			
		elseif (k == 8) then
	
			sprCursor = nil
			if (dip_Crosshair == 1) then
	
				sprCursor  = spriteLoad(MYDIR .. "crosshaira.png")
						
			elseif (dip_Crosshair == 2) then
			
				sprCursor  = spriteLoad(MYDIR .. "crosshairb.png")
			
				
			elseif (dip_Crosshair == 3) then
			
				sprCursor  = spriteLoad(MYDIR .. "crosshairc.png")
			
				
			elseif (dip_Crosshair == 4) then
			
				sprCursor  = spriteLoad(MYDIR .. "crosshaird.png")
			
				
			elseif (dip_Crosshair == 5) then
			
				sprCursor  = spriteLoad(MYDIR .. "crosshaire.png")
				fontPrint(945*UnX, 850*UnY, "ON TRIGGER")
									
			end
			
			spriteDraw(1045*UnX, 880*UnY, sprCursor)
				
		end

	end

end

function doServiceMenu()

	-- This is the main function for the service menu screen.

	local j = overlayGetWidth() * 0.5
	local h = j - 80
	local k = 80
	
	
	if (lvlState == lvlSetup) then
	
		if (bDebug) then debugPrint ("Entering doServiceMenu()") end

		discSkipToFrame(55193)
		discPause()		
		timerOFF()
		
		optSel = 1
		readConfig()
		
		bShowScore = false
		bPlaySound = false
		bReloadDisabled = true
		bShowMouse = false
		bShowCredits = false
		bShowdown = false
		bBonusLevel = false
		
		colorForeground(192, 192, 192)
		fontSelect(font72)
		sprmsg = fontToSprite ("OPTIONS MENU")
		sxmsg = (overlayGetWidth()  * 0.5) - (spriteGetWidth(sprmsg) * 0.5) 
		symsg = 40		
		
		lvlState = lvlRunning
	
	elseif (lvlState == lvlRunning) then
	
		if (p1BUTTON3) then
		
			p1BUTTON3 = false
			soundPlay(sndCoin)
			updateOpts(optSel)	
			
		elseif p1BUTTON1 then
		
			p1BUTTON1 = false	
			lvlState = lvlEnd		
			soundPlay(sndCoin)
			
		else
		
			if (mousey >= 0*UnY and mousey <= 256*UnY) then		-- Coins per credit
			
				spriteDraw(55*UnX, 192*UnY, sprArrow)
				optSel = 1
			
			elseif  (mousey >= 257*UnY and mousey <= 355*UnY) then	-- Lives per credit

				spriteDraw(55*UnX, 290*UnY, sprArrow)
				optSel = 2

			elseif  (mousey >= 356*UnY and mousey <= 454*UnY) then	-- Difficulty
				
				spriteDraw(55*UnX, 389*UnY, sprArrow)
				optSel = 3

			elseif  (mousey >= 455*UnY and mousey <= 553*UnY) then	-- Reload mode

				spriteDraw(55*UnX, 488*UnY, sprArrow)
				optSel = 4

			elseif (mousey >= 554*UnY and mousey <= 652*UnY) then	-- Show undertaker

				spriteDraw(55*UnX, 587*UnY, sprArrow)
				optSel = 5

			elseif (mousey >= 653*UnY and mousey <= 751*UnY) then -- Play showdowns

				spriteDraw(55*UnX, 686*UnY, sprArrow)
				optSel = 6

			elseif  (mousey >= 752*UnY and mousey <= 850*UnY) then -- Play practice

				spriteDraw(55*UnX, 785*UnY, sprArrow)
				optSel = 7

			elseif  (mousey >= 851*UnY and mousey <= 949*UnY) then -- Crosshair

				spriteDraw(105*UnX, 884*UnY, sprArrow)
				optSel = 8

			elseif  (mousey >= 950*UnY and mousey <= 1080*UnY) then -- exit

				spriteDraw(300*UnX, 983*UnY, sprArrow)
				optSel = 9

			end
			printOpts()
			
			
		end

	elseif (lvlState == lvlEnd) then
	
		writeConfig()
		bShowMouse = true
		iScore = 0
		iCoins = 0
		iCredits = 0
		gameflow = stateStartup
		if (bDebug) then debugPrint ("Leaving doServiceMenu()") end	

	end

end
